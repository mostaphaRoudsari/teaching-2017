<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<Archive name="Root">
  <!--Grasshopper archive-->
  <!--Grasshopper and GH_IO.dll are copyrighted by Robert McNeel & Associates-->
  <!--Archive generated by GH_IO.dll file utility library {0.2.0002}-->
  <items count="1">
    <item name="ArchiveVersion" type_name="gh_version" type_code="80">
      <Major>0</Major>
      <Minor>2</Minor>
      <Revision>2</Revision>
    </item>
  </items>
  <chunks count="2">
    <chunk name="Definition">
      <items count="1">
        <item name="plugin_version" type_name="gh_version" type_code="80">
          <Major>0</Major>
          <Minor>9</Minor>
          <Revision>76</Revision>
        </item>
      </items>
      <chunks count="5">
        <chunk name="DocumentHeader">
          <items count="5">
            <item name="DocumentID" type_name="gh_guid" type_code="9">969b3953-75e8-4d4f-8889-ace44bffcea1</item>
            <item name="Preview" type_name="gh_string" type_code="10">Shaded</item>
            <item name="PreviewMeshType" type_name="gh_int32" type_code="3">1</item>
            <item name="PreviewNormal" type_name="gh_drawing_color" type_code="36">
              <ARGB>255;50;50;50</ARGB>
            </item>
            <item name="PreviewSelected" type_name="gh_drawing_color" type_code="36">
              <ARGB>100;0;150;0</ARGB>
            </item>
          </items>
        </chunk>
        <chunk name="DefinitionProperties">
          <items count="3">
            <item name="Date" type_name="gh_date" type_code="8">635803367183252407</item>
            <item name="Description" type_name="gh_string" type_code="10"></item>
            <item name="Name" type_name="gh_string" type_code="10">Gupta_Naman.ghx</item>
          </items>
          <chunks count="3">
            <chunk name="Revisions">
              <items count="1">
                <item name="RevisionCount" type_name="gh_int32" type_code="3">0</item>
              </items>
            </chunk>
            <chunk name="Projection">
              <items count="2">
                <item name="Target" type_name="gh_drawing_point" type_code="30">
                  <X>-750</X>
                  <Y>-22</Y>
                </item>
                <item name="Zoom" type_name="gh_single" type_code="5">0.262144029</item>
              </items>
            </chunk>
            <chunk name="Views">
              <items count="1">
                <item name="ViewCount" type_name="gh_int32" type_code="3">0</item>
              </items>
            </chunk>
          </chunks>
        </chunk>
        <chunk name="RcpLayout">
          <items count="1">
            <item name="GroupCount" type_name="gh_int32" type_code="3">0</item>
          </items>
        </chunk>
        <chunk name="GHALibraries">
          <items count="1">
            <item name="Count" type_name="gh_int32" type_code="3">1</item>
          </items>
          <chunks count="1">
            <chunk name="Library" index="0">
              <items count="4">
                <item name="Author" type_name="gh_string" type_code="10">Robert McNeel and Associates</item>
                <item name="Id" type_name="gh_guid" type_code="9">16cf80bc-9018-cbdb-2238-976eb17fd30d</item>
                <item name="Name" type_name="gh_string" type_code="10">Python Interpreter</item>
                <item name="Version" type_name="gh_string" type_code="10">0.6.0.3</item>
              </items>
            </chunk>
          </chunks>
        </chunk>
        <chunk name="DefinitionObjects">
          <items count="1">
            <item name="ObjectCount" type_name="gh_int32" type_code="3">78</item>
          </items>
          <chunks count="78">
            <chunk name="Object" index="0">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">c552a431-af5b-46a9-a8a4-0fcbc27ef596</item>
                <item name="Name" type_name="gh_string" type_code="10">Group</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="26">
                    <item name="Border" type_name="gh_int32" type_code="3">1</item>
                    <item name="Colour" type_name="gh_drawing_color" type_code="36">
                      <ARGB>150;170;135;255</ARGB>
                    </item>
                    <item name="Description" type_name="gh_string" type_code="10">A group of Grasshopper objects</item>
                    <item name="ID" index="0" type_name="gh_guid" type_code="9">a210e8d4-6312-4608-8ecf-0930a8406c55</item>
                    <item name="ID" index="1" type_name="gh_guid" type_code="9">04a397fe-309e-4937-9c7c-2bf46d7ee54d</item>
                    <item name="ID" index="2" type_name="gh_guid" type_code="9">eeb63f2e-ffa3-4aea-9969-3b8178fbc576</item>
                    <item name="ID" index="3" type_name="gh_guid" type_code="9">c72e5e49-d9a8-489e-9585-7ad6b984d45b</item>
                    <item name="ID" index="4" type_name="gh_guid" type_code="9">538790c0-b483-4af7-974b-8da637763d9d</item>
                    <item name="ID" index="5" type_name="gh_guid" type_code="9">9df83d65-eabc-406d-af4a-2946d33213df</item>
                    <item name="ID" index="6" type_name="gh_guid" type_code="9">909270b8-3801-4aed-b3ca-b323a623afaf</item>
                    <item name="ID" index="7" type_name="gh_guid" type_code="9">8741d683-dfa5-47c1-a755-e1063bfc8fb4</item>
                    <item name="ID" index="8" type_name="gh_guid" type_code="9">ed13e53a-5fa2-4cff-bdd0-881d36ee4a07</item>
                    <item name="ID" index="9" type_name="gh_guid" type_code="9">79be3138-09c9-4502-a846-c968d6e08323</item>
                    <item name="ID" index="10" type_name="gh_guid" type_code="9">e39f5f60-64bc-4136-be3b-548b8249771d</item>
                    <item name="ID" index="11" type_name="gh_guid" type_code="9">8f4bce16-212a-496e-ae18-9ef93bbec04c</item>
                    <item name="ID" index="12" type_name="gh_guid" type_code="9">e403aff4-5af9-4fb0-a917-e5b68493b110</item>
                    <item name="ID" index="13" type_name="gh_guid" type_code="9">1fa7a603-1c61-40bd-aebf-127783406741</item>
                    <item name="ID" index="14" type_name="gh_guid" type_code="9">324d0099-ad92-45fa-88db-f0e2838e3d53</item>
                    <item name="ID" index="15" type_name="gh_guid" type_code="9">5ff58fe2-800c-457f-8bdf-fae6d0d2bc28</item>
                    <item name="ID" index="16" type_name="gh_guid" type_code="9">dbc80b80-e7f0-4671-8c3e-f9f0387035b6</item>
                    <item name="ID" index="17" type_name="gh_guid" type_code="9">96594b45-29ba-4733-af01-3dea24fcc6b0</item>
                    <item name="ID" index="18" type_name="gh_guid" type_code="9">78e2b317-b006-437b-bff8-7ebc895b2c42</item>
                    <item name="ID_Count" type_name="gh_int32" type_code="3">19</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">7c4c014a-2a4c-4149-a631-ad5f6a973844</item>
                    <item name="Name" type_name="gh_string" type_code="10">Group</item>
                    <item name="NickName" type_name="gh_string" type_code="10"></item>
                  </items>
                  <chunks count="1">
                    <chunk name="Attributes" />
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="1">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">c552a431-af5b-46a9-a8a4-0fcbc27ef596</item>
                <item name="Name" type_name="gh_string" type_code="10">Group</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="13">
                    <item name="Border" type_name="gh_int32" type_code="3">1</item>
                    <item name="Colour" type_name="gh_drawing_color" type_code="36">
                      <ARGB>150;170;135;255</ARGB>
                    </item>
                    <item name="Description" type_name="gh_string" type_code="10">A group of Grasshopper objects</item>
                    <item name="ID" index="0" type_name="gh_guid" type_code="9">c72e5e49-d9a8-489e-9585-7ad6b984d45b</item>
                    <item name="ID" index="1" type_name="gh_guid" type_code="9">538790c0-b483-4af7-974b-8da637763d9d</item>
                    <item name="ID" index="2" type_name="gh_guid" type_code="9">9df83d65-eabc-406d-af4a-2946d33213df</item>
                    <item name="ID" index="3" type_name="gh_guid" type_code="9">909270b8-3801-4aed-b3ca-b323a623afaf</item>
                    <item name="ID" index="4" type_name="gh_guid" type_code="9">1fa7a603-1c61-40bd-aebf-127783406741</item>
                    <item name="ID" index="5" type_name="gh_guid" type_code="9">324d0099-ad92-45fa-88db-f0e2838e3d53</item>
                    <item name="ID_Count" type_name="gh_int32" type_code="3">6</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">a210e8d4-6312-4608-8ecf-0930a8406c55</item>
                    <item name="Name" type_name="gh_string" type_code="10">Group</item>
                    <item name="NickName" type_name="gh_string" type_code="10"></item>
                  </items>
                  <chunks count="1">
                    <chunk name="Attributes" />
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="2">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">c552a431-af5b-46a9-a8a4-0fcbc27ef596</item>
                <item name="Name" type_name="gh_string" type_code="10">Group</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="31">
                    <item name="Border" type_name="gh_int32" type_code="3">1</item>
                    <item name="Colour" type_name="gh_drawing_color" type_code="36">
                      <ARGB>150;170;135;255</ARGB>
                    </item>
                    <item name="Description" type_name="gh_string" type_code="10">A group of Grasshopper objects</item>
                    <item name="ID" index="0" type_name="gh_guid" type_code="9">f3da6f8f-e234-4b57-a16b-9df7f047d1a3</item>
                    <item name="ID" index="1" type_name="gh_guid" type_code="9">0cf5abcb-9352-432e-9085-06f5e07c4319</item>
                    <item name="ID" index="2" type_name="gh_guid" type_code="9">c8b17ac9-9fcd-43dd-bd4c-6fbc3c931f4c</item>
                    <item name="ID" index="3" type_name="gh_guid" type_code="9">5ca59abd-8096-4c53-941e-13ed33c08573</item>
                    <item name="ID" index="4" type_name="gh_guid" type_code="9">a84d22da-683d-409b-b376-1734b8e8ee32</item>
                    <item name="ID" index="5" type_name="gh_guid" type_code="9">cd44ae03-dea6-468a-82ea-529113a5833f</item>
                    <item name="ID" index="6" type_name="gh_guid" type_code="9">6e1790b3-b42a-4aab-b7cc-ee732483793d</item>
                    <item name="ID" index="7" type_name="gh_guid" type_code="9">bf26dc1f-9b71-438f-9dfc-1ae52be325a9</item>
                    <item name="ID" index="8" type_name="gh_guid" type_code="9">43ab3e6c-3d9d-46ce-b70e-a8c64d567a15</item>
                    <item name="ID" index="9" type_name="gh_guid" type_code="9">68989fa6-3118-480a-9b13-7fa2a16c2b6a</item>
                    <item name="ID" index="10" type_name="gh_guid" type_code="9">ff82b5cb-8488-47c7-93ae-4726fbea9ae3</item>
                    <item name="ID" index="11" type_name="gh_guid" type_code="9">fe574e67-d933-4b3d-a466-41a259d71c7f</item>
                    <item name="ID" index="12" type_name="gh_guid" type_code="9">eac949fa-749e-444a-9103-71ea0df07385</item>
                    <item name="ID" index="13" type_name="gh_guid" type_code="9">d932f61e-533c-468c-8cb9-9d14c2660774</item>
                    <item name="ID" index="14" type_name="gh_guid" type_code="9">2e397198-bc66-4695-8358-84459a607a91</item>
                    <item name="ID" index="15" type_name="gh_guid" type_code="9">38853f51-9076-446d-b3dd-0fb0b0977a96</item>
                    <item name="ID" index="16" type_name="gh_guid" type_code="9">8a3e4f0a-9e91-4ded-a02b-7b7dba9aa035</item>
                    <item name="ID" index="17" type_name="gh_guid" type_code="9">adfe25f9-0952-40dd-95e2-71c4ca926118</item>
                    <item name="ID" index="18" type_name="gh_guid" type_code="9">012ddc91-6be9-4017-82f0-1c6b23c1175d</item>
                    <item name="ID" index="19" type_name="gh_guid" type_code="9">35258783-6f16-479b-8048-9472d15e2f85</item>
                    <item name="ID" index="20" type_name="gh_guid" type_code="9">6b82635b-6677-4636-9fc6-607d4d9a2a25</item>
                    <item name="ID" index="21" type_name="gh_guid" type_code="9">2d62d641-f8c5-42dd-bbc3-2ba93c2fe969</item>
                    <item name="ID" index="22" type_name="gh_guid" type_code="9">597d8105-4c1b-4397-8244-c4c6da10847c</item>
                    <item name="ID" index="23" type_name="gh_guid" type_code="9">17b7dfef-971c-49d0-abc3-ba1258f35647</item>
                    <item name="ID_Count" type_name="gh_int32" type_code="3">24</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">d9e41a1b-e7dc-4118-ae39-1baffe0a35cc</item>
                    <item name="Name" type_name="gh_string" type_code="10">Group</item>
                    <item name="NickName" type_name="gh_string" type_code="10"></item>
                  </items>
                  <chunks count="1">
                    <chunk name="Attributes" />
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="3">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">c552a431-af5b-46a9-a8a4-0fcbc27ef596</item>
                <item name="Name" type_name="gh_string" type_code="10">Group</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="8">
                    <item name="Border" type_name="gh_int32" type_code="3">1</item>
                    <item name="Colour" type_name="gh_drawing_color" type_code="36">
                      <ARGB>150;170;135;255</ARGB>
                    </item>
                    <item name="Description" type_name="gh_string" type_code="10">A group of Grasshopper objects</item>
                    <item name="ID" index="0" type_name="gh_guid" type_code="9">43ab3e6c-3d9d-46ce-b70e-a8c64d567a15</item>
                    <item name="ID_Count" type_name="gh_int32" type_code="3">1</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">f3da6f8f-e234-4b57-a16b-9df7f047d1a3</item>
                    <item name="Name" type_name="gh_string" type_code="10">Group</item>
                    <item name="NickName" type_name="gh_string" type_code="10">ceiling</item>
                  </items>
                  <chunks count="1">
                    <chunk name="Attributes" />
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="4">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">c552a431-af5b-46a9-a8a4-0fcbc27ef596</item>
                <item name="Name" type_name="gh_string" type_code="10">Group</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="8">
                    <item name="Border" type_name="gh_int32" type_code="3">1</item>
                    <item name="Colour" type_name="gh_drawing_color" type_code="36">
                      <ARGB>150;170;135;255</ARGB>
                    </item>
                    <item name="Description" type_name="gh_string" type_code="10">A group of Grasshopper objects</item>
                    <item name="ID" index="0" type_name="gh_guid" type_code="9">68989fa6-3118-480a-9b13-7fa2a16c2b6a</item>
                    <item name="ID_Count" type_name="gh_int32" type_code="3">1</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">0cf5abcb-9352-432e-9085-06f5e07c4319</item>
                    <item name="Name" type_name="gh_string" type_code="10">Group</item>
                    <item name="NickName" type_name="gh_string" type_code="10">floor</item>
                  </items>
                  <chunks count="1">
                    <chunk name="Attributes" />
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="5">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">c552a431-af5b-46a9-a8a4-0fcbc27ef596</item>
                <item name="Name" type_name="gh_string" type_code="10">Group</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="8">
                    <item name="Border" type_name="gh_int32" type_code="3">1</item>
                    <item name="Colour" type_name="gh_drawing_color" type_code="36">
                      <ARGB>150;170;135;255</ARGB>
                    </item>
                    <item name="Description" type_name="gh_string" type_code="10">A group of Grasshopper objects</item>
                    <item name="ID" index="0" type_name="gh_guid" type_code="9">bf26dc1f-9b71-438f-9dfc-1ae52be325a9</item>
                    <item name="ID_Count" type_name="gh_int32" type_code="3">1</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">c8b17ac9-9fcd-43dd-bd4c-6fbc3c931f4c</item>
                    <item name="Name" type_name="gh_string" type_code="10">Group</item>
                    <item name="NickName" type_name="gh_string" type_code="10"></item>
                  </items>
                  <chunks count="1">
                    <chunk name="Attributes" />
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="6">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">c552a431-af5b-46a9-a8a4-0fcbc27ef596</item>
                <item name="Name" type_name="gh_string" type_code="10">Group</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="8">
                    <item name="Border" type_name="gh_int32" type_code="3">1</item>
                    <item name="Colour" type_name="gh_drawing_color" type_code="36">
                      <ARGB>150;170;135;255</ARGB>
                    </item>
                    <item name="Description" type_name="gh_string" type_code="10">A group of Grasshopper objects</item>
                    <item name="ID" index="0" type_name="gh_guid" type_code="9">6e1790b3-b42a-4aab-b7cc-ee732483793d</item>
                    <item name="ID_Count" type_name="gh_int32" type_code="3">1</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">5ca59abd-8096-4c53-941e-13ed33c08573</item>
                    <item name="Name" type_name="gh_string" type_code="10">Group</item>
                    <item name="NickName" type_name="gh_string" type_code="10"></item>
                  </items>
                  <chunks count="1">
                    <chunk name="Attributes" />
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="7">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">c552a431-af5b-46a9-a8a4-0fcbc27ef596</item>
                <item name="Name" type_name="gh_string" type_code="10">Group</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="8">
                    <item name="Border" type_name="gh_int32" type_code="3">1</item>
                    <item name="Colour" type_name="gh_drawing_color" type_code="36">
                      <ARGB>150;170;135;255</ARGB>
                    </item>
                    <item name="Description" type_name="gh_string" type_code="10">A group of Grasshopper objects</item>
                    <item name="ID" index="0" type_name="gh_guid" type_code="9">cd44ae03-dea6-468a-82ea-529113a5833f</item>
                    <item name="ID_Count" type_name="gh_int32" type_code="3">1</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">a84d22da-683d-409b-b376-1734b8e8ee32</item>
                    <item name="Name" type_name="gh_string" type_code="10">Group</item>
                    <item name="NickName" type_name="gh_string" type_code="10"></item>
                  </items>
                  <chunks count="1">
                    <chunk name="Attributes" />
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="8">
              <items count="3">
                <item name="GUID" type_name="gh_guid" type_code="9">410755b1-224a-4c1e-a407-bf32fb45ea7e</item>
                <item name="Lib" type_name="gh_guid" type_code="9">16cf80bc-9018-cbdb-2238-976eb17fd30d</item>
                <item name="Name" type_name="gh_string" type_code="10">Honeybee_Read EP Result</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="11">
                    <item name="CodeInput" type_name="gh_string" type_code="10">#
# Honeybee: A Plugin for Environmental Analysis (GPL) started by Mostapha Sadeghipour Roudsari
# 
# This file is part of Honeybee.
# 
# Copyright (c) 2013-2017, Chris Mackey &lt;Chris@MackeyArchitecture.com&gt; 
# Honeybee is free software; you can redistribute it and/or modify 
# it under the terms of the GNU General Public License as published 
# by the Free Software Foundation; either version 3 of the License, 
# or (at your option) any later version. 
# 
# Honeybee is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of 
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Honeybee; If not, see &lt;http://www.gnu.org/licenses/&gt;.
# 
# @license GPL-3.0+ &lt;http://spdx.org/licenses/GPL-3.0+&gt;


"""
This component reads the results of an EnergyPlus simulation from the WriteIDF Component or any EnergyPlus result .csv file address.  Note that, if you use this component without the WriteIDF component, you should make sure that a corresponding .eio file is next to your .csv file at the input address that you specify.
_
This component reads only the results related to zones.  For results related to surfaces, you should use the "Honeybee_Read EP Surface Result" component.

-
Provided by Honeybee 0.0.62
    
    Args:
        _resultFileAddress: The result file address that comes out of the WriteIDF component.
    Returns:
        totalThermalLoad: The total thermal energy used by each zone in kWh.  This includes cooling and heating.
        thermalLoadBalance: The thermal energy used by each zone in kWh.  Heating values are positive while cooling values are negative.
        cooling: The cooling energy needed in kWh. For Ideal Air loads, this output is the sum of sensible and latent heat that must be removed from each zone.  For detailed HVAC systems (other than ideal air), this output will be electric energy needed to power each chiller/cooling coil.
        heating: The heating energy needed in kWh. For Ideal Air loads, this is the heat that must be added to each zone.  For detailed HVAC systems (other than ideal air), this will be fuel energy or electric energy needed for each boiler/heating element.
        electricLight: The electric lighting energy needed for each zone in kWh.
        electricEquip: The electric equipment energy needed for each zone in kWh.
        fanElectric: The fan electric energy in kWh for either a natural ventilation fan or a heating or cooling system fan.  This ouput will not appear when there is no fan in the model.
        pumpElectric: The water pump electric energy in kWh for a heating or cooling system.  This ouput will not appear when there is no water pump in the model.
        peopleGains: The internal heat gains in each zone resulting from people (kWh).
        totalSolarGain: The total solar gain in each zone(kWh).
        infiltrationEnergy: The heat loss (negative) or heat gain (positive) in each zone resulting from infiltration (kWh).
        mechVentilationEnergy: The heat loss (negative) or heat gain (positive) in each zone resulting from the outdoor air coming through the HVAC System (kWh).
        natVentEnergy: The heat loss (negative) or heat gain (positive) in each zone resulting from natural ventilation (kWh).
        operativeTemperature: The mean operative temperature of each zone (degrees Celcius).
        airTemperature: The mean air temperature of each zone (degrees Celcius).
        meanRadTemperature: The mean radiant temperature of each zone (degrees Celcius).
        relativeHumidity: The relative humidity of each zone (%).
        airFlowVolume: The total volume of air flowing into the room through both the windows and infiltration (m3/s).  This is voulme of air is at standard density (20 C and adjusted for the elevation above sea level of the weather file).
        airHeatGainRate: The total heat transfer rate to the air from lighting, equipment(appliances/pulg loads), people, the surfaces of the zone, and gains through the heating system.  This output is useful for the estimation of air stratification in the Comfort Analysis workflow.
        otherZoneData: Other zone data that is in the result file (in no particular order).  Note that this data cannot be normalized by floor area as the component does not know if it can be normalized.
"""

ghenv.Component.Name = "Honeybee_Read EP Result"
ghenv.Component.NickName = 'readEPResult'
ghenv.Component.Message = 'VER 0.0.62\nJUL_28_2017'
ghenv.Component.IconDisplayMode = ghenv.Component.IconDisplayMode.application
ghenv.Component.Category = "Honeybee"
ghenv.Component.SubCategory = "10 | Energy | Energy"
#compatibleHBVersion = VER 0.0.56\nMAY_02_2015
#compatibleLBVersion = VER 0.0.59\nAPR_04_2015
ghenv.Component.AdditionalHelpFromDocStrings = "4"


from System import Object
import Grasshopper.Kernel as gh
from Grasshopper import DataTree
from Grasshopper.Kernel.Data import GH_Path
import scriptcontext as sc
import copy
import os

#Check to be sure that the files exist.
csvExists = True
if _resultFileAddress and _resultFileAddress != None:
    if not os.path.isfile(_resultFileAddress):
        csvExists = False
        warning = 'The result file does not exist.'
        print warning
        ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warning)


#Read the location and the analysis period info from the eio file, if there is one.
#Also try to read the floor areas from this file to be used in EUI calculations.
location = "NoLocation"
start = "NoDate"
end = "NoDate"
zoneNameList = []
floorAreaList = []
gotData = False

if _resultFileAddress and csvExists == True:
    try:
        numZonesLine = 0
        numZonesIndex = 0
        zoneAreaLines = []
        areaIndex = 0
        
        eioFileAddress = _resultFileAddress[0:-3] + "eio"
        if not os.path.isfile(eioFileAddress):
            # try to find the file from the list
            studyFolder = os.path.dirname(_resultFileAddress)
            fileNames = os.listdir(studyFolder)
            for fileName in fileNames:
                if fileName.lower().endswith("eio"):
                    eioFileAddress = os.path.join(studyFolder, fileName)
                    break
                    
        eioResult = open(eioFileAddress, 'r')
        for lineCount, line in enumerate(eioResult):
            if "Site:Location," in line:
                location = line.split(",")[1].split("WMO")[0]
            elif "WeatherFileRunPeriod" in line:
                start = (int(line.split(",")[3].split("/")[0]), int(line.split(",")[3].split("/")[1]), 1)
                end = (int(line.split(",")[4].split("/")[0]), int(line.split(",")[4].split("/")[1]), 24)
            elif "Zone Summary" in line and "Number of Zones" in line:
                for index, text in enumerate(line.split(",")):
                    numZonesLine = lineCount+1
                    if "Number of Zones" in text: numZonesIndex = index
                    else: pass
            elif lineCount == numZonesLine:
                numZones = line.split(",")[numZonesIndex]
            elif "Zone Information" in line and "Floor Area {m2}" in line:
                zoneAreaLines = range(lineCount+1, lineCount+1+int(numZones))
                for index, text in enumerate(line.split(",")):
                    if "Floor Area {m2}" in text: areaIndex = index
                    else: pass
            elif lineCount in zoneAreaLines:
                zoneNameList.append(line.split(",")[1])
                floorAreaList.append(float(line.split(",")[areaIndex]))
                gotData = True
            else: pass
        eioResult.close()
    except:
        try: eioResult.close()
        except: pass 
        warning = 'Your simulation probably did not run correctly. \n' + \
                  'Check the report out of the Run Simulation component to see what severe or fatal errors happened in the simulation. \n' + \
                  'If there are no severe or fatal errors, the issue could just be that there is .eio file adjacent to the .csv _resultFileAddress. \n'+ \
                  'Check the folder of the file address you are plugging into this component and make sure that there is both a .csv and .eio file in the folder.'
        print warning
        ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warning)
else: pass


# Make data tree objects for all of the outputs.
totalThermalLoad = DataTree[Object]()
thermalLoadBalance = DataTree[Object]()
cooling = DataTree[Object]()
heating = DataTree[Object]()
electricLight = DataTree[Object]()
electricEquip = DataTree[Object]()
fanElectric = DataTree[Object]()
pumpElectric = DataTree[Object]()
peopleGains = DataTree[Object]()
totalSolarGain = DataTree[Object]()
infiltrationEnergy = DataTree[Object]()
mechVentilationEnergy = DataTree[Object]()
natVentEnergy = DataTree[Object]()
operativeTemperature = DataTree[Object]()
airTemperature = DataTree[Object]()
meanRadTemperature = DataTree[Object]()
relativeHumidity = DataTree[Object]()
airFlowVolume = DataTree[Object]()
airHeatGainRate = DataTree[Object]()
otherZoneData = DataTree[Object]()

#Create py lists to hold the airflow data.
infiltrationFlow = []
natVentFlow = []
mechSysAirFlow = []
earthTubeFlow = []
zoneHeatingEnergy = []
zoneCoolingEnergy = []
internalAirGain = []
surfaceAirGain = []
systemAirGain = []
testTracker = []
try:
    for zone in zoneNameList:
        infiltrationFlow.append([])
        natVentFlow.append([])
        mechSysAirFlow.append([])
        earthTubeFlow.append([])
        zoneHeatingEnergy.append([])
        zoneCoolingEnergy.append([])
        internalAirGain.append([])
        surfaceAirGain.append([])
        systemAirGain.append([])
        testTracker.append([])
except: pass

#Make a list to keep track of what outputs are in the result file.
dataTypeList = [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
parseSuccess = False

#If the energy values are set to be normalized, make the units in kWh/m2.
energyUnit = "kWh"
idealAirTrigger = False
centTrigger = False

#Make a function to add headers.
def makeHeader(list, path, zoneName, timestep, name, units, normable):
    list.Add("key:location/dataType/units/frequency/startsAt/endsAt", GH_Path(path))
    list.Add(location, GH_Path(path))
    list.Add(name + " for" + zoneName, GH_Path(path))
    list.Add(units, GH_Path(path))
    list.Add(timestep, GH_Path(path))
    list.Add(start, GH_Path(path))
    list.Add(end, GH_Path(path))

def makeHeaderAlt(list, path, zoneName, timestep, name, units, normable):
    thePath = GH_Path(int(path[0]), int(path[1]))
    list.Add("key:location/dataType/units/frequency/startsAt/endsAt", thePath)
    list.Add(location, thePath)
    list.Add(name + " for" + zoneName, thePath)
    list.Add(units, thePath)
    list.Add(timestep, thePath)
    list.Add(start, thePath)
    list.Add(end, thePath)


#Make a function to check the zone name.
def checkZone(csvName):
    zoneName = None
    
    for count, name in enumerate(zoneNameList):
        if name == csvName:
            zoneName = name
            path.append(count)
    
    return zoneName

def checkZoneSys(sysInt):
    zoneName = zoneNameList[int(sysInt)-1]
    path.append(int(sysInt)-1)
    return zoneName

def checkZSys(sysInt, sysType):
    zoneName = " " + sysType + " " + str(sysInt)
    path.append(int(sysInt)-1)
    return zoneName

def checkSys(sysInt, sysType, sysMult=None):
    zoneName = " " + sysType + " " + str(sysInt)
    if sysMult == None:
        path.append(int(sysInt)-1+len(zoneNameList))
    else:
        path.append((int(sysInt)-1+len(zoneNameList))*sysMult)
    return zoneName

customCount = 0
def checkCustomName(customInt):
    path.append(len(zoneNameList)+len(zoneNameList)+len(zoneNameList)+int(customInt))

def checkCentralSys(sysInt, sysType):
    if sysType == 0: zoneName = " Chiller " + str(sysInt)
    elif sysType == 1: zoneName = " Boiler " + str(sysInt)
    elif sysType == 2: zoneName = " Fan" + str(sysInt)
    elif sysType == 3: zoneName = " Pump" + str(sysInt)
    elif sysType == 4: zoneName = " Humidifier" + str(sysInt)
    elif sysType == 5: zoneName = " VRF Heat Pump" + str(sysInt)
    else: zoneName = 'Unknown'
    if sysType == 4:
        path.append((len(zoneNameList)*3)+int(sysInt))
    elif sysType == 5:
        path.append((len(zoneNameList)*2)+int(sysInt))
    else:
        path.append(len(zoneNameList)+int(sysInt))
    
    return zoneName

def checkZoneOther(dataIndex, csvName):
    zoneName = None
    for count, name in enumerate(zoneNameList):
        if name == csvName:
            zoneName = name
            path.append([count, dataIndex[count]])
            dataIndex[count] += 1
    return zoneName

otherCount = 0
def checkOther(name, otherCount):
    path.append([len(zoneNameList)+1,otherCount])
    return ' Site'

dataIndex = []
for name in zoneNameList:
    dataIndex.append(0)


# PARSE THE RESULT FILE.
if _resultFileAddress and gotData == True and csvExists == True:
    try:
        result = open(_resultFileAddress, 'r')
        
        for lineCount, line in enumerate(result):
            if lineCount == 0:
                #ANALYZE THE FILE HEADING
                key = []; path = []
                for columnCount, column in enumerate(line.split(',')):
                    
                    if 'Zone Ideal Loads Supply Air Total Cooling Energy' in column or 'Zone Ideal Loads Supply Air Sensible Cooling Energy' in column or 'Zone Ideal Loads Supply Air Latent Cooling Energy' in column or 'Chiller Electric Energy' in column or 'Cooling Coil Electric Energy' in column or 'Zone VRF Air Terminal Cooling Electric Energy' in column or 'VRF Heat Pump Cooling Electric Energy' in column:
                        
                        if 'Zone Ideal Loads Supply Air Total Cooling Energy' in column and 'ZONE HVAC' in column:
                            zoneName = checkZoneSys(" " + (":".join(column.split(":")[:-1])).split('ZONE HVAC IDEAL LOADS AIR SYSTEM ')[-1])
                            idealAirTrigger = True
                        elif 'Zone Ideal Loads Supply Air Sensible Cooling Energy' in column and 'ZONE HVAC' in column:
                            zoneName = checkZoneSys(" " + (":".join(column.split(":")[:-1])).split('ZONE HVAC IDEAL LOADS AIR SYSTEM ')[-1])
                            idealAirTrigger = True
                        elif 'IDEAL LOADS AIR SYSTEM' in column:
                            zoneName = checkZone(" " + ":".join(column.split(":")[:-1]).split(' IDEAL LOADS AIR SYSTEM')[0])
                            idealAirTrigger = True
                        elif 'COIL COOLING DX SINGLE SPEED' in column:
                            zoneName = checkSys(" " + ":".join(column.split(":")[:-1]).split('COIL COOLING DX SINGLE SPEED ')[-1], 'DX Cooling Coil')
                            idealAirTrigger = False
                        elif 'COIL COOLING DX TWO SPEED' in column:
                            zoneName = checkSys(" " + ":".join(column.split(":")[:-1]).split('COIL COOLING DX TWO SPEED ')[-1], 'DX Cooling Coil')
                            idealAirTrigger = False
                        elif 'ZONE HVAC TERMINAL UNIT VARIABLE REFRIGERANT FLOW' in column:
                            zoneName = checkZSys(" " + ":".join(column.split(":")[:-1]).split('ZONE HVAC TERMINAL UNIT VARIABLE REFRIGERANT FLOW ')[-1], 'VRF Terminal Unit')
                            idealAirTrigger = False
                        elif 'VRF HEAT PUMP -' in column:
                            zoneName = checkCentralSys(" " + ":".join(column.split(":")[:-1]).split('VRF HEAT PUMP - ')[-1], 5)
                            idealAirTrigger = False
                        elif 'COIL COOLING WATER TO AIR HEAT PUMP EQUATION FIT' in column and not 'DOAS' in column:
                            zoneName = checkZSys(" " + ":".join(column.split(":")[:-1]).split('COIL COOLING WATER TO AIR HEAT PUMP EQUATION FIT ')[-1], 'Zone Heat Pump Coil')
                            idealAirTrigger = False
                        elif 'COIL COOLING WATER TO AIR HEAT PUMP EQUATION FIT' in column and 'DOAS' in column:
                            zoneName = checkSys(" " + ":".join(column.split(":")[:-1]).split('COIL COOLING WATER TO AIR HEAT PUMP EQUATION FIT ')[-1], 'Heat Pump Coil', 2)
                            idealAirTrigger = 2
                        elif 'Chiller Electric Energy' in column:
                            zoneName = checkCentralSys(" " + ":".join(column.split(":")[:-1]).split('CHILLER ELECTRIC EIR ')[-1], 0)
                            idealAirTrigger = False
                        else:
                            zoneName = " " +column.split(":")[0]
                            checkCustomName(customCount)
                            customCount+=1
                        
                        try:
                            if idealAirTrigger == True:
                                makeHeader(cooling, int(path[columnCount]), zoneName, column.split('(')[-1].split(')')[0], "Cooling Load", energyUnit, True)
                            else:
                                makeHeader(cooling, int(path[columnCount]), zoneName, column.split('(')[-1].split(')')[0], "Cooling Electric Energy", energyUnit, True)
                            dataTypeList[2] = True
                            key.append(0)
                        except:
                            key.append(-1)
                    
                    elif 'Zone Ideal Loads Supply Air Total Heating Energy' in column or 'Zone Ideal Loads Supply Air Sensible Heating Energy' in column or 'Zone Ideal Loads Supply Air Latent Heating Energy' in column or 'Boiler Heating Energy' in column or 'Heating Coil Total Heating Energy' in column or 'Heating Coil Gas Energy' in column or 'Heating Coil Electric Energy' in column or 'Humidifier Electric Energy' in column or 'Zone VRF Air Terminal Heating Electric Energy' in column or 'VRF Heat Pump Heating Electric Energy' in column:
                        notFound = False
                        if 'Zone Ideal Loads Supply Air Total Heating Energy' in column and 'ZONE HVAC' in column:
                            zoneName = checkZoneSys(" " + (":".join(column.split(":")[:-1])).split('ZONE HVAC IDEAL LOADS AIR SYSTEM ')[-1])
                            idealAirTrigger = True
                        elif 'IDEAL LOADS AIR SYSTEM' in column:
                            zoneName = checkZone(" " + ":".join(column.split(":")[:-1]).split(' IDEAL LOADS AIR SYSTEM')[0])
                            idealAirTrigger = True
                        elif 'COIL HEATING DX SINGLE SPEED' in column and not 'Heating Coil Total Heating Energy' in column:
                            zoneName = checkZSys(" " + ":".join(column.split(":")[:-1]).split('COIL HEATING DX SINGLE SPEED ')[-1], 'DX Heating Coil')
                            idealAirTrigger = 2
                        elif 'COIL HEATING GAS' in column and not 'Heating Coil Electric Energy' in column:
                            zoneName = checkSys(" " + ":".join(column.split(":")[:-1]).split('COIL HEATING GAS ')[-1], 'Gas Coil')
                            idealAirTrigger = False
                        elif 'COIL HEATING ELECTRIC' in column:
                            zoneName = checkSys(" " + ":".join(column.split(":")[:-1]).split('COIL HEATING ELECTRIC ')[-1], 'Electric Coil')
                            idealAirTrigger = 2
                        elif 'COIL HEATING WATER TO AIR HEAT PUMP EQUATION FIT' in column:
                            zoneName = checkSys(" " + ":".join(column.split(":")[:-1]).split('COIL HEATING WATER TO AIR HEAT PUMP EQUATION FIT ')[-1], 'Zone Heat Pump Coil', 2)
                            idealAirTrigger = 2
                        elif 'ZONE HVAC TERMINAL UNIT VARIABLE REFRIGERANT FLOW' in column and not 'Heating Coil Total Heating Energy' in column:
                            zoneName = checkZSys(" " + ":".join(column.split(":")[:-1]).split('ZONE HVAC TERMINAL UNIT VARIABLE REFRIGERANT FLOW ')[-1], 'VRF Terminal Unit')
                            idealAirTrigger = 2
                        elif 'VRF HEAT PUMP -' in column:
                            zoneName = checkCentralSys(" " + ":".join(column.split(":")[:-1]).split('VRF HEAT PUMP - ')[-1], 5)
                            idealAirTrigger = 2
                        elif 'Boiler Heating Energy' in column:
                            zoneName = checkCentralSys(" " + ":".join(column.split(":")[:-1]).split('BOILER HOT WATER ')[-1], 1)
                            idealAirTrigger = False
                        elif 'HUMIDIFIER STEAM ELECTRIC' in column:
                            zoneName = checkCentralSys(" " + ":".join(column.split(":")[:-1]).split('HUMIDIFIER STEAM ELECTRIC ')[-1], 4)
                            idealAirTrigger = 2
                        elif 'Heating Coil Total Heating Energy' not in column and not 'COIL HEATING GAS' in column:
                            zoneName = " " +column.split(":")[0]
                            checkCustomName(customCount)
                            customCount+=1
                        else:
                            zoneName = None
                            path.append(0)
                        
                        try:
                            if zoneName != None:
                                if idealAirTrigger == True:
                                    makeHeader(heating, int(path[columnCount]), zoneName, column.split('(')[-1].split(')')[0], "Heating Load", energyUnit, True)
                                elif idealAirTrigger == False:
                                    makeHeader(heating, int(path[columnCount]), zoneName, column.split('(')[-1].split(')')[0], "Heating Fuel Energy", energyUnit, False)
                                else:
                                    makeHeader(heating, int(path[columnCount]), zoneName, column.split('(')[-1].split(')')[0], "Heating Electric Energy", energyUnit, False)
                                dataTypeList[3] = True
                                key.append(1)
                            else:
                                key.append(-1)
                        except:
                            key.append(-1)
                    
                    elif 'Zone Lights Electric Energy' in column:
                        key.append(2)
                        zoneName = checkZone(" " + ":".join(column.split(":")[:-1]))
                        makeHeader(electricLight, int(path[columnCount]), zoneName, column.split('(')[-1].split(')')[0], "Electric Lighting Energy", energyUnit, True)
                        dataTypeList[4] = True
                    
                    elif 'Zone Electric Equipment Electric Energy' in column:
                        key.append(3)
                        zoneName = checkZone(" " + ":".join(column.split(":")[:-1]))
                        makeHeader(electricEquip, int(path[columnCount]), zoneName, column.split('(')[-1].split(')')[0], "Electric Equipment Energy", energyUnit, True)
                        dataTypeList[5] = True
                    
                    elif 'Fan Electric Energy' in column:
                        key.append(15)
                        if 'FAN CONSTANT VOLUME' in column:
                            centTrigger = True
                            zoneName = checkCentralSys(" " + ":".join(column.split(":")[:-1]).split('FAN CONSTANT VOLUME ')[-1], 2)
                            makeHeader(fanElectric, int(path[columnCount]), zoneName, column.split('(')[-1].split(')')[0], "Fan Electric Energy", energyUnit, False)
                        elif 'FAN VARIABLE VOLUME' in column:
                            fanNum = int(":".join(column.split(":")[:-1]).split('FAN VARIABLE VOLUME ')[-1])
                            if centTrigger == True:
                                fanNum = fanNum+len(zoneNameList)
                            zoneName = checkCentralSys(" " + str(fanNum), 2)
                            makeHeader(fanElectric, int(path[columnCount]), zoneName, column.split('(')[-1].split(')')[0], "Fan Electric Energy", energyUnit, False)
                        elif 'FAN ON OFF' in column:
                            zoneName = checkZoneSys(" " + ":".join(column.split(":")[:-1]).split('FAN ON OFF ')[-1])
                            makeHeader(fanElectric, int(path[columnCount]), zoneName, column.split('(')[-1].split(')')[0], "Fan Electric Energy", energyUnit, False)
                        elif 'ZONE HVAC TERMINAL UNIT VARIABLE REFRIGERANT FLOW'  in column:
                            zoneName = checkZoneSys(" " + ":".join(column.split(" FAN:")[:-1]).split('ZONE HVAC TERMINAL UNIT VARIABLE REFRIGERANT FLOW ')[-1])
                            makeHeader(fanElectric, int(path[columnCount]), zoneName, column.split('(')[-1].split(')')[0], "Fan Electric Energy", energyUnit, False)
                        elif 'Zone Ventilation Fan Electric Energy' in column:
                            zoneName = checkZoneOther(dataIndex, " " + ":".join(column.split(":")[:-1]))
                            makeHeaderAlt(fanElectric, path[columnCount], zoneName, column.split('(')[-1].split(')')[0], "Fan Electric Energy", energyUnit, False)
                        elif 'Earth Tube Fan Electric Energy' in column:
                            zoneName = checkZoneOther(dataIndex, " " + ":".join(column.split(":")[:-1]))
                            makeHeaderAlt(fanElectric, path[columnCount], zoneName, column.split('(')[-1].split(')')[0], "Earth Tube Fan Electric Energy", energyUnit, False)
                        else:
                            zoneName = " " +column.split(":")[0]
                            checkCustomName(customCount)
                            customCount+=1
                            makeHeader(fanElectric, int(path[columnCount]), zoneName, column.split('(')[-1].split(')')[0], "Fan Electric Energy", energyUnit, False)
                        dataTypeList[6] = True
                    
                    elif 'Pump Electric Energy' in column:
                        key.append(25)
                        if 'PUMP CONSTANT SPEED' in column:
                            zoneName = checkZoneSys(" " + ":".join(column.split(":")[:-1]).split('PUMP CONSTANT SPEED ')[-1])
                            makeHeader(pumpElectric, int(path[columnCount]), zoneName, column.split('(')[-1].split(')')[0], "Pump Electric Energy", energyUnit, True)
                        elif 'PUMP VARIABLE SPEED' in column:
                            zoneName = checkCentralSys(" " + ":".join(column.split(":")[:-1]).split('PUMP VARIABLE SPEED ')[-1], 3)
                            makeHeader(pumpElectric, int(path[columnCount]), zoneName, column.split('(')[-1].split(')')[0], "Pump Electric Energy", energyUnit, True)
                        else:
                            zoneName = " " + column.split(":")[0]
                            checkCustomName(customCount)
                            customCount+=1
                            makeHeader(pumpElectric, int(path[columnCount]), zoneName, column.split('(')[-1].split(')')[0], "Pump Electric Energy", energyUnit, True)
                        dataTypeList[7] = True
                    
                    elif 'Zone People Total Heating Energy' in column or 'Zone People Sensible Heating Energy' in column or 'Zone People Latent Gain Energy' in column:
                        key.append(4)
                        zoneName = checkZone(" " + ":".join(column.split(":")[:-1]))
                        makeHeader(peopleGains, int(path[columnCount]), zoneName, column.split('(')[-1].split(')')[0], "People Energy", energyUnit, True)
                        dataTypeList[8] = True
                    
                    elif 'Zone Windows Total Transmitted Solar Radiation Energy' in column:
                        key.append(5)
                        zoneName = checkZone(" " + ":".join(column.split(":")[:-1]))
                        makeHeader(totalSolarGain, int(path[columnCount]), zoneName, column.split('(')[-1].split(')')[0], "Total Solar Gain", energyUnit, True)
                        dataTypeList[9] = True
                    
                    elif 'Zone Ventilation Sensible Heat Loss Energy ' in column:
                        key.append(6)
                        zoneName = checkZone(" " + ":".join(column.split(":")[:-1]))
                        makeHeader(natVentEnergy, int(path[columnCount]), zoneName, column.split('(')[-1].split(')')[0], "Natural Ventilation Energy", energyUnit, True)
                        dataTypeList[12] = True
                    
                    elif 'Zone Ventilation Sensible Heat Gain Energy' in column:
                        key.append(7)
                        zoneName = checkZone(" " + ":".join(column.split(":")[:-1]))
                    
                    elif 'Zone Ideal Loads Zone Total Heating Energy' in column or 'Zone Ideal Loads Zone Sensible Heating Energy' in column or 'Zone Ideal Loads Zone Latent Heating Energy' in column:
                        key.append(23)
                        if 'Zone Ideal Loads Zone Total Heating Energy' in column and 'ZONE HVAC' in column:
                            zoneName = checkZoneSys(" " + (":".join(column.split(":")[:-1])).split('ZONE HVAC IDEAL LOADS AIR SYSTEM ')[-1])
                        else:
                            zoneName = checkZone(" " + ":".join(column.split(":")[:-1]).split(' IDEAL LOADS')[0])
                        zoneHeatingEnergy[int(path[-1])].append(zoneName)
                        zoneHeatingEnergy[int(path[-1])].append(column.split('(')[-1].split(')')[0])
                    
                    elif 'Zone Ideal Loads Zone Total Cooling Energy' in column or 'Zone Ideal Loads Zone Sensible Cooling Energy' in column or 'Zone Ideal Loads Zone Latent Cooling Energy' in column:
                        key.append(24)
                        if 'Zone Ideal Loads Zone Total Cooling Energy' in column and 'ZONE HVAC' in column:
                            zoneName = checkZoneSys(" " + (":".join(column.split(":")[:-1])).split('ZONE HVAC IDEAL LOADS AIR SYSTEM ')[-1])
                        else:
                            zoneName = checkZone(" " + ":".join(column.split(":")[:-1]).split(' IDEAL LOADS')[0])
                        zoneCoolingEnergy[int(path[-1])].append(zoneName)
                        zoneCoolingEnergy[int(path[-1])].append(column.split('(')[-1].split(')')[0])
                    
                    elif 'Zone Infiltration Total Heat Loss Energy' in column or 'Zone Infiltration Sensible Heat Loss Energy' in column or 'Zone Infiltration Latent Heat Loss Energy' in column:
                        key.append(8)
                        zoneName = checkZone(" " + ":".join(column.split(":")[:-1]))
                        makeHeader(infiltrationEnergy, int(path[columnCount]), zoneName, column.split('(')[-1].split(')')[0], "Infiltration Energy", energyUnit, True)
                        dataTypeList[10] = True
                    
                    elif 'Zone Infiltration Total Heat Gain Energy' in column or 'Zone Infiltration Sensible Heat Gain Energy' in column or 'Zone Infiltration Latent Heat Gain Energy' in column:
                        key.append(9)
                        zoneName = checkZone(" " + ":".join(column.split(":")[:-1]))
                    
                    elif 'Zone Operative Temperature' in column:
                        key.append(10)
                        zoneName = checkZone(" " + ":".join(column.split(":")[:-1]))
                        makeHeader(operativeTemperature, int(path[columnCount]), zoneName, column.split('(')[-1].split(')')[0], "Operative Temperature", "C", False)
                        dataTypeList[13] = True
                    
                    elif 'Zone Mean Air Temperature' in column:
                        key.append(11)
                        zoneName = checkZone(" " + ":".join(column.split(":")[:-1]))
                        makeHeader(airTemperature, int(path[columnCount]), zoneName, column.split('(')[-1].split(')')[0], "Air Temperature", "C", False)
                        dataTypeList[14] = True
                    
                    elif 'Zone Mean Radiant Temperature' in column:
                        key.append(12)
                        zoneName = checkZone(" " + ":".join(column.split(":")[:-1]))
                        makeHeader(meanRadTemperature, int(path[columnCount]), zoneName, column.split('(')[-1].split(')')[0], "Radiant Temperature", "C", False)
                        dataTypeList[15] = True
                    
                    elif 'Zone Air Relative Humidity' in column:
                        key.append(13)
                        zoneName = checkZone(" " + ":".join(column.split(":")[:-1]))
                        makeHeader(relativeHumidity, int(path[columnCount]), zoneName, column.split('(')[-1].split(')')[0], "Relative Humidity", "%", False)
                        dataTypeList[16] = True
                    
                    elif 'Zone Ventilation Standard Density Volume Flow Rate' in column:
                        key.append(16)
                        zoneName = checkZone(" " + ":".join(column.split(":")[:-1]))
                        natVentFlow[int(path[-1])].append(zoneName)
                        natVentFlow[int(path[-1])].append(column.split('(')[-1].split(')')[0])
                    
                    elif 'Zone Infiltration Standard Density Volume Flow Rate' in column:
                        key.append(17)
                        zoneName = checkZone(" " + ":".join(column.split(":")[:-1]))
                        infiltrationFlow[int(path[-1])].append(zoneName)
                        infiltrationFlow[int(path[-1])].append(column.split('(')[-1].split(')')[0])
                    
                    elif 'Zone Mechanical Ventilation Standard Density Volume Flow Rate' in column:
                        key.append(22)
                        zoneName = checkZone(" " + ":".join(column.split(":")[:-1]))
                        mechSysAirFlow[int(path[-1])].append(zoneName)
                        mechSysAirFlow[int(path[-1])].append(column.split('(')[-1].split(')')[0])
                    
                    elif 'Earth Tube Air Flow Volume' in column:
                        key.append(21)
                        zoneName = checkZone(" " + ":".join(column.split(":")[:-1]))
                        earthTubeFlow[int(path[-1])].append(zoneName)
                        earthTubeFlow[int(path[-1])].append(column.split('(')[-1].split(')')[0])
                    
                    elif 'Zone Air Heat Balance Internal Convective Heat Gain Rate' in column:
                        key.append(18)
                        zoneName = checkZone(" " + ":".join(column.split(":")[:-1]))
                        internalAirGain[int(path[-1])].append(zoneName)
                        internalAirGain[int(path[-1])].append(column.split('(')[-1].split(')')[0])
                    
                    elif 'Zone Air Heat Balance Surface Convection Rate' in column:
                        key.append(19)
                        zoneName = checkZone(" " + ":".join(column.split(":")[:-1]))
                        surfaceAirGain[int(path[-1])].append(zoneName)
                        surfaceAirGain[int(path[-1])].append(column.split('(')[-1].split(')')[0])
                    
                    elif 'Zone Air Heat Balance System Air Transfer Rate' in column:
                        key.append(20)
                        zoneName = checkZone(" " + ":".join(column.split(":")[:-1]))
                        systemAirGain[int(path[-1])].append(zoneName)
                        systemAirGain[int(path[-1])].append(column.split('(')[-1].split(')')[0])
                    
                    elif ('Zone' in column or 'Site' in column) and not "Setpoint Not Met Time" in column or "Pump Electric Energy" in column:
                        if "Site" in column:
                            zoneName = checkOther(column, otherCount)
                            otherCount += 1
                        elif not "System" in column and not "SYSTEM" in column and not "ZONEHVAC" in column:
                            zoneName = checkZoneOther(dataIndex, (" " + ":".join(column.split(":")[:-1])))
                        elif 'IDEAL LOADS' in column and not "Supply Air Sensible" in column and not "Supply Air Latent" in column:
                            zoneName = checkZoneOther(dataIndex, (" " + column.split(" IDEAL LOADS")[0]))
                        else: zoneName = None
                        
                        if zoneName != None:
                            key.append(14)
                            otherDataName = column.split(':')[-1].split(' [')[0].upper()
                            if "ENERGY" in otherDataName or "GAIN" in otherDataName or "MASS" in otherDataName or "VOLUME" in otherDataName or "Loss" in otherDataName: normalizble = True
                            else: normalizble = False
                            makeHeaderAlt(otherZoneData, path[columnCount], zoneName, column.split('(')[-1].split(')')[0], column.split(':')[-1].split(' [')[0], column.split('[')[-1].split(']')[0], normalizble)
                            dataTypeList[19] = True
                        else:
                            key.append(-1)
                            path.append(-1)
                    
                    else:
                        key.append(-1)
                        path.append(-1)
            
            else:
                for columnCount, column in enumerate(line.split(',')):
                    if key[columnCount] != 14:
                        try: p = GH_Path(int(path[columnCount]))
                        except: p = GH_Path(int(path[columnCount][0]), int(path[columnCount][1]))
                    else:
                        p = GH_Path(int(path[columnCount][0]), int(path[columnCount][1]))
                    
                    if key[columnCount] == 0:
                        try: cooling.Add((float(column)/3600000), p)
                        except: dataTypeList[2] = False
                    elif key[columnCount] == 1:
                        try: heating.Add((float(column)/3600000), p)
                        except: dataTypeList[3] = False
                    elif key[columnCount] == 2:
                        try: electricLight.Add((float(column)/3600000), p)
                        except: dataTypeList[4] = False
                    elif key[columnCount] == 3:
                        try: electricEquip.Add((float(column)/3600000), p)
                        except: dataTypeList[5] = False
                    elif key[columnCount] == 4:
                        try: peopleGains.Add((float(column)/3600000), p)
                        except: dataTypeList[6] = False
                    elif key[columnCount] == 5:
                        try: totalSolarGain.Add((float(column)/3600000), p)
                        except: dataTypeList[7] = False
                    elif key[columnCount] == 6:
                        try: natVentEnergy.Add((((float(column))*(-1)/3600000) + ((float( line.split(',')[columnCount+1] ))/3600000)), p)
                        except: dataTypeList[11] = False
                    elif key[columnCount] == 7:
                        pass
                    elif key[columnCount] == 23:
                        try: zoneHeatingEnergy[int(path[columnCount])].append(float(column))
                        except: pass
                    elif key[columnCount] == 24:
                        try: zoneCoolingEnergy[int(path[columnCount])].append(float(column))
                        except: pass
                    elif key[columnCount] == 8:
                        try: infiltrationEnergy.Add((((float(column))*(-1)/3600000) + ((float( line.split(',')[columnCount+1] ))/3600000)), p)
                        except: dataTypeList[9] = False
                    elif key[columnCount] == 9:
                        pass
                    elif key[columnCount] == 10:
                        try: operativeTemperature.Add(float(column), p)
                        except: dataTypeList[12] = False
                    elif key[columnCount] == 11:
                        try: airTemperature.Add(float(column), p)
                        except: dataTypeList[13] = False
                    elif key[columnCount] == 12:
                        try: meanRadTemperature.Add(float(column), p)
                        except: dataTypeList[14] = False
                    elif key[columnCount] == 13:
                        try: relativeHumidity.Add(float(column), p)
                        except: dataTypeList[15] = False
                    elif key[columnCount] == 14:
                        try:
                            otherZoneData.Add(float(column), p)
                        except: pass
                    elif key[columnCount] == 15:
                        try: fanElectric.Add((float(column)/3600000), p)
                        except: pass
                    elif key[columnCount] == 25:
                        try: pumpElectric.Add((float(column)/3600000), p)
                        except: pass
                    elif key[columnCount] == 16:
                        try: natVentFlow[int(path[columnCount])].append(float(column))
                        except: pass
                    elif key[columnCount] == 17:
                        try: infiltrationFlow[int(path[columnCount])].append(float(column))
                        except: pass
                    elif key[columnCount] == 22:
                        try: mechSysAirFlow[int(path[columnCount])].append(float(column))
                        except: pass
                    elif key[columnCount] == 21:
                        try: earthTubeFlow[int(path[columnCount])].append(float(column))
                        except: pass
                    elif key[columnCount] == 18:
                        try: internalAirGain[int(path[columnCount])].append(float(column))
                        except: pass
                    elif key[columnCount] == 19:
                        try: surfaceAirGain[int(path[columnCount])].append(float(column))
                        except: pass
                    elif key[columnCount] == 20:
                        try: systemAirGain[int(path[columnCount])].append(float(column))
                        except: pass
                    
        result.close()
        parseSuccess = True
    except:
        try: result.close()
        except: pass
        parseSuccess = False
        warn = 'Failed to parse the result file.  Check the folder of the file address you are plugging into this component and make sure that there is a .csv file in the folder. \n'+ \
                  'If there is a file with no data in it (it is 0 kB), your simulation probably did not run correctly. \n' + \
                  'In this case, check the report out of the Run Simulation component to see what severe or fatal errors happened in the simulation. \n' + \
                  'If the csv file is there and it seems like there is data in it (it is not 0 kB), you are probably requesting an output that this component does not yet handle well. \n' + \
                  'If you report this bug of reading the output on the GH forums, we should be able to fix this component to accept the output soon.'
        print warn
        ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warn)


#Construct the total energy and energy balance outputs.  Also, construct the total solar and operative temperature outputs
def createPyList(ghTree):
    pyList = []
    for i in range(ghTree.BranchCount):
        branchList = ghTree.Branch(i)
        branchval = []
        for item in branchList:
            branchval.append(item)
        pyList.append(branchval)
    return pyList

#If we have both heating and cooling data, generate a list for total thermal energy and the thermal energy balance.
heatingPyList = None
if dataTypeList[2] == True and dataTypeList[3] == True and idealAirTrigger == True:
    coolingPyList = createPyList(cooling)
    heatingPyList = createPyList(heating)
    if len(coolingPyList) == len(heatingPyList):
        if len(coolingPyList) &gt; 0 and len(heatingPyList) &gt; 0:
            for listCount, list in enumerate(coolingPyList):
                makeHeader(totalThermalLoad, listCount, list[2].split(' for')[-1], list[4].split('(')[-1].split(')')[0], "Total Thermal Load", energyUnit, True)
                for numCount, num in enumerate(list[7:]):
                    totalThermalLoad.Add((num + heatingPyList[listCount][7:][numCount]), GH_Path(listCount))
                dataTypeList[0] = True
                
                makeHeader(thermalLoadBalance, listCount, list[2].split(' for')[-1], list[4].split('(')[-1].split(')')[0], "Thermal Load Balance", energyUnit, True)
                for numCount, num in enumerate(list[7:]):
                    thermalLoadBalance.Add((heatingPyList[listCount][7:][numCount] - num), GH_Path(listCount))
                dataTypeList[1] = True
            
            #If we have the cooling/heating coil energy and the heat energy added/removed from the zone, compute the portion of the energy balance that the outdoor air is responsible for.
            heatCoolTracker = 0
            if zoneHeatingEnergy != testTracker and zoneCoolingEnergy != testTracker:
                for listCount, list in enumerate(zoneHeatingEnergy):
                    try:
                        makeHeader(mechVentilationEnergy, listCount, list[0], list[1], "Mechanical Ventilation Energy", energyUnit, True)
                        for numCount, num in enumerate(list[2:]):
                            mechVentilationEnergy.Add((num/3600000) - (zoneCoolingEnergy[listCount][2:][numCount]/3600000) - heatingPyList[heatCoolTracker][7:][numCount] + coolingPyList[heatCoolTracker][7:][numCount], GH_Path(listCount))
                        heatCoolTracker += 1
                    except: pass
                dataTypeList[11] = True

# If we have information on gains through the air, group them all into a total air gains list.
if internalAirGain != testTracker and surfaceAirGain != testTracker:
    for listCount, list in enumerate(internalAirGain):
        makeHeader(airHeatGainRate, listCount, list[0], list[1], "Air Heat Gain Rate", "W", False)
        if systemAirGain == testTracker:
            for numCount, num in enumerate(list[2:]):
                airHeatGainRate.Add((num + surfaceAirGain[listCount][2:][numCount]), GH_Path(listCount))
        else:
            for numCount, num in enumerate(list[2:]):
                airHeatGainRate.Add((num + surfaceAirGain[listCount][2:][numCount] + systemAirGain[listCount][2:][numCount]), GH_Path(listCount))
        
        dataTypeList[18] = True

#If we have information on volumetric flow for infiltration, natural ventilation, and/or eartht tube flow, add them together.
if infiltrationFlow != testTracker:
    #Check if there is natural ventilation.
    natVentThere = []
    for natVentList in natVentFlow:
        if len(natVentList) != 0: natVentThere.append(1)
        else: natVentThere.append(0)
    
    #Check if there is mechanical veniltation.
    mechSysThere = []
    for mechList in mechSysAirFlow:
        if len(mechList) != 0: mechSysThere.append(1)
        else: mechSysThere.append(0)
    
    #Check if there are earth tubes.
    earthTubeThere = []
    for earthList in earthTubeFlow:
        if len(earthList) != 0: earthTubeThere.append(1)
        else: earthTubeThere.append(0)
    
    #Add everything together.
    for listCount, list in enumerate(infiltrationFlow):
        makeHeader(airFlowVolume, listCount, list[0], list[1], "Air Flow Volume", "m3/s", False)
        for numCount, num in enumerate(list[2:]):
            if earthTubeThere[listCount] == 1 and mechSysThere[listCount] == 1 and natVentThere[listCount] == 1: airFlowVolume.Add((num + natVentFlow[listCount][2:][numCount] + mechSysAirFlow[listCount][2:][numCount] + earthTubeFlow[listCount][2:][numCount]), GH_Path(listCount))
            elif earthTubeThere[listCount] == 1 and mechSysThere[listCount] == 0 and natVentThere[listCount] == 1: airFlowVolume.Add((num + natVentFlow[listCount][2:][numCount]+ earthTubeFlow[listCount][2:][numCount]), GH_Path(listCount))
            elif earthTubeThere[listCount] == 0 and mechSysThere[listCount] == 1 and natVentThere[listCount] == 1: airFlowVolume.Add((num + natVentFlow[listCount][2:][numCount]+ mechSysAirFlow[listCount][2:][numCount]), GH_Path(listCount))
            elif earthTubeThere[listCount] == 1 and mechSysThere[listCount] == 1 and natVentThere[listCount] == 0: airFlowVolume.Add((num + mechSysAirFlow[listCount][2:][numCount] + earthTubeFlow[listCount][2:][numCount]), GH_Path(listCount))
            elif earthTubeThere[listCount] == 0 and mechSysThere[listCount] == 1 and natVentThere[listCount] == 0: airFlowVolume.Add((num + mechSysAirFlow[listCount][2:][numCount]), GH_Path(listCount))
            elif earthTubeThere[listCount] == 1 and mechSysThere[listCount] == 0 and natVentThere[listCount] == 0: airFlowVolume.Add((num + earthTubeFlow[listCount][2:][numCount]), GH_Path(listCount))
            elif earthTubeThere[listCount] == 0 and mechSysThere[listCount] == 0 and natVentThere[listCount] == 1: airFlowVolume.Add((num + natVentFlow[listCount][2:][numCount]), GH_Path(listCount))
            else: airFlowVolume.Add(num, GH_Path(listCount))
        dataTypeList[17] = True


#If some of the component outputs are not in the result csv file, blot the variable out of the component.
outputsDict = {
     
0: ["totalThermalLoad", "The total thermal energy used by each zone in kWh.  This includes cooling and heating."],
1: ["thermalLoadBalance", "The thermal energy used by each zone in kWh.  Heating values are positive while cooling values are negative. This is useful for computing balance points."],
2: ["cooling", "The cooling energy needed in kWh. For Ideal Air loads, this output is the sum of sensible and latent heat that must be removed from each zone.  For detailed HVAC systems (other than ideal air), this output will be electric energy needed to power each chiller/cooling coil."],
3: ["heating", "The heating energy needed in kWh. For Ideal Air loads, this is the heat that must be added to each zone.  For detailed HVAC systems (other than ideal air), this will be fuel energy or electric energy needed for each boiler/heating element."],
4: ["electricLight", "The electric lighting energy needed for each zone in kWh."],
5: ["electricEquip", "The electric equipment energy needed for each zone in kWh."],
6: ["fanElectric", "The fan electric energy in kWh for either a natural ventilation fan or a heating or cooling system fan.  This ouput will not appear when there is no fan in the model."],
7: ["pumpElectric", "The water pump electric energy in kWh for a heating or cooling system.  This ouput will not appear when there is no water pump in the model."],
8: ["peopleGains", "The internal heat gains in each zone resulting from people (kWh)."],
9: ["totalSolarGain", "The total solar gain in each zone(kWh)."],
10: ["infiltrationEnergy", "The heat loss (negative) or heat gain (positive) in each zone resulting from infiltration (kWh)."],
11: ["mechVentilationEnergy", "The heat loss (negative) or heat gain (positive) in each zone resulting from the outdoor air coming through the HVAC System (kWh)."],
12: ["natVentEnergy", "The heat loss (negative) or heat gain (positive) in each zone resulting from natural ventilation (kWh)."],
13: ["operativeTemperature", "The mean operative temperature of each zone (degrees Celcius)."],
14: ["airTemperature", "The mean air temperature of each zone (degrees Celcius)."],
15: ["meanRadTemperature", "The mean radiant temperature of each zone (degrees Celcius)."],
16: ["relativeHumidity", "The relative humidity of each zone (%)."],
17: ["airFlowVolume", "The total volume of air flowing into the room through both the windows and infiltration (m3/s).  This is voulme of air is at standard density (20 C and adjusted for the elevation above sea level of the weather file)."],
18: ["airHeatGainRate", "The total heat transfer rate to the air from lighting, equipment(appliances/pulg loads), people, the surfaces of the zone, and gains through the heating system.  This output is useful for the estimation of air stratification in the Comfort Analysis workflow."],
19: ["otherZoneData", "Other zone data that is in the result file (in no particular order). Note that this data cannot be normalized by floor area as the component does not know if it can be normalized."]
}

if _resultFileAddress and parseSuccess == True:
    for output in range(20):
        if dataTypeList[output] == False:
            ghenv.Component.Params.Output[output].NickName = "."
            ghenv.Component.Params.Output[output].Name = "."
            ghenv.Component.Params.Output[output].Description = " "
        else:
            ghenv.Component.Params.Output[output].NickName = outputsDict[output][0]
            ghenv.Component.Params.Output[output].Name = outputsDict[output][0]
            ghenv.Component.Params.Output[output].Description = outputsDict[output][1]
else:
    for output in range(20):
        ghenv.Component.Params.Output[output].NickName = outputsDict[output][0]
        ghenv.Component.Params.Output[output].Name = outputsDict[output][0]
        ghenv.Component.Params.Output[output].Description = outputsDict[output][1]
</item>
                    <item name="Description" type_name="gh_string" type_code="10">This component reads the results of an EnergyPlus simulation from the WriteIDF Component or any EnergyPlus result .csv file address.  Note that, if you use this component without the WriteIDF component, you should make sure that a corresponding .eio file is next to your .csv file at the input address that you specify.
_
This component reads only the results related to zones.  For results related to surfaces, you should use the "Honeybee_Read EP Surface Result" component.
-
Provided by Honeybee 0.0.62</item>
                    <item name="EditorLocation" type_name="gh_drawing_point" type_code="30">
                      <X>290</X>
                      <Y>161</Y>
                    </item>
                    <item name="EditorSize" type_name="gh_drawing_size" type_code="32">
                      <W>1246</W>
                      <H>932</H>
                    </item>
                    <item name="Hidden" type_name="gh_bool" type_code="1">true</item>
                    <item name="HideInput" type_name="gh_bool" type_code="1">true</item>
                    <item name="HideOutput" type_name="gh_bool" type_code="1">true</item>
                    <item name="IconOverride" type_name="gh_drawing_bitmap" type_code="37">
                      <bitmap length="1480">iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOwAAADsABataJCQAABWpJREFUSEvdlW1QVFUYxzfKDFEBAXfZXVj27d69d/feXS7LssAiixAgOCi+gIARECgvWmI0Gk1RozgaItOkIw2+0UwZmjOiMKVSOdlk2YxjDX2wydQmLRUR0NEQ5N+5dy8k2Yf60od+M8/cc5/nnP9zznOeu6v4z+jt7X1y08LYkLgw/0X8TL98IXhKXoUQYYye5b/IHOxXcFalrh7TUjXXtMaafrWx5n4UvbJhyRKXMiI0PzrAL9+jmpm5Ip6yRAdPyffydAaAx2RpH06aao+tbbrOl6yHbWEZuKWViGnce5tbthqmJZVYbnfiXngEEGkhRgMRNL42MXAsKIYhrwZ2so5taLvLLV4B+5xMJAuOKlnah0Ud/g3X0gO2ZwTs0Vtgu26BOdIvPa3H7kG94wtksjx+mR2OYa0ZN7QmjIVpcPrpAvBH+6A7Pgym8ybYzwD+pR1wKIOaZWkfVp3mFLf1IyJKJh24DPOhq1B3D0LTPQANSaIlC6e39yI+NgnfqyNxhyToI4nGAkNxOjEbXMdF6Dr7wHYPgX++CWyQ/5uytI+5pWs38PsvgCHCorhnz7dYs24PVr3cLts+rN54GMXPvYFtkXoMao3on0gSgq8SsnxJPhmFvaoRbOBTb8nSPniTqYdrOUGO2SftuHzDQSBgOkaDZ2NkltJn4lgZidsRZiJswk3ZpCRBJAk5ScIHP5G7ODmaOXfuUlnaB6VRfclt6ZJKpD3aj5LGQxgJVWNIbcSgxjTJBoiNi49bP0mCaTOwaVUT9A2vj7kpwxpZ2ofNpP+U23ZcOoGYoLjxQwyFKnFNHYXfNPo/TavHxUgTbkQ8LG4CNEa0hgTB/Go7bHXbwQRNbZGlfaSWrdk4fgc0OUX05k4k66OQRFmQRDOSeWgWLC9gs5mWLlkUnhAPC4GGtCrVcx/8qi1gg/+SwKrTfc41HwNDWpQ59CvojsvQ7zoLw+5zMOz5DnpigR2XsLqyEUOqCFIm3yWL4jtVs6EpewUU6SALMbbh1Gh2ZmauLO2D1SrP8ls/Jm02COa9H8C8f0Eas4evgznwM8KP9GFd/V6MhOtwJ1yPAUnchJ0aDbTLXwTdeQPWrgGpxOJ34DJFNcjSPpyUocFVUHPGmbfiEsuyo6K5qxrOCQufuaIn42d1upEHpP53yT0M6igMk056x0RBTfw0iet0KSPuupbTnGve77yNv+kRhPmy9GQaAhVBhR7OIBoUiifWqxUhJXMc5jqK2rfAYECmwYgs8swym8HFOltTCwulucv5SL24Pt+ujFpbMD9UEvtXBAQoFWFhKsW0aSrF1Kl6hdnKyJF/Rm1trX9VRUVyUUHBBq/Hmyi7J3ihujouMy2tNSc7u6mtrU0puyWqy8sd5FJb01NT95eWlv59abIyMkpSkubA6YiGxWwult0Subm5gjvWBcFqvchx3FWXIJxvrm32F2Piz7LH5foxxhF9TeC4M+L69JQUu7TwYdxu9ywyIckcGXndZDCUym4Jr8cTJ9jt74rjVK+3iGNYVFRUhEtBQnJCgnPZ4mVx89LTC1mKehAXE+OVQ49i1BuuUkZjufw6CW+SN4NnrXBGR+/66x9KvDP2bc7CgCQfrKurU8nuRzHoDVcoisqTXyfwJiat5MOsw/GxcZtk1yPU19drWIYdcAnOyd+ASFpyspvUfrcpSg+jTnfGYeNfI7v0E2NJ8Yk1NrI7Hel5U5Rhu8DbD5aVlc0QYzk5OWqB5086bLaNNgvbKJYvwe2uFGOTSPOmpdqt1h6Wpg9YabrbZRd2jicgC4o4lu0gGzhIG6kTRKSrYL6v14uKimY6BaHdzjAXHFbr+QSXW9zY42Ls/4BC8Qe+Gp74aMCvNQAAAABJRU5ErkJggg==</bitmap>
                    </item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">600c07a7-e713-4dc4-be3d-5cd52a79b38d</item>
                    <item name="Name" type_name="gh_string" type_code="10">Honeybee_Read EP Result</item>
                    <item name="NickName" type_name="gh_string" type_code="10">readEPResult</item>
                  </items>
                  <chunks count="2">
                    <chunk name="Attributes">
                      <items count="2">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>3530</X>
                          <Y>1040</Y>
                          <W>246</W>
                          <H>404</H>
                        </item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>3641</X>
                          <Y>1242</Y>
                        </item>
                      </items>
                    </chunk>
                    <chunk name="ParameterData">
                      <items count="23">
                        <item name="InputCount" type_name="gh_int32" type_code="3">1</item>
                        <item name="InputId" index="0" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="OutputCount" type_name="gh_int32" type_code="3">20</item>
                        <item name="OutputId" index="0" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                        <item name="OutputId" index="1" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                        <item name="OutputId" index="2" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                        <item name="OutputId" index="3" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                        <item name="OutputId" index="4" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                        <item name="OutputId" index="5" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                        <item name="OutputId" index="6" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                        <item name="OutputId" index="7" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                        <item name="OutputId" index="8" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                        <item name="OutputId" index="9" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                        <item name="OutputId" index="10" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                        <item name="OutputId" index="11" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                        <item name="OutputId" index="12" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                        <item name="OutputId" index="13" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                        <item name="OutputId" index="14" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                        <item name="OutputId" index="15" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                        <item name="OutputId" index="16" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                        <item name="OutputId" index="17" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                        <item name="OutputId" index="18" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                        <item name="OutputId" index="19" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                      </items>
                      <chunks count="21">
                        <chunk name="InputParam" index="0">
                          <items count="11">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">The result file address that comes out of the WriteIDF component.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">66e57725-5970-43e8-903d-327733821ee8</item>
                            <item name="Name" type_name="gh_string" type_code="10">_resultFileAddress</item>
                            <item name="NickName" type_name="gh_string" type_code="10">_resultFileAddress</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="Source" index="0" type_name="gh_guid" type_code="9">bf880545-de40-453c-9c3f-b2e317504dbd</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">87f87f55-5b71-41f4-8aea-21d494016f81</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>3532</X>
                                  <Y>1042</Y>
                                  <W>94</W>
                                  <H>400</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>3580.5</X>
                                  <Y>1242</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="0">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10"> </item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">0dcaf6ae-a357-4841-877f-56ca7ce613db</item>
                            <item name="Name" type_name="gh_string" type_code="10">.</item>
                            <item name="NickName" type_name="gh_string" type_code="10">.</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>3656</X>
                                  <Y>1042</Y>
                                  <W>118</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>3715</X>
                                  <Y>1052</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="1">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10"> </item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">81ec02b9-0256-416e-9969-00d3f59084b1</item>
                            <item name="Name" type_name="gh_string" type_code="10">.</item>
                            <item name="NickName" type_name="gh_string" type_code="10">.</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>3656</X>
                                  <Y>1062</Y>
                                  <W>118</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>3715</X>
                                  <Y>1072</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="2">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10"> </item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">cdc3db85-fd6e-4223-8452-8f1236c1114d</item>
                            <item name="Name" type_name="gh_string" type_code="10">.</item>
                            <item name="NickName" type_name="gh_string" type_code="10">.</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>3656</X>
                                  <Y>1082</Y>
                                  <W>118</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>3715</X>
                                  <Y>1092</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="3">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10"> </item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">9867e3c7-3c39-4fa8-8c2a-17b06ec8e40b</item>
                            <item name="Name" type_name="gh_string" type_code="10">.</item>
                            <item name="NickName" type_name="gh_string" type_code="10">.</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>3656</X>
                                  <Y>1102</Y>
                                  <W>118</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>3715</X>
                                  <Y>1112</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="4">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10"> </item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">766f21f8-d6ef-4994-8764-a122d26a7431</item>
                            <item name="Name" type_name="gh_string" type_code="10">.</item>
                            <item name="NickName" type_name="gh_string" type_code="10">.</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>3656</X>
                                  <Y>1122</Y>
                                  <W>118</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>3715</X>
                                  <Y>1132</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="5">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10"> </item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">bbffbb66-58c4-42c8-afdb-be0c813932f7</item>
                            <item name="Name" type_name="gh_string" type_code="10">.</item>
                            <item name="NickName" type_name="gh_string" type_code="10">.</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>3656</X>
                                  <Y>1142</Y>
                                  <W>118</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>3715</X>
                                  <Y>1152</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="6">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10"> </item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">8bd21242-2beb-41ec-84a1-e1d81baaebff</item>
                            <item name="Name" type_name="gh_string" type_code="10">.</item>
                            <item name="NickName" type_name="gh_string" type_code="10">.</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>3656</X>
                                  <Y>1162</Y>
                                  <W>118</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>3715</X>
                                  <Y>1172</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="7">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10"> </item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">007f2936-ee3a-44c5-a346-bd94c1cc9b3a</item>
                            <item name="Name" type_name="gh_string" type_code="10">.</item>
                            <item name="NickName" type_name="gh_string" type_code="10">.</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>3656</X>
                                  <Y>1182</Y>
                                  <W>118</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>3715</X>
                                  <Y>1192</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="8">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10"> </item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">f7540f3d-a8a7-4dc8-b2cf-66b47675bf65</item>
                            <item name="Name" type_name="gh_string" type_code="10">.</item>
                            <item name="NickName" type_name="gh_string" type_code="10">.</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>3656</X>
                                  <Y>1202</Y>
                                  <W>118</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>3715</X>
                                  <Y>1212</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="9">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10"> </item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">b58d41d2-72a1-43c9-9819-b189fc797120</item>
                            <item name="Name" type_name="gh_string" type_code="10">.</item>
                            <item name="NickName" type_name="gh_string" type_code="10">.</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>3656</X>
                                  <Y>1222</Y>
                                  <W>118</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>3715</X>
                                  <Y>1232</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="10">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10"> </item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">2e429a99-898c-4d0b-9862-644a174a99dc</item>
                            <item name="Name" type_name="gh_string" type_code="10">.</item>
                            <item name="NickName" type_name="gh_string" type_code="10">.</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>3656</X>
                                  <Y>1242</Y>
                                  <W>118</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>3715</X>
                                  <Y>1252</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="11">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10"> </item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">229723b8-2a19-492b-8b64-cfcc95e1462d</item>
                            <item name="Name" type_name="gh_string" type_code="10">.</item>
                            <item name="NickName" type_name="gh_string" type_code="10">.</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>3656</X>
                                  <Y>1262</Y>
                                  <W>118</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>3715</X>
                                  <Y>1272</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="12">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10"> </item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">b6400c29-67b8-4fb2-ba47-5c7d4515cc11</item>
                            <item name="Name" type_name="gh_string" type_code="10">.</item>
                            <item name="NickName" type_name="gh_string" type_code="10">.</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>3656</X>
                                  <Y>1282</Y>
                                  <W>118</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>3715</X>
                                  <Y>1292</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="13">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10">The mean operative temperature of each zone (degrees Celcius).</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">9af57264-3833-4add-99d1-d39160613790</item>
                            <item name="Name" type_name="gh_string" type_code="10">operativeTemperature</item>
                            <item name="NickName" type_name="gh_string" type_code="10">operativeTemperature</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>3656</X>
                                  <Y>1302</Y>
                                  <W>118</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>3715</X>
                                  <Y>1312</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="14">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10">The mean air temperature of each zone (degrees Celcius).</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">61eca3c9-11fa-45ec-a9ef-27756dc3919d</item>
                            <item name="Name" type_name="gh_string" type_code="10">airTemperature</item>
                            <item name="NickName" type_name="gh_string" type_code="10">airTemperature</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>3656</X>
                                  <Y>1322</Y>
                                  <W>118</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>3715</X>
                                  <Y>1332</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="15">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10">The mean radiant temperature of each zone (degrees Celcius).</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">07527f51-a56c-48d2-8147-1a5f15cfafce</item>
                            <item name="Name" type_name="gh_string" type_code="10">meanRadTemperature</item>
                            <item name="NickName" type_name="gh_string" type_code="10">meanRadTemperature</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>3656</X>
                                  <Y>1342</Y>
                                  <W>118</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>3715</X>
                                  <Y>1352</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="16">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10">The relative humidity of each zone (%).</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">59c1877e-f4f6-4654-8e92-90b07c69c233</item>
                            <item name="Name" type_name="gh_string" type_code="10">relativeHumidity</item>
                            <item name="NickName" type_name="gh_string" type_code="10">relativeHumidity</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>3656</X>
                                  <Y>1362</Y>
                                  <W>118</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>3715</X>
                                  <Y>1372</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="17">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10"> </item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">83242732-ba82-4571-9a60-4911cf7ba386</item>
                            <item name="Name" type_name="gh_string" type_code="10">.</item>
                            <item name="NickName" type_name="gh_string" type_code="10">.</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>3656</X>
                                  <Y>1382</Y>
                                  <W>118</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>3715</X>
                                  <Y>1392</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="18">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10"> </item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">22f84e1b-2f50-4f32-8fa4-87ce985e8067</item>
                            <item name="Name" type_name="gh_string" type_code="10">.</item>
                            <item name="NickName" type_name="gh_string" type_code="10">.</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>3656</X>
                                  <Y>1402</Y>
                                  <W>118</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>3715</X>
                                  <Y>1412</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="19">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10"> </item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">e9bf2cc5-6636-4ab9-9c9d-6da2f03ea204</item>
                            <item name="Name" type_name="gh_string" type_code="10">.</item>
                            <item name="NickName" type_name="gh_string" type_code="10">.</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>3656</X>
                                  <Y>1422</Y>
                                  <W>118</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>3715</X>
                                  <Y>1432</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                      </chunks>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="9">
              <items count="3">
                <item name="GUID" type_name="gh_guid" type_code="9">410755b1-224a-4c1e-a407-bf32fb45ea7e</item>
                <item name="Lib" type_name="gh_guid" type_code="9">16cf80bc-9018-cbdb-2238-976eb17fd30d</item>
                <item name="Name" type_name="gh_string" type_code="10">Honeybee_Generate EP Output</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="11">
                    <item name="CodeInput" type_name="gh_string" type_code="10">#
# Honeybee: A Plugin for Environmental Analysis (GPL) started by Mostapha Sadeghipour Roudsari
# 
# This file is part of Honeybee.
# 
# Copyright (c) 2013-2017, Mostapha Sadeghipour Roudsari and Chris Mackey &lt;mostapha@ladybug.tools and chris@mackeyarchitecture.com&gt; 
# Honeybee is free software; you can redistribute it and/or modify 
# it under the terms of the GNU General Public License as published 
# by the Free Software Foundation; either version 3 of the License, 
# or (at your option) any later version. 
# 
# Honeybee is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of 
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Honeybee; If not, see &lt;http://www.gnu.org/licenses/&gt;.
# 
# @license GPL-3.0+ &lt;http://spdx.org/licenses/GPL-3.0+&gt;


"""
This component helps select simulation outputs that can be hooked into the "Honyebee_Export to OpenStudio" component.  Outputs are taken from here:
http://bigladdersoftware.com/epx/docs/8-3/input-output-reference/
_
You can also use the "Honeybee_Read Result Dictionary" component after running a simulation to get a list of all possible outputs that you can request from a given simulation.
-
Provided by Honeybee 0.0.62
    
    Args:
        zoneEnergyUse_: Set to "True" to have EnergyPlus solve for basic building energy use such as heating, cooling, electricity for lights and electricity for plug loads for each zone.
        zoneGainsAndLosses_: Set to "True" to have EnergyPlus solve for building gains and losses such as people gains, solar gains and infiltration losses/gains.
        zoneComfortMetrics_: Set to "True" to have EnergyPlus solve for the mean air temperature, mean radiant temperature, operative temperature, and relative humidity of each zone.
        comfortMapVariables_: Set to "True" to have EnergyPlus solve for the air flow and air heat gain of each zone, which is needed for the comfort map air stratification calculation.
        zoneHVACParams_: Set to "True" to have EnergyPlus solve for the fractions of heating/cooling loads that are latent vs. sensible as well as the the flow rate and temperature of supply air into each zone.
        surfaceTempAnalysis_: Set to "True" to have EnergyPlus solve for the interior and exterior surface temperatures of the individual surfaces of each zone.
        surfaceEnergyAnalysis_: Set to "True" to have EnergyPlus solve for the gains and losses through the individual surfaces of each zone.
        glazingSolarAnalysis_: Set to "True" to have EnergyPlus solve for the transmitted beam, diffuse, and total solar gain through the individual window surfaces of each zone.  These outputs are needed for Energy Shade Benefit Analysis.
        _loadType_: An integer or text value to set the type of load outputs requested (sensible, latent, total).  The default is set to "0 = Total" but you may want to change this to "1 = Sensible" for zone HVAC sizing, etc.  Choose from the following options:
            0 = Total
            1 = Sensible
            2 = Latent
        timestep_: Specify a timestep by inputing the words 'hourly', 'daily', 'monthly' or 'annual'.  The default is set to hourly.
    Returns:
        report: Report!
        simulationOutputs: EnergyPlus code that should be plugged into the "simulationOutputs" parameter of the "Honeybee_Export to OpenStudio" component.
"""

ghenv.Component.Name = "Honeybee_Generate EP Output"
ghenv.Component.NickName = 'EPOutput'
ghenv.Component.Message = 'VER 0.0.62\nJUL_28_2017'
ghenv.Component.IconDisplayMode = ghenv.Component.IconDisplayMode.application
ghenv.Component.Category = "Honeybee"
ghenv.Component.SubCategory = "10 | Energy | Energy"
#compatibleHBVersion = VER 0.0.56\nFEB_01_2015
#compatibleLBVersion = VER 0.0.59\nFEB_01_2015
ghenv.Component.AdditionalHelpFromDocStrings = "3"

import Grasshopper.Kernel as gh


# A list of the Energy Plus simulation outputs for HB generators.
#HBgeneratorsimoutputs = ["Output:Variable,*,Facility Total Electric Demand Power, Hourly;","Output:Variable,*,Facility Net Purchased Electric Power, Hourly;"]



def main(zoneEnergyUse, zoneGainsAndLosses, zoneComfortMetrics, zoneHVACMetrics, surfaceTempAnalysis, surfaceEnergyAnalysis, glazingSolarAnalysis, loadType, timestep):
    loadTypeDict = {
    '0': 0,
    '1': 1,
    '2': 2,
    'total': 0,
    'sensible': 1,
    'latent': 2
    }
    
    timePeriod = timestep + ";"
    if loadType == None:
        loadType = 0
    else:
        try:
            loadType = loadTypeDict[loadType.lower()]
        except:
            warning = '_loadType_ is not valid.'
            print warning
            ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warning)
    simulationOutputs = []
    simulationOutputs.append("OutputControl:Table:Style,Comma;")
    
    if zoneEnergyUse == True:
        if loadType == 0:
            simulationOutputs.append("Output:Variable,*,Zone Ideal Loads Supply Air Total Cooling Energy, " + timePeriod)
            simulationOutputs.append("Output:Variable,*,Zone Ideal Loads Supply Air Total Heating Energy, " + timePeriod)
        elif loadType == 1:
            simulationOutputs.append("Output:Variable,*,Zone Ideal Loads Supply Air Sensible Cooling Energy, " + timePeriod)
            simulationOutputs.append("Output:Variable,*,Zone Ideal Loads Supply Air Sensible Heating Energy, " + timePeriod)
        elif loadType == 2:
            simulationOutputs.append("Output:Variable,*,Zone Ideal Loads Supply Air Latent Cooling Energy, " + timePeriod)
            simulationOutputs.append("Output:Variable,*,Zone Ideal Loads Supply Air Latent Heating Energy, " + timePeriod)
        
        simulationOutputs.append("Output:Variable,*,Cooling Coil Electric Energy, " + timePeriod)
        simulationOutputs.append("Output:Variable,*,Chiller Electric Energy, " + timePeriod)
        simulationOutputs.append("Output:Variable,*,Boiler Heating Energy, " + timePeriod)
        simulationOutputs.append("Output:Variable,*,Heating Coil Total Heating Energy, " + timePeriod)
        simulationOutputs.append("Output:Variable,*,Heating Coil Gas Energy, " + timePeriod)
        simulationOutputs.append("Output:Variable,*,Heating Coil Electric Energy, " + timePeriod)
        simulationOutputs.append("Output:Variable,*,Humidifier Electric Energy, " + timePeriod)
        simulationOutputs.append("Output:Variable,*,Fan Electric Energy, " + timePeriod)
        simulationOutputs.append("Output:Variable,*,Zone Ventilation Fan Electric Energy, " + timePeriod)
        simulationOutputs.append("Output:Variable,*,Zone Lights Electric Energy, " + timePeriod)
        simulationOutputs.append("Output:Variable,*,Zone Electric Equipment Electric Energy, " + timePeriod)
        simulationOutputs.append("Output:Variable,*,Earth Tube Fan Electric Energy, "+ timePeriod)
        simulationOutputs.append("Output:Variable,*,Pump Electric Energy, "+ timePeriod)
        simulationOutputs.append("Output:Variable,*,Zone VRF Air Terminal Cooling Electric Energy, "+ timePeriod)
        simulationOutputs.append("Output:Variable,*,Zone VRF Air Terminal Heating Electric Energy, "+ timePeriod)
        simulationOutputs.append("Output:Variable,*,VRF Heat Pump Cooling Electric Energy, "+ timePeriod)
        simulationOutputs.append("Output:Variable,*,VRF Heat Pump Heating Electric Energy, "+ timePeriod)
    
    if zoneGainsAndLosses == True:
        simulationOutputs.append("Output:Variable,*,Zone Windows Total Transmitted Solar Radiation Energy, " + timePeriod)
        simulationOutputs.append("Output:Variable,*,Zone Ventilation Sensible Heat Loss Energy, " + timePeriod)
        simulationOutputs.append("Output:Variable,*,Zone Ventilation Sensible Heat Gain Energy, " + timePeriod)
        if loadType == 0:
            simulationOutputs.append("Output:Variable,*,Zone People Total Heating Energy, " + timePeriod)
            simulationOutputs.append("Output:Variable,*,Zone Ideal Loads Zone Total Heating Energy, " + timePeriod)
            simulationOutputs.append("Output:Variable,*,Zone Ideal Loads Zone Total Cooling Energy, " + timePeriod)
            simulationOutputs.append("Output:Variable,*,Zone Infiltration Total Heat Loss Energy, " + timePeriod)
            simulationOutputs.append("Output:Variable,*,Zone Infiltration Total Heat Gain Energy, " + timePeriod)
        elif loadType == 1:
            simulationOutputs.append("Output:Variable,*,Zone People Sensible Heating Energy, " + timePeriod)
            simulationOutputs.append("Output:Variable,*,Zone Ideal Loads Zone Sensible Heating Energy, " + timePeriod)
            simulationOutputs.append("Output:Variable,*,Zone Ideal Loads Zone Sensible Cooling Energy, " + timePeriod)
            simulationOutputs.append("Output:Variable,*,Zone Infiltration Sensible Heat Loss Energy, " + timePeriod)
            simulationOutputs.append("Output:Variable,*,Zone Infiltration Sensible Heat Gain Energy, " + timePeriod)
        elif loadType == 2:
            simulationOutputs.append("Output:Variable,*,Zone People Latent Gain Energy, " + timePeriod)
            simulationOutputs.append("Output:Variable,*,Zone Ideal Loads Zone Latent Heating Energy, " + timePeriod)
            simulationOutputs.append("Output:Variable,*,Zone Ideal Loads Zone Latent Cooling Energy, " + timePeriod)
            simulationOutputs.append("Output:Variable,*,Zone Infiltration Latent Heat Loss Energy, " + timePeriod)
            simulationOutputs.append("Output:Variable,*,Zone Infiltration Latent Heat Gain Energy, " + timePeriod)
    
    if zoneComfortMetrics == True:
        simulationOutputs.append("Output:Variable,*,Zone Operative Temperature, " + timePeriod)
        simulationOutputs.append("Output:Variable,*,Zone Mean Air Temperature, " + timePeriod)
        simulationOutputs.append("Output:Variable,*,Zone Mean Radiant Temperature, " + timePeriod)
        simulationOutputs.append("Output:Variable,*,Zone Air Relative Humidity, " + timePeriod)
    
    if comfortMapVariables_ == True:
        simulationOutputs.append("Output:Variable,*,Zone Ventilation Standard Density Volume Flow Rate, " + timePeriod)
        simulationOutputs.append("Output:Variable,*,Zone Infiltration Standard Density Volume Flow Rate, " + timePeriod)
        simulationOutputs.append("Output:Variable,*,Zone Mechanical Ventilation Standard Density Volume Flow Rate, " + timePeriod)
        simulationOutputs.append("Output:Variable,*,Zone Air Heat Balance Internal Convective Heat Gain Rate, " + timePeriod)
        simulationOutputs.append("Output:Variable,*,Zone Air Heat Balance Surface Convection Rate, " + timePeriod)
        simulationOutputs.append("Output:Variable,*,Zone Air Heat Balance System Air Transfer Rate, " + timePeriod)
        simulationOutputs.append("Output:Variable,*,Surface Window System Solar Transmittance, " + timePeriod)
    
    if zoneHVACMetrics == True:
        simulationOutputs.append("Output:Variable,*,System Node Standard Density Volume Flow Rate, " + timePeriod)
        simulationOutputs.append("Output:Variable,*,System Node Temperature, " + timePeriod)
        simulationOutputs.append("Output:Variable,*,System Node Relative Humidity, " + timePeriod)
        simulationOutputs.append("Output:Variable,*,Zone Cooling Setpoint Not Met Time, "+ timePeriod)
        simulationOutputs.append("Output:Variable,*,Zone Heating Setpoint Not Met Time, "+ timePeriod)
    
    if surfaceTempAnalysis == True:
        simulationOutputs.append("Output:Variable,*,Surface Outside Face Temperature, " + timePeriod)
        simulationOutputs.append("Output:Variable,*,Surface Inside Face Temperature, " + timePeriod)
    
    if surfaceEnergyAnalysis == True:
        simulationOutputs.append("Output:Variable,*,Surface Average Face Conduction Heat Transfer Energy, " + timePeriod)
        simulationOutputs.append("Output:Variable,*,Surface Window Heat Loss Energy, " + timePeriod)
        simulationOutputs.append("Output:Variable,*,Surface Window Heat Gain Energy, " + timePeriod)
    
    if glazingSolarAnalysis_ == True:
        simulationOutputs.append("Output:Variable,*,Surface Window Transmitted Beam Solar Radiation Energy, " + timePeriod)
        simulationOutputs.append("Output:Variable,*,Surface Window Transmitted Diffuse Solar Radiation Energy, " + timePeriod)
        simulationOutputs.append("Output:Variable,*,Surface Window Transmitted Solar Radiation Energy, " + timePeriod)
    
    return simulationOutputs



#Check the inputs to be sure that the right data types are selected.
initCheck = True
try:
    if timestep_.lower() == "monthly" or timestep_.lower() == "hourly" or timestep_.lower() == "daily" or timestep_.lower() == "annual" or timestep_.lower() == "timestep": pass
except:
    if timestep_ == None: timestep_ = "hourly"
    else:
        initCheck =False
        print "Incorrect value connected for timestep_.  Allowable inputs include monthly, hourly, daily or annual."
        ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, "Incorrect value connected for timestep_.  Allowable inputs include monthly, hourly, daily or annual.")


#Generate the simulation outputs if the above checks are sucessful.
if initCheck == True:
    simulationOutputs = main(zoneEnergyUse_, zoneGainsAndLosses_, zoneComfortMetrics_, zoneHVACParams_, surfaceTempAnalysis_, surfaceEnergyAnalysis_, glazingSolarAnalysis_, _loadType_, timestep_)
    print "Simulation outputs generated successfully!"</item>
                    <item name="Description" type_name="gh_string" type_code="10">This component helps select simulation outputs that can be hooked into the "Honyebee_Export to OpenStudio" component.  Outputs are taken from here:
http://bigladdersoftware.com/epx/docs/8-3/input-output-reference/
_
You can also use the "Honeybee_Read Result Dictionary" component after running a simulation to get a list of all possible outputs that you can request from a given simulation.
-
Provided by Honeybee 0.0.62</item>
                    <item name="EditorLocation" type_name="gh_drawing_point" type_code="30">
                      <X>1296</X>
                      <Y>65</Y>
                    </item>
                    <item name="EditorSize" type_name="gh_drawing_size" type_code="32">
                      <W>1272</W>
                      <H>953</H>
                    </item>
                    <item name="Hidden" type_name="gh_bool" type_code="1">true</item>
                    <item name="HideInput" type_name="gh_bool" type_code="1">true</item>
                    <item name="HideOutput" type_name="gh_bool" type_code="1">false</item>
                    <item name="IconOverride" type_name="gh_drawing_bitmap" type_code="37">
                      <bitmap length="1275">iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOwAAADsABataJCQAABJ1JREFUSEvdVH1M1HUYf87jCO4OKGBeHOAFRxzEIRGGYy42JluKIBo4NiqPEOic5o1AEAnux7E8EBSMEELQBWZA8aaEhJVkkq0X83XYTLPmys0ikRgS/u7p+fKFMSI17b8+22e/t+f5PC/f5/nB/xpq4mqdnf2mtXLnvBS5Mm+po2OmA4CB3kcQ7ZnRg0BOTM12ca0WvfzrBqSynUUAJWZiOUD5FblL9WlP33p/2UPbyO7JSY/7gFojlZX+qNHtET0ft2QAmKOiooSipiahrK1NyLRahTCVSuidZ18oBoSWG5XOb5PPEu56byj1MlmZqAmssqn9CgIBBENNtYCIs/gLUREaIvSAnVnUhVoT5E67ydeLS9wd6efVvnU2v4UFCSSetKNsjrgoikV03dJ/7ZrpWaXSaHtYvX5U5W1RACRNadwRwcly50pRG2z5TqoQngkKEkZnC1tsNls+cf3IpXPFp4717fN1dz+xAuDbLldV72KJpIM0HuVS/4zlta6qWsre3EDZbzabheGxMeHF+Hjh5TVrirMM67K2roo1xocHHncIXoKQUYtgPYpQdwahfhDBWIng5Y+ks5LLzUV8o7tHLWqDhTIK8FZHh1BcUSF4AlgKAF4tAch3kyouQ1IZwgc2hMuIMEjsI34sIpyh6zfE19pZkH4uORvRO1zm70ZtiFBNAXJpWiaoNdkmU35OcmKOHcBVqP0C4XsSOYooTdyCklcaEE7Rc/swwvu/IhwcQzhHz68fYkFquOwMAhIcleWij774ksxJeFqnE67TgbKedze/0wyplDkTa7uB0Iv4RNQKXO7tjBBv4ZkPEFt/o0C/8yRy97IgiVx6BmkXPHzYORRuoCoic7LZoeZ7xCTdYFlD+02ELuK7Q6iLTUa8eRUPNtYhLHgKIacH4Wuy6f4DoWeCqhlFcHIZJE0tl+aYv8xBXiVq9aW2BQHmtXb2Jo2fqlGato07tw0hdFKAA0MYlpKJKNKcES5+2IZBOj+El2roPG4jfEq2XxJTClkVq7j0DBYZFM57Re3C7TYv/w0bAVqgoh/hGKuAyu+kfu8fwuitO0n61mSAaTRtF3BeEE1Y+QDCebI3tyBIJPSXmYvgMJlDpajWWg/IZJ9AyWGeFQvQNTLZIt/o1aQ/PCU9jXHMXOyDEGNCuEL2WfWsgje55Fw4KwEiaXM6IZsO7KvpCniL9InrECdGpoSpTUc60FvhiGBqQMlJsmUtNdAAABRzuTvDE4zm25Pj9x5NyVSLojaXcGXbOFblbUSnyGRqyRGEs2TXSmfFWrQybZj8l3KZu0Hp1geHSPwjcmIVUItCE1MRfziJi/QBCCEvIHxG304QW2gfjtN1/wXKXrJnSuGeiIO4dN7X7nHaAxsqH/NHv4hlCG+c5cvFArdeRzj8J8JFeo6IY+0J4e7/DhmwiWb+NDmzbC19CE0/8XvWOrYjbNnY0hmsTPw57nZ/sEB4DFVxi28r6/Pn9F9iG86GoPlnBF04E0/n5g8GNbipd0FgBMLzBTQ1LWMQa0TQaCbgEZWFvntzs/8Gd2IuOMirQaMvpft9RPq7gCPxbwD4C9yVs+85g3d4AAAAAElFTkSuQmCC</bitmap>
                    </item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">819fb252-c997-4936-8632-eb1c07ec1cc5</item>
                    <item name="Name" type_name="gh_string" type_code="10">Honeybee_Generate EP Output</item>
                    <item name="NickName" type_name="gh_string" type_code="10">EPOutput</item>
                  </items>
                  <chunks count="2">
                    <chunk name="Attributes">
                      <items count="2">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>2668</X>
                          <Y>1254</Y>
                          <W>268</W>
                          <H>204</H>
                        </item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>2803</X>
                          <Y>1356</Y>
                        </item>
                      </items>
                    </chunk>
                    <chunk name="ParameterData">
                      <items count="14">
                        <item name="InputCount" type_name="gh_int32" type_code="3">10</item>
                        <item name="InputId" index="0" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="1" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="2" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="3" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="4" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="5" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="6" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="7" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="8" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="9" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="OutputCount" type_name="gh_int32" type_code="3">2</item>
                        <item name="OutputId" index="0" type_name="gh_guid" type_code="9">3ede854e-c753-40eb-84cb-b48008f14fd4</item>
                        <item name="OutputId" index="1" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                      </items>
                      <chunks count="12">
                        <chunk name="InputParam" index="0">
                          <items count="10">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Set to "True" to have EnergyPlus solve for basic building energy use such as heating, cooling, electricity for lights and electricity for plug loads for each zone.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">bde192a9-7eba-4269-bd06-d66dd6d6d8b5</item>
                            <item name="Name" type_name="gh_string" type_code="10">zoneEnergyUse_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">zoneEnergyUse_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">d60527f5-b5af-4ef6-8970-5f96fe412559</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>2670</X>
                                  <Y>1256</Y>
                                  <W>118</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>2730.5</X>
                                  <Y>1266</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="1">
                          <items count="10">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Set to "True" to have EnergyPlus solve for building gains and losses such as people gains, solar gains and infiltration losses/gains.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">ad164543-6a3b-435d-b079-b7b1e6f56882</item>
                            <item name="Name" type_name="gh_string" type_code="10">zoneGainsAndLosses_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">zoneGainsAndLosses_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">d60527f5-b5af-4ef6-8970-5f96fe412559</item>
                          </items>
                          <chunks count="2">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>2670</X>
                                  <Y>1276</Y>
                                  <W>118</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>2730.5</X>
                                  <Y>1286</Y>
                                </item>
                              </items>
                            </chunk>
                            <chunk name="PersistentData">
                              <items count="1">
                                <item name="Count" type_name="gh_int32" type_code="3">1</item>
                              </items>
                              <chunks count="1">
                                <chunk name="Branch" index="0">
                                  <items count="2">
                                    <item name="Count" type_name="gh_int32" type_code="3">1</item>
                                    <item name="Path" type_name="gh_string" type_code="10">{0}</item>
                                  </items>
                                  <chunks count="1">
                                    <chunk name="Item" index="0">
                                      <items count="3">
                                        <item name="null_string" type_name="gh_bool" type_code="1">false</item>
                                        <item name="string" type_name="gh_string" type_code="10">False</item>
                                        <item name="TypeName" type_name="gh_string" type_code="10">Grasshopper.Kernel.Types.GH_String</item>
                                      </items>
                                    </chunk>
                                  </chunks>
                                </chunk>
                              </chunks>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="2">
                          <items count="11">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Set to "True" to have EnergyPlus solve for the mean air temperature, mean radiant temperature, operative temperature, and relative humidity of each zone.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">3435e752-9c35-49df-b028-343aa1e180f3</item>
                            <item name="Name" type_name="gh_string" type_code="10">zoneComfortMetrics_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">zoneComfortMetrics_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="Source" index="0" type_name="gh_guid" type_code="9">2668e594-da9e-40ba-8239-59b08291f804</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">d60527f5-b5af-4ef6-8970-5f96fe412559</item>
                          </items>
                          <chunks count="2">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>2670</X>
                                  <Y>1296</Y>
                                  <W>118</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>2730.5</X>
                                  <Y>1306</Y>
                                </item>
                              </items>
                            </chunk>
                            <chunk name="PersistentData">
                              <items count="1">
                                <item name="Count" type_name="gh_int32" type_code="3">1</item>
                              </items>
                              <chunks count="1">
                                <chunk name="Branch" index="0">
                                  <items count="2">
                                    <item name="Count" type_name="gh_int32" type_code="3">1</item>
                                    <item name="Path" type_name="gh_string" type_code="10">{0}</item>
                                  </items>
                                  <chunks count="1">
                                    <chunk name="Item" index="0">
                                      <items count="3">
                                        <item name="null_string" type_name="gh_bool" type_code="1">false</item>
                                        <item name="string" type_name="gh_string" type_code="10">False</item>
                                        <item name="TypeName" type_name="gh_string" type_code="10">Grasshopper.Kernel.Types.GH_String</item>
                                      </items>
                                    </chunk>
                                  </chunks>
                                </chunk>
                              </chunks>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="3">
                          <items count="10">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Set to "True" to have EnergyPlus solve for the air flow and air heat gain of each zone, which is needed for the comfort map air stratification calculation.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">51bd1de8-8698-4ee2-a8ba-31613500c6b1</item>
                            <item name="Name" type_name="gh_string" type_code="10">comfortMapVariables_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">comfortMapVariables_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">d60527f5-b5af-4ef6-8970-5f96fe412559</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>2670</X>
                                  <Y>1316</Y>
                                  <W>118</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>2730.5</X>
                                  <Y>1326</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="4">
                          <items count="10">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Set to "True" to have EnergyPlus solve for the fractions of heating/cooling loads that are latent vs. sensible as well as the the flow rate and temperature of supply air into each zone.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">84a0b72f-41bb-46e5-940d-54be51a22f39</item>
                            <item name="Name" type_name="gh_string" type_code="10">zoneHVACParams_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">zoneHVACParams_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">87f87f55-5b71-41f4-8aea-21d494016f81</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>2670</X>
                                  <Y>1336</Y>
                                  <W>118</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>2730.5</X>
                                  <Y>1346</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="5">
                          <items count="10">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Set to "True" to have EnergyPlus solve for the interior and exterior surface temperatures of the individual surfaces of each zone.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">40702a83-e92e-4aad-b4d9-9e7c988d7c28</item>
                            <item name="Name" type_name="gh_string" type_code="10">surfaceTempAnalysis_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">surfaceTempAnalysis_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">d60527f5-b5af-4ef6-8970-5f96fe412559</item>
                          </items>
                          <chunks count="2">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>2670</X>
                                  <Y>1356</Y>
                                  <W>118</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>2730.5</X>
                                  <Y>1366</Y>
                                </item>
                              </items>
                            </chunk>
                            <chunk name="PersistentData">
                              <items count="1">
                                <item name="Count" type_name="gh_int32" type_code="3">1</item>
                              </items>
                              <chunks count="1">
                                <chunk name="Branch" index="0">
                                  <items count="2">
                                    <item name="Count" type_name="gh_int32" type_code="3">1</item>
                                    <item name="Path" type_name="gh_string" type_code="10">{0}</item>
                                  </items>
                                  <chunks count="1">
                                    <chunk name="Item" index="0">
                                      <items count="3">
                                        <item name="null_string" type_name="gh_bool" type_code="1">false</item>
                                        <item name="string" type_name="gh_string" type_code="10">False</item>
                                        <item name="TypeName" type_name="gh_string" type_code="10">Grasshopper.Kernel.Types.GH_String</item>
                                      </items>
                                    </chunk>
                                  </chunks>
                                </chunk>
                              </chunks>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="6">
                          <items count="10">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Set to "True" to have EnergyPlus solve for the gains and losses through the individual surfaces of each zone.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">364da21f-4e10-4041-9a97-f5e7d61893f3</item>
                            <item name="Name" type_name="gh_string" type_code="10">surfaceEnergyAnalysis_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">surfaceEnergyAnalysis_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">87f87f55-5b71-41f4-8aea-21d494016f81</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>2670</X>
                                  <Y>1376</Y>
                                  <W>118</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>2730.5</X>
                                  <Y>1386</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="7">
                          <items count="10">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Set to "True" to have EnergyPlus solve for the transmitted beam, diffuse, and total solar gain through the individual window surfaces of each zone.  These outputs are needed for Energy Shade Benefit Analysis.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">d2fcb000-65b4-4850-9f09-cf12f463e21b</item>
                            <item name="Name" type_name="gh_string" type_code="10">glazingSolarAnalysis_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">glazingSolarAnalysis_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">87f87f55-5b71-41f4-8aea-21d494016f81</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>2670</X>
                                  <Y>1396</Y>
                                  <W>118</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>2730.5</X>
                                  <Y>1406</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="8">
                          <items count="10">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">An integer or text value to set the type of load outputs requested (sensible, latent, total).  The default is set to "0 = Total" but you may want to change this to "1 = Sensible" for zone HVAC sizing, etc.  Choose from the following options:
0 = Total
1 = Sensible
2 = Latent</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">f6120a7a-6e18-447c-a402-110abbf0b59a</item>
                            <item name="Name" type_name="gh_string" type_code="10">_loadType_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">_loadType_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">37261734-eec7-4f50-b6a8-b8d1f3c4396b</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>2670</X>
                                  <Y>1416</Y>
                                  <W>118</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>2730.5</X>
                                  <Y>1426</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="9">
                          <items count="10">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Specify a timestep by inputing the words 'hourly', 'daily', 'monthly' or 'annual'.  The default is set to hourly.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">3edb7932-4cef-48dd-90fc-29b78a23ee45</item>
                            <item name="Name" type_name="gh_string" type_code="10">timestep_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">timestep_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">37261734-eec7-4f50-b6a8-b8d1f3c4396b</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>2670</X>
                                  <Y>1436</Y>
                                  <W>118</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>2730.5</X>
                                  <Y>1446</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="0">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10">Report!</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">64dd87bb-6510-4107-9a8d-e920c90f2b42</item>
                            <item name="Name" type_name="gh_string" type_code="10">out</item>
                            <item name="NickName" type_name="gh_string" type_code="10">report</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>2818</X>
                                  <Y>1256</Y>
                                  <W>116</W>
                                  <H>100</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>2868</X>
                                  <Y>1306</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="1">
                          <items count="7">
                            <item name="Description" type_name="gh_string" type_code="10">EnergyPlus code that should be plugged into the "simulationOutputs" parameter of the "Honeybee_Export to OpenStudio" component.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">181ff420-8948-437c-af06-925df54a387e</item>
                            <item name="Mapping" type_name="gh_int32" type_code="3">1</item>
                            <item name="Name" type_name="gh_string" type_code="10">simulationOutputs</item>
                            <item name="NickName" type_name="gh_string" type_code="10">simulationOutputs</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>2818</X>
                                  <Y>1356</Y>
                                  <W>116</W>
                                  <H>100</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>2868</X>
                                  <Y>1406</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                      </chunks>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="10">
              <items count="3">
                <item name="GUID" type_name="gh_guid" type_code="9">410755b1-224a-4c1e-a407-bf32fb45ea7e</item>
                <item name="Lib" type_name="gh_guid" type_code="9">16cf80bc-9018-cbdb-2238-976eb17fd30d</item>
                <item name="Name" type_name="gh_string" type_code="10">Honeybee_ Run Energy Simulation</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="11">
                    <item name="CodeInput" type_name="gh_string" type_code="10"># This component exports HBZones into an IDF file
#
# Honeybee: A Plugin for Environmental Analysis (GPL) started by Mostapha Sadeghipour Roudsari
# 
# This file is part of Honeybee.
# 
# Copyright (c) 2013-2017, Mostapha Sadeghipour Roudsari and Chris Mackey &lt;mostapha@ladybug.tools and Chris@MackeyArchitecture.com&gt; 
# it under the terms of the GNU General Public License as published 
# by the Free Software Foundation; either version 3 of the License, 
# or (at your option) any later version. 
# 
# Honeybee is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of 
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
# GNU General Public License for more details.
# 
# 
# @license GPL-3.0+ &lt;http://spdx.org/licenses/GPL-3.0+&gt;


"""
Use this component to export HBZones into an IDF file, and run them through EnergyPlus.
_
The component outputs the report from the simulation, the file path of the IDF file, and the CSV result file from the EnergyPlus run.
-
Provided by Honeybee 0.0.62
    Args:
        north_: Input a vector to be used as a true North direction for the energy simulation or a number between 0 and 360 that represents the degrees off from the y-axis to make North.  The default North direction is set to the Y-axis (0 degrees).
        _epwFile: An .epw file path on your system as a text string.
        _analysisPeriod_: An optional analysis period from the Ladybug_Analysis Period component.  If no Analysis period is given, the energy simulation will be run for the enitre year.
        +++++++++++++++: ...
        _energySimPar_: Optional Energy Simulation Parameters from the "Honeybee_Energy Simulation Par" component.  If no value is connected here, the simulation will run with the following parameters:
            1 - 6 timeSteps per hour
            2 - A shadow calculation that averages over multiple days (as opposed to running it for each timeStep)
            3 - A shadow calculation frequency of 30 (meaning that the shadow calulation is averaged over every 30 days)
            4 - A maximum of 3000 points used in the shadow calculation. (This may need to be higher if you have a lot of detailed context geometry)
            5 - An colar energy calculation that includes both interior and exterior light reflections.
            6 - A simulation including a zone sizing calculation, a system sizing calculation, a plat sizing calculation, and a full run of the energy use ofver the analysis period.  The simulation is not run for the sizing period by default.
            7 - A system sizing period that runs from the extreme periods of the weather file and not a ddy file.
            8 - City terrian.
        +++++++++++++++: ...
        _HBZones: The HBZones that you wish to write into an IDF and/or run through EnergyPlus.  These can be from any of the components that output HBZones.
        HBContext_: Optional HBContext geometry from the "Honeybee_EP Context Surfaces." component or Honeybee PV gen component.
        HBGenerators_: Connect the output HBGeneratorSystem from the Honeybee_generationsystem component here to model EnergyPlus Photovoltaic and Wind generator systems in this simulation.
        simulationOutputs_: A list of the outputs that you would like EnergyPlus to write into the result CSV file.  This can be any set of any outputs that you would like from EnergyPlus, writen as a list of text that will be written into the IDF.  It is recommended that, if you are not expereinced with writing EnergyPlus outputs, you should use the "Honeybee_Write EP Result Parameters" component to request certain types of common outputs.  If no value is input here, this component will automatically request outputs of heating, cooling, lighting, and equipment energy use.
        +++++++++++++++: ...
        _writeIdf: Set to "True" to have the component take your HBZones and other inputs and write them into an IDF file.  The file path of the resulting file will appear in the idfFileAddress output of this component.  Note that only setting this to "True" and not setting the output below to "True" will not automatically run the IDF through EnergyPlus for you.
        runEnergyPlus_: Set to "True" to have the component run your IDF through EnergyPlus once it has finished writing it.  This will ensure that a CSV result file appears in the resultFileAddress output. Set to 2 if you want the analysis to run in background. This option is useful for parametric runs when you don't want to see command shells.
        +++++++++++++++: ...
        _workingDir_: An optional working directory to a folder on your system, into which your IDF and result files will be written.  NOTE THAT DIRECTORIES INPUT HERE SHOULD NOT HAVE ANY SPACES OR UNDERSCORES IN THE FILE PATH.
        _idfFileName_: Optional text which will be used to name your IDF and result files.  Change this to aviod over-writing results of previous energy simulations.
        +++++++++++++++: ...
        meshSettings_: Optional mesh settings for your geometry from any one of the native Grasshopper mesh setting components.  These will be used to change the meshing of curved surfaces before they are run through EnergyPlus (note that meshing of curved surfaces is done since Energyplus is not able to calculate heat flow through non-planar surfaces).  Default Grasshopper meshing is used if nothing is input here but you may want to decrease your calculation time by changing it to Coarse or increase your curvature definition (and calculation time) by making it finer.
        additionalStrings_: THIS OPTION IS JUST FOR ADVANCED USERS OF ENERGYPLUS.  You can input additional text strings here that you would like written into the IDF.  The strings input here should be complete EnergyPlus objects that are correctly formatted.  You can input as many objects as you like in a list.  This input can be used to write objects into the IDF that are not currently supported by Honeybee.
    Returns:
        report: Check here to see a report of the EnergyPlus run, including errors.
        idfFileAddress: The file path of the IDF file that has been generated on your machine.
        performanceSummary: The Html file path of the Building Utility Performance Summar. You can review the report by copying the file path, and open it in your web browser.
        resultFileAddress: The file path of the CSV result file that has been generated on your machine.  This only happens when you set "runEnergyPlus_" to "True."
        studyFolder: The directory in which the simulation has been run.  Connect this to the 'Honeybee_Lookup EnergyPlus' folder to bring many of the files in this directory into Grasshopper.
"""
ghenv.Component.Name = "Honeybee_ Run Energy Simulation"
ghenv.Component.NickName = 'runEnergySimulation'
ghenv.Component.Message = 'VER 0.0.62\nJUL_28_2017'
ghenv.Component.IconDisplayMode = ghenv.Component.IconDisplayMode.application
ghenv.Component.Category = "Honeybee"
ghenv.Component.SubCategory = "10 | Energy | Energy"
#compatibleHBVersion = VER 0.0.56\nAPR_25_2016
#compatibleLBVersion = VER 0.0.59\nJUL_24_2015
ghenv.Component.AdditionalHelpFromDocStrings = "1"


import Rhino as rc
import scriptcontext as sc
import rhinoscriptsyntax as rs
import os
import System
import Grasshopper.Kernel as gh
import math
import shutil
import collections
import subprocess
import copy

rc.Runtime.HostUtils.DisplayOleAlerts(False)


class WriteIDF(object):
    # Add all HBcontext surfaces from both HBContext_ and HB generator here so that if user connects the same
    # HBcontext surfaces to both HB generator and HBcontext duplicate surfaces will be detected and an error thrown.
    
    checksurfaceduplicate = []
    zonesurfaces = []
    # Add the ID of all batteries from HB generator systems here to check for duplicate batteries.
    checkbatteryduplicate = []
    # Add the ID of all inverters from HB generator systems here to check for duplicate inverters.
    checkinverterduplicate = []

    # Create a list of tuples containing each item and its cost - to conduct financial analysis 
    
    financialdata = []
    
    def __init__(self, workingDir):
        self.fileBasedSchedules = {}
        self.workingDir = workingDir
        
    def EPZone(self, zone):
        
        zoneStr = '\nZone,\n' + \
                '\t' + zone.name + ',\n' + \
                '\t' + `zone.north` + ',\t!-Direction of Relative North {deg}\n' + \
                '\t' + `zone.origin.X` + ',\t!- X Origin {m}\n' + \
                '\t' + `zone.origin.Y` + ',\t!- Y Origin {m}\n' + \
                '\t' + `zone.origin.Z` + ',\t!- Z Origin {m}\n'
                
        try:
            if zone.isPlenum:
                return zoneStr + \
                '\t1,\t!- Type\n' + \
                '\t,\t!- Multiplier\n' + \
                '\t,\t!- Ceiling Height\n' + \
                '\t,\t!- Volume\n' + \
                '\t,\t!- Floor Area\n' + \
                '\t,\t!- Zone Inside Convection Algorithm\n' + \
                '\t,\t!- Zone Outside Convection Algorithm\n' + \
                '\tNo;\t!- Part of Total Floor Area\n'                
            else:
                return zoneStr + '\t1;\t!- Type\n'
        except:
            #older versions
            return zoneStr + '\t1;\t!- Type\n'
            
    def EPZoneSurface (self, surface):
        coordinates = surface.coordinates
        checked, coordinates= self.checkCoordinates(coordinates)
        if int(surface.type) == 4: surface.type = 0
        
        if checked:
            str_1 = '\nBuildingSurface:Detailed,\n' + \
                '\t' + surface.name + ',\t!- Name\n' + \
                '\t' + surface.srfType[int(surface.type)] + ',\t!- Surface Type\n' + \
                '\t' + surface.construction + ',\t!- Construction Name\n' + \
                '\t' + surface.parent.name + ',\t!- Zone Name\n' + \
                '\t' + surface.BC + ',\t!- Outside Boundary Condition\n' + \
                '\t' + surface.BCObject.name + ',\t!- Outside Boundary Condition Object\n' + \
                '\t' + surface.sunExposure + ',\t!- Sun Exposure\n' + \
                '\t' + surface.windExposure + ',\t!- Wind Exposure\n' + \
                '\t' + surface.groundViewFactor + ',\t!- View Factor to Ground\n' + \
                '\t' + `len(coordinates)` + ',\t!- Number of Vertices\n'
        
            str_2 = '\t';
            
            for ptCount, pt in enumerate(coordinates):
                if ptCount &lt; len (coordinates) - 1:
                    str_2 = str_2 + `pt.X` + ',\n\t' + `pt.Y` + ',\n\t' + `pt.Z` + ',\n\t'
                else:
                    str_2 = str_2 + `pt.X` + ',\n\t' + `pt.Y` + ',\n\t' + `pt.Z` + ';\n\n'
            
            fullString = str_1 + str_2
            
            return fullString
        
        else:
            return "\n"
    
    def extractDDYObjs(self, ddyFile):
        ddyfile = open(ddyFile,"r")
        designDayLines = ['\n']
        correctDayTrigger = False
        for line in ddyfile:
            if correctDayTrigger == True:
                designDayLines.append(line)
                if (';' in line and '!- Clearness' in line) or (';' in line and '!- ASHRAE Clear Sky Optical Depth for Diffuse Irradiance' in line):
                    designDayLines.append('\n')
                    correctDayTrigger = False
            elif '.4%' in line or '99.6%' in line:
                correctDayTrigger = True
        ddyfile.close()
        return designDayLines
    
    def writeDDObjStr(self, ddName, designType, month, day, dbTemp, dbTempRange, wbTemp, enth, humidConditType, pressure, windSpeed, windDir, ashraeSkyClearness):
        ddStr =  '! ' + ddName + '\n' + \
            'SizingPeriod:DesignDay,\n' + \
            '\t' + ddName + ',     !- Name\n' + \
            '\t' + str(month) + ',      !- Month\n' + \
            '\t' + str(day) + ',      !- Day of Month\n' + \
            '\t' + designType + ',!- Day Type\n' + \
            '\t' + str(dbTemp) + ',      !- Maximum Dry-Bulb Temperature {C}\n' + \
            '\t' + str(dbTempRange) + ',      !- Daily Dry-Bulb Temperature Range {C}\n' + \
            '\t' + 'DefaultMultipliers, !- Dry-Bulb Temperature Range Modifier Type\n' + \
            '\t' + ',      !- Dry-Bulb Temperature Range Modifier Schedule Name\n' + \
            '\t' + humidConditType + ',      !- Humidity Condition Type\n' + \
            '\t' + str(wbTemp) + ',      !- Wetbulb or Dewpoint at Maximum Dry-Bulb {C}\n' + \
            '\t' + ',      !- Humidity Indicating Day Schedule Name\n' + \
            '\t' + ',      !- Humidity Ratio at Maximum Dry-Bulb {kgWater/kgDryAir}\n' + \
            '\t' + str(enth) + ',      !- Enthalpy at Maximum Dry-Bulb {J/kg}\n' + \
            '\t' + ',      !- Daily Wet-Bulb Temperature Range {deltaC}\n' + \
            '\t' + str(pressure) + ',      !- Barometric Pressure {Pa}\n' + \
            '\t' + str(windSpeed) + ',      !- Wind Speed {m/s} design conditions vs. traditional 6.71 m/s (15 mph)\n' + \
            '\t' + str(windDir) + ',      !- Wind Direction {Degrees; N=0, S=180}\n' + \
            '\t' + 'No,      !- Rain {Yes/No}\n' + \
            '\t' + 'No,      !- Snow on ground {Yes/No}\n' + \
            '\t' + 'No,      !- Daylight Savings Time Indicator\n' + \
            '\t' + 'ASHRAEClearSky' + ', !- Solar Model Indicator\n' + \
            '\t' + ',      !- Beam Solar Day Schedule Name\n' + \
            '\t' + ',      !- Diffuse Solar Day Schedule Name\n' + \
            '\t' + ',      !- ASHRAE Clear Sky Optical Depth for Beam Irradiance (taub)\n' + \
            '\t' + ',      !- ASHRAE Clear Sky Optical Depth for Diffuse Irradiance (taud)\n' + \
            '\t' + str(ashraeSkyClearness) + ';      !- Clearness {0.0 to 1.1}\n' + '\n'
        
        return ddStr
    
    def createDdyFromEPW(self, epwFileAddress, workingDir, lb_preparation, lb_comfortModels):
        # Extract the relevant data from the EPW.
        # We need the following: dbTemp, dewPoint, rH, windSpeed, windDir, windDir, wetBulb, enthalpy
        dbTemp = []
        dewPoint = []
        rH = []
        windSpeed = []
        windDir = []
        barPress = []
        wetBulb = []
        epwfile = open(epwFileAddress,"r")
        for count, line in enumerate(epwfile):
            if count &gt; 7:
                dbTemp.append(float(line.split(',')[6]))
                dewPoint.append(float(line.split(',')[7]))
                rH.append(float(line.split(',')[8]))
                barPress.append(float(line.split(',')[9]))
                windSpeed.append(float(line.split(',')[21]))
                windDir.append(float(line.split(',')[20]))
        epwfile.close()
        hR, enthalpy, pP, sP = lb_comfortModels.calcHumidRatio(dbTemp, rH, barPress)
        for i, tem in enumerate(dbTemp):
            wetBulb.append(lb_comfortModels.findWetBulb(tem, rH[i], barPress[i]))
        
        # Find the conditions for the most extreme hours in the epw.  These are the 7 extreme conditions we need:
            # 1 - Winnter Design Day - Min Dry Bulb (Sensible Heating)
            # 2 - Winter Design Day - Min Dew Point (Humidification)
            # 3 - Winter Design Day = Max Wind Speed when temperature is less than 1 standard deviation of annual mean.
            # 4 - Summer Design Day - Max Dry Bulb (Sensible Cooling)
            # 5 - Summer Design Day - Max Wet Bulb (Dehumidification)
            # 6 - Summer Design Day - Max Dew Point (Dehumidification)
            # 7 - Summer Design Day - Max Enthalpy (Dehumidification)
        sortedDB, corrWB = zip(*sorted(zip(dbTemp, wetBulb)))
        minDB = sortedDB[34] # Design Condition 1
        WBforMinDB = corrWB[34]
        maxDB = sortedDB[-35] # Design Condition 4
        WBforMaxDB = corrWB[-35]
        sortedDP, corrDB = zip(*sorted(zip(dewPoint, dbTemp)))
        minDP = sortedDP[34] # Design Condition 2
        DBforMinDP = corrDB[34]
        maxDP = sortedDP[-35] # Design Condition 6
        DBforMaxDP = corrDB[-35]
        sortedWB, corresDB = zip(*sorted(zip(wetBulb, dbTemp)))
        maxWB = sortedWB[-35] # Design Condition 5
        DBforMaxWB = corresDB[-35]
        sortedEnth, correspondDB = zip(*sorted(zip(enthalpy, dbTemp)))
        maxEnth = int(sortedEnth[-35] * 1000) # Design Condition 7
        DBforMaxEnth = correspondDB[-35]
        
        coldStdDevTemp = sortedDB[1384]
        hotStdDevTemp = sortedDB[-1385]
        winSpBelowTemp = []
        windDirBelowTemp = []
        winSpAboveTemp = []
        windDirAboveTemp = []
        for i, tem in enumerate(dbTemp):
            if tem &lt; coldStdDevTemp:
                winSpBelowTemp.append(windSpeed[i])
                windDirBelowTemp.append(windDir[i])
            elif tem &gt; hotStdDevTemp:
                winSpAboveTemp.append(windSpeed[i])
                windDirAboveTemp.append(windDir[i])
        winSpBelowTemp.sort()
        coldMonWind = winSpBelowTemp[922]
        coldMonWinDir = int(sum(windDirBelowTemp)/len(windDirBelowTemp))
        maxWind = winSpBelowTemp[-5] # Design Condition 3
        winSpAboveTemp.sort()
        hotMonWind = winSpAboveTemp[922]
        hotMonWinDir = int(sum(windDirAboveTemp)/len(windDirAboveTemp))
        
        # Calculate a few other required values from the epw data.
        # Like average annual pressure and coldest/hottest month.
        # and average wind speed/direction during these months.
        avgEpwParPress = int(sum(barPress)/len(barPress))
        
        def binAndAvgByMonth(dataSet):
            avgMonthData = []
            binnedMonthData = []
            for mon in range(12):
                binnedMonthData.append([])
            for i, x in enumerate(dataSet):
                d, m, t = lb_preparation.hour2Date(i, True)
                binnedMonthData[m].append(x)
            for dataList in binnedMonthData:
                avgMonthData.append(sum(dataList)/len(dataList))
            return avgMonthData, binnedMonthData
        
        def partitionList(l, n):
            for i in range(0, len(l), n):
                yield l[i:i+n]
        
        avgMonTemps, binMonTemps = binAndAvgByMonth(dbTemp)
        monNums = range(12)
        avgMonTempsSort, monNumsSort = zip(*sorted(zip(avgMonTemps, monNums)))
        coldMonth = monNumsSort[0]
        hotMonth = monNumsSort[-1]
        allHotMonthTemps = binMonTemps[hotMonth]
        dayHotMonTemps = partitionList(allHotMonthTemps, 24)
        dailyTempDiff = []
        for day in dayHotMonTemps:
            day.sort()
            dailyTempDiff.append(day[-1]-day[0])
        hotDayDBTempRange = (int((sum(dailyTempDiff)/len(dailyTempDiff))*100))/100
        
        
        # Assemble a list of design condition strings to write into the ddy file.
        ddStrs = []
        ddStrs.append(self.writeDDObjStr('Ann Htg 99.6% Condns DB', 'WinterDesignDay', coldMonth+1, 21, minDB, 0, minDB, '', 'Wetbulb', avgEpwParPress, coldMonWind, coldMonWinDir, 0))
        ddStrs.append(self.writeDDObjStr('Ann Hum_n 99.6% Condns DP=&gt;MCDB', 'WinterDesignDay', coldMonth+1, 21, DBforMinDP, 0, minDP, '', 'Dewpoint', avgEpwParPress, coldMonWind, coldMonWinDir, 0))
        ddStrs.append(self.writeDDObjStr('Ann Htg Wind 99.6% Condns WS=&gt;MCDB', 'WinterDesignDay', coldMonth+1, 21, coldStdDevTemp, 0, coldStdDevTemp, '', 'Wetbulb', avgEpwParPress, maxWind, coldMonWinDir, 0))
        
        ddStrs.append(self.writeDDObjStr('Ann Clg .4% Condns DB=&gt;MWB', 'SummerDesignDay', hotMonth+1, 21, maxDB, hotDayDBTempRange, WBforMaxDB, '', 'Wetbulb', avgEpwParPress, hotMonWind, hotMonWinDir, 1.2))
        ddStrs.append(self.writeDDObjStr('Ann Clg .4% Condns WB=&gt;MDB', 'SummerDesignDay', hotMonth+1, 21, DBforMaxWB, hotDayDBTempRange, maxWB, '', 'Wetbulb', avgEpwParPress, hotMonWind, hotMonWinDir, 1.2))
        ddStrs.append(self.writeDDObjStr('Ann Clg .4% Condns DP=&gt;MDB', 'SummerDesignDay', hotMonth+1, 21, DBforMaxDP, hotDayDBTempRange, maxDP, '', 'Dewpoint', avgEpwParPress, hotMonWind, hotMonWinDir, 1.2))
        ddStrs.append(self.writeDDObjStr('Ann Clg .4% Condns Enth=&gt;MDB', 'SummerDesignDay', hotMonth+1, 21, DBforMaxEnth, hotDayDBTempRange, '', maxEnth, 'Enthalpy', avgEpwParPress, hotMonWind, hotMonWinDir, 1.2))
        
        # Write the design day objects into a .ddy file.
        epwFileName = epwFileAddress.split('\\')[-1].split('.')[0]
        ddyfile = workingDir + '\\' + epwFileName + '.ddy'
        ddyFile = open(ddyfile, "w")
        for sizingObj in ddStrs:
            ddyFile.write(sizingObj)
        ddyFile.close()
        
        return ddyfile
    
    def checkCoordinates(self, coordinates):
        # check if coordinates are so close or duplicated
        # this is a place holder for now I just return true
        #return True, glzCoordinates
    
        def isDuplicate(pt, newPts):
            for p in newPts:
                if pt.DistanceTo(p) &lt; 2 * sc.doc.ModelAbsoluteTolerance:
                    return True
            return False
            
        newCoordinates = [coordinates[0]]
        for pt in coordinates[1:]:
            if not isDuplicate(pt, newCoordinates):
                newCoordinates.append(pt)
            
        if len(newCoordinates) &gt; 2:
            return True, newCoordinates
        else:
            print "One of the surfaces has less than 3 identical coordinates and is removed."
            return False,[]
    
    def EPFenSurface (self, surface):
        glzStr = ""
        try:
            for childSrf in surface.childSrfs:
                # check surface area
                glzCoordinates = childSrf.coordinates
                checked, glzCoordinates= self.checkCoordinates(glzCoordinates)
                
                # Set any shading control objects.
                
                try:
                    shdCntrl = childSrf.shadingControlName[0]
                    if '.CSV' in shdCntrl:
                        newSchStrList = []
                        schedStrList = shdCntrl.split('-')
                        for item in schedStrList:
                            if '.CSV' in item:
                                newItem = os.path.basename(item).replace('.CSV', '')
                                newSchStrList.append(newItem)
                            else:
                                newSchStrList.append(item)
                        shdCntrl = '-'.join(newSchStrList)
                except:
                    shdCntrl = ''
                
                if checked:
                    str_1 = '\nFenestrationSurface:Detailed,\n' + \
                        '\t' + childSrf.name + ',\t!- Name\n' + \
                        '\t' + childSrf.srfType[childSrf.type] + ',\t!- Surface Type\n' + \
                        '\t' + childSrf.construction + ',\t!- Construction Name\n' + \
                        '\t' + childSrf.parent.name + ',\t!- Surface Name\n' + \
                        '\t' + childSrf.BCObject.name + ',\t!- Outside Boundary Condition Object\n' + \
                        '\t' + childSrf.groundViewFactor + ',\t!- View Factor to Ground\n' + \
                        '\t' + shdCntrl + ',\t!- Shading Control Name\n' + \
                        '\t' + childSrf.frameName + ',\t!- Frame and Divider Name\n' + \
                        '\t' + `childSrf.Multiplier`+ ',\t!- Multiplier\n' + \
                        '\t' + `len(glzCoordinates)` + ',\t!- Number of Vertices\n'
                
                    str_2 = '\t';
                    for ptCount, pt in enumerate(glzCoordinates):
                        if ptCount &lt; len (glzCoordinates) - 1:
                            str_2 = str_2 + `pt.X` + ',\n\t' + `pt.Y` + ',\n\t' + `pt.Z` + ',\n\t'
                        else:
                            str_2 = str_2 + `pt.X` + ',\n\t' + `pt.Y` + ',\n\t' + `pt.Z` + ';\n\n'
                    
                    glzStr += str_1 + str_2
                
                else:
                    glzStr += "\n"
        except Exception, e:
            print e
            warning = "Failed to write " + childSrf.name + " to idf file"
            print warning
            ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warning)
            pass
            
        return glzStr
        
    
    def EPShdSurface (self, surface):
        coordinatesList = surface.extractPoints()
        if type(coordinatesList[0])is not list and type(coordinatesList[0]) is not tuple: coordinatesList = [coordinatesList]
        
        scheduleName = surface.TransmittanceSCH
        if scheduleName.lower().endswith(".csv"):
            # find filebased schedule name
            scheduleName = self.fileBasedSchedules[scheduleName.upper()]
        fullString = ''
        for count, coordinates in enumerate(coordinatesList):
            
            if surface.containsPVgen == None:
                # Assign surface name here if containsPVgen surface name was assigned in PVgen component
                surface.name = surface.name + '_' + `count`
            str_1 = '\nShading:Building:Detailed,\n' + \
                    '\t' + surface.name + ',\t!- Name\n' + \
                    '\t' + scheduleName + ',\t!- Transmittance Schedule Name\n' + \
                    '\t' + `len(coordinates)` + ',\t!- Number of Vertices\n'    
            str_2 = '\t';
            for ptCount, pt in enumerate(coordinates):
                if ptCount &lt; len (coordinates) - 1:
                    str_2 = str_2 + `pt.X` + ',\n\t' + `pt.Y` + ',\n\t' + `pt.Z` + ',\n\t'
                else:
                    str_2 = str_2 + `pt.X` + ',\n\t' + `pt.Y` + ',\n\t' + `pt.Z` + ';\n\n'
            
            fullString = fullString + str_1 + str_2
        return fullString
    
    def EPInternalMass(self, zone, massName, srfArea, constructionName):
        internalMassStr = '\nInternalMass,\n' + \
                    '\t' + massName + ',\t!- Name\n' + \
                    '\t' + constructionName + ',\t!- Construction Name\n' + \
                    '\t' + zone.name + ',\t!- Zone Name\n' + \
                    '\t' + str(srfArea) + ';\t!- Surface Area\n' 
        
        return internalMassStr
    
    def EPZoneListStr(self, zoneListName, zones):
        str_1 = 'ZoneList,\n' + \
                '\t' + zoneListName + ',\n'
                
        str_2 = ''
        for zoneCount, zone in enumerate(zones):
            if zoneCount &lt; len(zones) - 1:
                str_2 = str_2 + '\t' + zone.name + ',\n'
            else:
                str_2 = str_2 + '\t' + zone.name + ';\n\n'
        return str_1 + str_2
    
    
    def EPHVACTemplate( self, name, zone):
        if zone.isConditioned:
            heatingSetPtSchedule = zone.heatingSetPtSchedule
            coolingSetPtSchedule = zone.coolingSetPtSchedule
            
            if heatingSetPtSchedule.lower().endswith(".csv"):
                # find filebased schedule name
                heatingSetPtSchedule = self.fileBasedSchedules[heatingSetPtSchedule.upper()]            
                
            if coolingSetPtSchedule.lower().endswith(".csv"):
                # find filebased schedule name
                coolingSetPtSchedule = self.fileBasedSchedules[coolingSetPtSchedule.upper()]
                
            return '\nHVACTemplate:Thermostat,\n' + \
                    '\t' + name + ',                    !- Name\n' + \
                    '\t' + heatingSetPtSchedule + ',          !- Heating Setpoint Schedule Name\n' + \
                    '\t' + `zone.heatingSetPt` + ', !- Constant Heating Setpoint {C}\n' + \
                    '\t' + coolingSetPtSchedule + ',          !- Cooling Setpoint Schedule Name\n' + \
                    '\t' + `zone.coolingSetPt` + '; !- Constant Cooling Setpoint {C}\n'
        else:
            return "\n"
    
    def EPOutdoorAir(self, zone):
        if zone.isConditioned:
            if zone.ventilationSched != "":
                if zone.ventilationSched.upper().endswith('.CSV'):
                    scheduleFileName = os.path.basename(zone.ventilationSched)
                    scheduleObjectName = "_".join(scheduleFileName.split(".")[:-1])
                else:
                    scheduleObjectName = zone.ventilationSched
            else: scheduleObjectName = ""
            
            return '\nDesignSpecification:OutdoorAir,\n' + \
                    '\t' + zone.name + 'OutdoorAirCntrl' + ',                    !- Name\n' + \
                    '\t' + zone.outdoorAirReq + ',          !- Outdoor Air Method\n' + \
                    '\t' + `zone.ventilationPerPerson` + ', !- Outdoor Air Flow per Person {m3/s-person}\n' + \
                    '\t' + `zone.ventilationPerArea` + ',          !- Outdoor Air Flow per Zone Floor Area {m3/s-m2}\n' + \
                    '\t' + '0, !- Outdoor Air Flow per Zone {m3/s}\n' + \
                    '\t' + '0, !- Outdoor Air Flow Air Changes per Hour {1/hr}\n' + \
                    '\t' + scheduleObjectName + '; !- Outdoor Air Flow Rate Fraction Schedule Name\n'
        else:
            return "\n"
    
    def EPIdealAirSystem(self, zone, thermostatName):
        if zone.isConditioned:
            #Set the dehumidifcation / humidification based on the presence/absence of a zone humidistat.
            dehumidTrigger = False
            #Humidity Control
            if zone.humidityMax != "":
                dehumidCntrl = "Humidistat"
                dehumidTrigger = True
            else: dehumidCntrl = "None"
            if zone.humidityMin != "": humidCntrl = "Humidistat"
            else: humidCntrl = "None"
            
            # Set an airside economizer and demand controlled ventilation by default.
            if dehumidTrigger is True:
                airSideEconomizer = 'DifferentialEnthalpy'
            else:
                airSideEconomizer = 'DifferentialDryBulb'
            coolLimit = 'LimitFlowRate'
            maxAirFlowRate = 'autosize'
            
            # Set the airDetails.
            scheduleObjectName = ""
            demanVent = ""
            coolSupply = ""
            heatSupply = "40"
            heatRecovery = ''
            sensRecovEffectiveness = ''
            latRecovEffectiveness = ''
            airDetails = zone.HVACSystem.airDetails
            if airDetails != None:
                if airDetails.HVACAvailabiltySched != 'ALWAYS ON':
                    scheduleObjectName = airDetails.HVACAvailabiltySched
                if airDetails.fanControl == 'Variable Volume':
                    demanVent = 'OccupancySchedule'
                if airDetails.heatingSupplyAirTemp != 'Default':
                    heatSupply = str(airDetails.heatingSupplyAirTemp)
                if airDetails.coolingSupplyAirTemp != 'Default':
                    coolSupply = str(airDetails.coolingSupplyAirTemp)
                if airDetails.airsideEconomizer != 'Default':
                    airSideEconomizer =  airDetails.airsideEconomizer
                if airDetails.heatRecovery != 'Default':
                    heatRecovery = airDetails.heatRecovery
                if airDetails.recoveryEffectiveness != 'Default':
                    if heatRecovery == 'Sensible':
                        sensRecovEffectiveness = str(airDetails.recoveryEffectiveness)
                    elif heatRecovery == 'Enthalpy':
                        sensRecovEffectiveness = str(airDetails.recoveryEffectiveness)
                        latRecovEffectiveness = str(airDetails.recoveryEffectiveness)
            
            # Set the heatingDetails.
            heatAvailSch = ''
            heatingDetails = zone.HVACSystem.heatingDetails
            if heatingDetails != None:
                if heatingDetails.heatingAvailSched != 'ALWAYS ON':
                    heatAvailSch = heatingDetails.heatingAvailSched
            
            # Set the coolingDetails.
            coolAvailSch = ''
            coolingDetails = zone.HVACSystem.coolingDetails
            if coolingDetails != None:
                if coolingDetails.coolingAvailSched != 'ALWAYS ON':
                    coolAvailSch = coolingDetails.coolingAvailSched
            
            return '\nHVACTemplate:Zone:IdealLoadsAirSystem,\n' + \
                '\t' + zone.name + ',\t!- Zone Name\n' + \
                '\t' + thermostatName + ',\t!- Template Thermostat Name\n' + \
                '\t' + scheduleObjectName + ',  !- Availability Schedule Name\n' + \
                '\t' + heatSupply + ',  !- Heating Supply Air Temp {C}\n' + \
                '\t' + coolSupply + ',  !- Cooling Supply Air Temp {C}\n' + \
                '\t' + '0.008,  !- Max Heating Supply Air Humidity Ratio {kg-H2O/kg-air}\n' + \
                '\t' + '0.0085,  !- Min Cooling Supply Air Humidity Ratio {kg-H2O/kg-air}\n' + \
                '\t' + ',  !- Heating Limit\n' + \
                '\t' + ',  !- Maximum Heating Air Flow Rate {m3/s}\n' + \
                '\t' + ',  !- Maximum Sensible Heat Capacity\n' + \
                '\t' + coolLimit + ',  !- Cooling Limit\n' + \
                '\t' + maxAirFlowRate + ',  !- Maximum Cooling Air Flow Rate {m3/s}\n' + \
                '\t' + ',  !- Maximum Total Cooling Capacity\n' + \
                '\t' + heatAvailSch + ',  !- Heating Availability Schedule\n' + \
                '\t' + coolAvailSch + ',  !- Cooling Availability Schedule\n' + \
                '\t' + dehumidCntrl + ',  !- Dehumidification Control Type\n' + \
                '\t' + ',  !- Cooling Sensible Heat Ratio\n' + \
                '\t' + str(zone.humidityMax) + ',  !- Dehumidification Setpoint\n' + \
                '\t' + humidCntrl + ',  !- Humidification Control Type\n' + \
                '\t' + str(zone.humidityMin) + ',  !- Humidification Setpoint\n' + \
                '\t' + 'DetailedSpecification' + ',  !- Outdoor Air Method\n' + \
                '\t' + ',  !- Outdoor Air Flow Rate Per Person\n' + \
                '\t' + ',  !- Outdoor Air Flow Rate Per Floor Zone Area\n' + \
                '\t' + ',  !- Outdoor Air Flow Rate Per Zone\n' + \
                '\t' + zone.name + 'OutdoorAirCntrl' + ',  !- Design Specification Outdoor Air Object Name\n' + \
                '\t' + demanVent + ',  !- Demand Controlled Ventilation Type\n' + \
                '\t' + airSideEconomizer + ',  !- Outdoor Air Economizer Type\n' + \
                '\t' + heatRecovery + ',  !- Heat Recovery Type\n' + \
                '\t' + sensRecovEffectiveness + ',  !- Sensible Heat Recovery Effectiveness\n' + \
                '\t' + latRecovEffectiveness + ';  !- Latent Heat Recovery Effectiveness\n'
        else:
            return "\n"
    
    def IdealAirZoneSizing(self, zone, coolSupplyTemp = 14, heatingSupplyTemp = 40):
        if zone.isConditioned:
            zoneSizeStr = "\nSizing:Zone,\n" + \
                '\t' +  zone.name + ',      !- Zone or ZoneList Name\n' + \
                '\t' + 'SupplyAirTemperature,     !- Zone Cooling Design Supply Air Temperature Input Method\n' + \
                '\t' + str(coolSupplyTemp) + ',       !- Zone Cooling Design Supply Air Temperature {C}\n' + \
                '\t' + '11.11,                                  !- Zone Cooling Design Supply Air Temperature Difference {deltaC}\n' + \
                '\t' + 'SupplyAirTemperature,                   !- Zone Heating Design Supply Air Temperature Input Method\n' + \
                '\t' + str(heatingSupplyTemp) + ',           !- Zone Heating Design Supply Air Temperature {C}\n' + \
                '\t' + '11.11,                                  !- Zone Heating Design Supply Air Temperature Difference {deltaC}\n' + \
                '\t' + '0.0085,                                 !- Zone Cooling Design Supply Air Humidity Ratio {kgWater/kgDryAir}\n' + \
                '\t' + '0.008,                                  !- Zone Heating Design Supply Air Humidity Ratio {kgWater/kgDryAir}\n' + \
                '\t' + zone.name + 'OutdoorAirCntrl' + ',        !- Design Specification Outdoor Air Object Name\n' + \
                '\t' + ',                                       !- Zone Heating Sizing Factor\n' + \
                '\t' + ',                                       !- Zone Cooling Sizing Factor\n' + \
                '\t' + 'DesignDay,                              !- Cooling Design Air Flow Method\n' + \
                '\t' + '0,                                      !- Cooling Design Air Flow Rate {m3/s}\n' + \
                '\t' + '0.000762,                               !- Cooling Minimum Air Flow per Zone Floor Area {m3/s-m2}\n' + \
                '\t' + '0,                                      !- Cooling Minimum Air Flow {m3/s}\n' + \
                '\t' + '0,                                      !- Cooling Minimum Air Flow Fraction\n' + \
                '\t' + 'DesignDay,                              !- Heating Design Air Flow Method\n' + \
                '\t' + '0,                                      !- Heating Design Air Flow Rate {m3/s}\n' + \
                '\t' + '0.002032,                               !- Heating Maximum Air Flow per Zone Floor Area {m3/s-m2}\n' + \
                '\t' + '0.1415762,                              !- Heating Maximum Air Flow {m3/s}\n' + \
                '\t' + '0.3,                                    !- Heating Maximum Air Flow Fraction\n' + \
                '\t' + ',       !- Design Specification Zone Air Distribution Object Name\n' + \
                '\t' + 'No;                                     !- Account for Dedicated Outdoor Air System\n'
            return zoneSizeStr
        else:
            return "\n"
    
    def EPSiteLocation(self, epw_file):
        epwfile = open(epw_file,"r")
        headline = epwfile.readline()
        csheadline = headline.split(',')
        locName = csheadline[1]+'\t'+csheadline[3]
        lat = csheadline[-4]
        lngt = csheadline[-3]
        timeZone = csheadline[-2]
        elev = csheadline[-1][:-1]
        locationString = "\nSite:Location,\n" + \
            '\t' + locName + ',\n' + \
            '\t' + lat + ',    !Latitude\n' + \
            '\t' + lngt + ',   !Longitude\n' + \
            '\t' + timeZone + ', !Time Zone\n' + \
            '\t' + elev + ';   !Elevation\n'
        epwfile.close()
        return locationString
        
    def EPGroundTemp(self, grndTemps):		
      
        grndString = "\nSite:GroundTemperature:BuildingSurface,\n" + \
        '\t' + str(grndTemps[0]) + ',    !Jan Ground Temperature (C)\n' + \
        '\t' + str(grndTemps[1]) + ',    !Feb Ground Temperature (C)\n' + \
        '\t' + str(grndTemps[2]) + ',    !Mar Ground Temperature (C)\n' + \
        '\t' + str(grndTemps[3]) + ',    !Apr Ground Temperature (C)\n' + \
        '\t' + str(grndTemps[4]) + ',    !May Ground Temperature (C)\n' + \
        '\t' + str(grndTemps[5]) + ',    !Jun Ground Temperature (C)\n' + \
        '\t' + str(grndTemps[6]) + ',    !Jul Ground Temperature (C)\n' + \
        '\t' + str(grndTemps[7]) + ',    !Aug Ground Temperature (C)\n' + \
        '\t' + str(grndTemps[8]) + ',    !Sep Ground Temperature (C)\n' + \
        '\t' + str(grndTemps[9]) + ',    !Oct Ground Temperature (C)\n' + \
        '\t' + str(grndTemps[10]) + ',    !Nov Ground Temperature (C)\n' + \
        '\t' +  str(grndTemps[11]) + ';   !Dec Ground Temperature (C)\n'
        return grndString
    
    def EPSizingPeriod(self, weatherFilePeriod):
        sizingString = "\nSizingPeriod:WeatherFileConditionType,\n" + \
            '\t' + 'ExtremeSizing'+ weatherFilePeriod + ',\n' + \
            '\t' + weatherFilePeriod + ',    !Period Selection\n' + \
            '\t' + 'Monday' + ',   !Day of Week for Start Day\n' + \
            '\t' + 'Yes' + ', !Use Weather File Daylight Davings Period\n' + \
            '\t' + 'Yes' + ';   !Use WeatherFile Rain and Snow Indicators\n'
        return sizingString
    
    def EPSizingPeriodMonth(self, designMonth):
        sizingString = "\nSizingPeriod:WeatherFileDays,\n" + \
            '\t' + 'ExtremeSizing'+ str(designMonth) + ',\n' + \
            '\t' + str(designMonth) + ',    !Begin Month\n' + \
            '\t' + '1' + ',   !Begin Day of Month\n' + \
            '\t' + str(designMonth) + ', !End Month\n' + \
            '\t' + '28' + ', !End Day of Month\n' + \
            '\t' + '' + ', !Day of Week\n' + \
            '\t' + '' + ', !Use WeatherFile Daylight Savings Period\n' + \
            '\t' + '' + ';   !Use WeatherFile Rain and Snow Indicators\n'
        return sizingString
    
    def EPVersion(self, version = 8.1):
        return '\nVersion, ' + version + ';\n'
    
    def EPTimestep(self, timestep = 6):
        return '\nTimestep, ' + `timestep` + ';\n'
    
    def EPSizingFactor(self, heatSizFac, coolSizFac):
        return '\nSizing:Parameters,\n' + \
            '\t'+ str(heatSizFac) + ',     !- Heating Sizing Factor\n' + \
            '\t'+ str(coolSizFac) + ';     !- Cooling Sizing Factor\n'
    
    def EPShadowCalculation(self, calculationMethod = "AverageOverDaysInFrequency", frequency = 6, maximumFigures = 1500):
        return '\nShadowCalculation,\n' + \
               '\t' + calculationMethod + ',        !- Calculation Method\n' + \
               '\t' + str(frequency) + ',        !- Calculation Frequency\n' + \
               '\t' + str(maximumFigures) + ';    !- Maximum Figures in Shadow Overlap Calculation\n'
    
    def EPBuilding(self, name= 'honeybeeBldg', north = 0, terrain = 'City',
                    solarDis = 'FullInteriorAndExteriorWithReflections', maxWarmUpDays = '',
                    minWarmUpDays = ''):
                    # 'FullInteriorAndExterior'
        return '\nBuilding,\n' + \
                '\t' + name + ', !- Name\n' + \
                '\t' + `north` + ', !- North Axis {deg}\n' + \
                '\t' + terrain + ', !- Terrain\n' + \
                '\t' + ', !- Loads Convergence Tolerance Value\n' + \
                '\t' + ', !- Temperature Convergence Tolerance Value {deltaC}\n' + \
                '\t' + solarDis + ', !- Solar Distribution or maybe FullExterior\n' + \
                '\t' + maxWarmUpDays + ', !- Maximum Number of Warmup Days\n' + \
                '\t' + minWarmUpDays + '; !- Minimum Number of Warmup Days\n'
    
    def EPHeatBalanceAlgorithm(self, algorithm = 'ConductionTransferFunction'):
        return '\nHeatBalanceAlgorithm, ' + algorithm + ';\n'
    
    def EPSurfaceConvectionAlgorithm(self, insideAlg = 'TARP', outsideAlg = 'DOE-2'):
        insideStr = '\nSurfaceConvectionAlgorithm:Inside, ' + insideAlg + ';\n'
        outsideStr = '\nSurfaceConvectionAlgorithm:Outside, '+ outsideAlg + ';\n'
        return insideStr + outsideStr
    
    def EPSimulationControl(self, zoneSizing = 'No', systemSizing ='No', plantSizing = 'No',
                                runForSizing = 'No', runForWeather = 'Yes'):
        booleanToText = {
                         True : "Yes",
                         False: "No",
                         "Yes": "Yes",
                         "No" : "No"
                         }
                         
        return '\nSimulationControl,\n' + \
                '\t' + booleanToText[zoneSizing] + ',    !- Do Zone Sizing Calculation\n' + \
                '\t' + booleanToText[systemSizing] + ',  !- Do System Sizing Calculation\n' + \
                '\t' + booleanToText[plantSizing] + ',   !- Do Plant Sizing Calculation\n' + \
                '\t' + booleanToText[runForSizing] + ',  !- Run Simulation for Sizing Periods\n' + \
                '\t' + booleanToText[runForWeather] + '; !- Run Simulation for Weather File Run Periods\n'
    
    def EPRunPeriod(self, name = 'annualRun', stDay = 1, stMonth = 1, endDay = 31, endMonth = 12, startDayOfWeek = 'UseWeatherFile'):
        if startDayOfWeek == None:
            startDayOfWeek = 'UseWeatherFile'
        
        return '\nRunPeriod,\n' + \
               '\t' + name + ',    !- Name\n' + \
               '\t' + `stMonth` + ',   !- Begin Month\n' + \
               '\t' + `stDay` + ',    !- Begin Day of Month\n' + \
               '\t' + `endMonth` + ', !- End Month\n' + \
               '\t' + `endDay` + ',   !- End Day of Month\n' + \
               '\t' + startDayOfWeek + ',   !- Day of Week for Start Day\n' + \
               '\t' + 'Yes,              !- Use Weather File Holidays and Special Days\n' + \
               '\t' + 'Yes,              !- Use Weather File Daylight Saving Period\n' + \
               '\t' + 'No,               !- Apply Weekend Holiday Rule\n' + \
               '\t' + 'Yes,              !- Use Weather File Rain Indicators\n' + \
               '\t' + 'Yes;              !- Use Weather File Snow Indicators\n'
    
    def EPHoliday(self, date, count):
        
        return '\nRunPeriodControl:SpecialDays,\n' + \
                '\t' + 'Holiday' + str(count) + ',  !- Name\n' + \
                '\t' + date.split(' ' )[0] + '/' + date.split(' ')[1] + ',  !- Date\n' + \
                '\t' + '1' + ',  !- Duration\n' + \
                '\t' + 'Holiday' + ';  !- Special Day Type\n'
    
    def EPGeometryRules(self, stVertexPos = 'LowerLeftCorner', direction = 'CounterClockWise', coordinateSystem = 'Relative'):
        return '\nGlobalGeometryRules,\n' + \
                '\t' + stVertexPos + ',         !- Starting Vertex Position\n' + \
                '\t' + direction + ',        !- Vertex Entry Direction\n' + \
                '\t' + coordinateSystem + ',                !- Coordinate System\n' + \
                '\t' + 'Relative' + ',                !- Daylighting Ref Point Coordinate System\n' + \
                '\t' + 'Relative' + ';                !- Rectangular Surface Coordinate System\n'

    def EPZoneInfiltration(self, zone, zoneListName = None):
        """ Methods: 
            0: Flow/Zone =&gt; Design Flow Rate -- simply enter Design Flow Rate
            1: Flow/Area =&gt; Flow per Zone Floor Area - Value * Floor Area (zone) = Design Flow Rate
            2: Flow/ExteriorArea =&gt; Flow per Exterior Surface Area - Value * Exterior Surface Area (zone) = Design Flow Rate
            3: Flow/ExteriorWallArea =&gt; Flow per Exterior Surface Area - Value * Exterior Wall Surface Area (zone) = Design Flow Rate
            4: AirChanges/Hour =&gt; Air Changes per Hour - Value * Floor Volume (zone) adjusted for m3/s = Design Volume Flow Rate "Idesign" in Equation is the result.
        """
        if zoneListName == None:
            zoneListName = zone.name
        
        name = zoneListName + "_Infiltration"
        
        # Rest of the methods are not available from the interface right now
        scheduleName = zone.infiltrationSchedule
        if scheduleName.lower().endswith(".csv"):
            # find filebased schedule name
            scheduleName = self.fileBasedSchedules[scheduleName.upper()]
        
        method = 1 
        value = zone.infiltrationRatePerArea
        
        methods = {0: 'Flow/Zone',
                   1: 'Flow/Area',
                   2: 'Flow/ExteriorArea',
                   3: 'Flow/ExteriorWallArea',
                   4: 'AirChanges/Hour'}
        
        designFlowRate = ''
        flowPerZoneArea = ''
        flowPerExteriorArea = ''
        flowPerExteriorWallArea = ''
        airChangePerHour = ''
        
        if method == 0: designFlowRate = `value`
        elif method == 1: flowPerZoneArea = `value`
        elif method == 2: flowPerExteriorArea = `value`
        elif method == 3: flowPerExteriorArea = `value`
        elif method == 4: airChangePerHour = `value`
        
        return '\nZoneInfiltration:DesignFlowRate,\n' + \
                '\t' + name + ',  !- Name\n' + \
                '\t' + zoneListName + ',  !- Zone or ZoneList Name\n' + \
                '\t' + scheduleName + ',  !- Schedule Name\n' + \
                '\t' + methods[method] + ',  !- Design Flow Rate Calculation Method\n' + \
                '\t' + designFlowRate + ',   !- Design Flow Rate {m3/s}\n' + \
                '\t' + flowPerZoneArea + ',  !- Flow per Zone Floor Area {m3/s-m2}\n' + \
                '\t' + flowPerExteriorArea + ', !- Flow per Exterior Surface Area {m3/s-m2}\n' + \
                '\t' + airChangePerHour + ',    !- Air Changes per Hour\n' + \
                '\t,                        !- Constant Term Coefficient\n' + \
                '\t,                        !- Temperature Term Coefficient\n' + \
                '\t,                        !- Velocity Term Coefficient\n' + \
                '\t;                        !- Velocity Squared Term Coefficient\n'
    
    def EPZoneAirMixing(self, zone, zoneMixName, mixFlowRate, objCount):
        
        if zone.mixAirFlowSched[objCount].upper() == 'ALWAYS ON':
            mixingSched = 'ALWAYS ON'		
        elif zone.mixAirFlowSched[objCount].upper().endswith('CSV'):		
            mixingSchedFileName = os.path.basename(zone.mixAirFlowSched[objCount])		
            mixingSched = "_".join(mixingSchedFileName.split(".")[:-1])		
        else: mixingSched = zone.mixAirFlowSched[objCount]
        
        return '\nZoneMixing,\n'+\
            '\t' + zone.name + zoneMixName + 'AirMix' + str(objCount) + ',  !- Name\n' + \
            '\t' + zone.name + ',  !- Zone Name\n' + \
            '\t' + mixingSched + ',  !- Schedule Name\n' + \
            '\t' + 'Flow/Zone' + ',  !- Design Flow Rate Calculation Method\n' + \
            '\t' + str(mixFlowRate) + ',   !- Design Flow Rate {m3/s}\n' + \
            '\t' + ',  !- Flow per Zone Floor Area {m3/s-m2}\n' + \
            '\t' + ', !- Flow per Exterior Surface Area {m3/s-m2}\n' + \
            '\t' + ',    !- Air Changes per Hour\n' + \
            '\t' + zoneMixName  + ',     !- Source Zone Name\n' + \
            '\t' + '0'  + ',     !- Delta Temperature\n' + \
            '\t,                        !- Delta Temperature Schedule Name\n' + \
            '\t,                        !- Minimum Zone Temperature Schedule Name\n' + \
            '\t,                        !- Maximum Zone Temperature Schedule Name\n' + \
            '\t,                        !- Minimum Source Zone Temperature Schedule Name\n' + \
            '\t,                        !- Maximum Source Zone Temperature Schedule Name\n' + \
            '\t,                        !- Minimum Outdoor Temperature Schedule Name\n' + \
            '\t;                        !- Maximum Outdoor Temperature Schedule Name\n'
    
    def EPNatVentSimple(self, zone, natVentCount):
        if zone.natVentSchedule[natVentCount] == None: natVentSched = 'ALWAYS ON'
        elif zone.natVentSchedule[natVentCount].upper().endswith('CSV'):
            natVentSchedFileName = os.path.basename(zone.natVentSchedule[natVentCount])
            natVentSched = "_".join(natVentSchedFileName.split(".")[:-1])
        else: natVentSched = zone.natVentSchedule[natVentCount]
        
        return '\nZoneVentilation:WindandStackOpenArea,\n' + \
                '\t' + zone.name + 'NatVent' + str(natVentCount) + ',  !- Name\n' + \
                '\t' + zone.name + ',  !- Zone Name\n' + \
                '\t' + str(zone.windowOpeningArea[natVentCount]) + ',  !- Opening Area\n' + \
                '\t' + natVentSched + ',  !- Nat Vent Schedule\n' + \
                '\t' + str(zone.natVentWindDischarge[natVentCount]) + ',   !- Opening Effectiveness\n' + \
                '\t' + str(zone.windowAngle[natVentCount]) + ',  !- Effective Angle\n' + \
                '\t' + str(zone.windowHeightDiff[natVentCount]) + ', !- Height Difference\n' + \
                '\t' + str(zone.natVentStackDischarge[natVentCount]) + ',    !- Discharge Coefficient for Opening\n' + \
                '\t' + str(zone.natVentMinIndoorTemp[natVentCount])  + ',     !- Minimum Indoor Temperature\n' + \
                '\t' + ',     !- Minimum Indoor Temperature Shcedule Name\n' + \
                '\t' + str(zone.natVentMaxIndoorTemp[natVentCount])  + ',     !- Maximum Indoor Temperature\n' + \
                '\t' + ',     !- Maximum Indoor Temperature Shcedule Name\n' + \
                '\t' + str(zone.natVentDeltaTemp[natVentCount])  + ',     !- Delta Temperature\n' + \
                '\t' + ',     !- Delta Temperature Shcedule Name\n' + \
                '\t' + str(zone.natVentMinOutdoorTemp[natVentCount])  + ',     !- Minimum Outdoor Temperature\n' + \
                '\t' + ',     !- Minimum Outdoor Temperature Shcedule Name\n' + \
                '\t' + str(zone.natVentMaxOutdoorTemp[natVentCount])  + ',     !- Maximum Outdoor Temperature\n' + \
                '\t' + ',     !- Maximum Outdoor Temperature Shcedule Name\n' + \
                '\t' + '40' + ';                        !- Maximum Wind Speed\n'
    
    def EPNatVentFan(self, zone, natVentCount):
        if zone.natVentSchedule[natVentCount] == None: natVentSched = 'ALWAYS ON'
        else:
            natVentSchedFileName = os.path.basename(zone.natVentSchedule[natVentCount])
            natVentSched = "_".join(natVentSchedFileName.split(".")[:-1])
        
        return '\nZoneVentilation:DesignFlowRate,\n' + \
                '\t' + zone.name + 'NatVent' + str(natVentCount) + ',  !- Name\n' + \
                '\t' + zone.name + ',  !- Zone Name\n' + \
                '\t' + natVentSched + ',  !- Nat Vent Schedule\n' + \
                '\t' + 'Flow/Zone' + ',  !- Design Flow Rate Calculation Method\n' + \
                '\t' + str(zone.fanFlow[natVentCount]) + ',   !- Design flow rate m3/s\n' + \
                '\t' + ',  !- Design flow rate per floor area\n' + \
                '\t' + ', !- Flow Rate per person\n' + \
                '\t' + ',    !- Air chancges per hour\n' + \
                '\t' + 'Intake' + ',  !- Ventilation Type\n' + \
                '\t' + str(zone.FanPressure[natVentCount]) + ',   !- Fan Pressure Rise (Pa)\n' + \
                '\t' + str(zone.FanEfficiency[natVentCount]) + ',   !- Fan Efficiency (Pa)\n' + \
                '\t' + '1' + ',  !- Constant Term Coefficient\n' + \
                '\t' + '0' + ',  !- Temperature Term Coefficient\n' + \
                '\t' + '0' + ',  !- Velocity Term Coefficient\n' + \
                '\t' + '0' + ',  !- Velocity Squared Term Coefficient\n' + \
                '\t' + str(zone.natVentMinIndoorTemp[natVentCount])  + ',     !- Minimum Indoor Temperature\n' + \
                '\t' + ',     !- Minimum Indoor Temperature Shcedule Name\n' + \
                '\t' + str(zone.natVentMaxIndoorTemp[natVentCount])  + ',     !- Maximum Indoor Temperature\n' + \
                '\t' + ',     !- Maximum Indoor Temperature Shcedule Name\n' + \
                '\t'  + str(zone.natVentDeltaTemp[natVentCount])  + ',     !- Delta Temperature\n' + \
                '\t' + ',     !- Delta Temperature Shcedule Name\n' + \
                '\t' + str(zone.natVentMinOutdoorTemp[natVentCount])  + ',     !- Minimum Outdoor Temperature\n' + \
                '\t' + ',     !- Minimum Outdoor Temperature Shcedule Name\n' + \
                '\t' + str(zone.natVentMaxOutdoorTemp[natVentCount])  + ',     !- Maximum Outdoor Temperature\n' + \
                '\t' + ',     !- Maximum Outdoor Temperature Shcedule Name\n' + \
                '\t' + '40' + ';                        !- Maximum Wind Speed\n'
    
    def EPZoneElectricEquipment(self, zone, zoneListName = None):
            
        #name = 'largeOfficeElectricEquipment', zoneListName ='largeOffices', method = 2, value = 5.8125141276385044,
        #               scheduleName = 'Large Office_BLDG_EQUIP_SCH', endUseSub = 'ElectricEquipment'):
        
        """
        Methods:
            0: EquipmentLevel =&gt; Equipment Level -- simply enter watts of equipment
            1: Watts/Area =&gt; Watts per Zone Floor Area -- enter the number to apply.  Value * Floor Area = Equipment Level
            2: Watts/Person =&gt; Watts per Person -- enter the number to apply.  Value * Occupants = Equipment Level
        """
        
        if zoneListName == None:
            zoneListName = zone.name
        name = zoneListName + 'ElectricEquipment'
        method = 1
        value = zone.equipmentLoadPerArea
        scheduleName = zone.equipmentSchedule
        if scheduleName.lower().endswith(".csv"):
            # find filebased schedule name
            scheduleName = self.fileBasedSchedules[scheduleName.upper()]
            
        endUseSub = 'ElectricEquipment'

        methods = {0: 'EquipmentLevel',
           1: 'Watts/Area',
           2: 'Watts/Person'}

        designLevel = ''
        wattPerZoneArea = ''
        wattPerPerson = ''
        
        if method == 0: designLevel = `value`
        elif method == 1: wattPerZoneArea = `value`
        elif method == 2: wattPerPerson = `value`
        
        return '\nElectricEquipment,\n' + \
        '\t' + name + ',  !- Name\n' + \
        '\t' + zoneListName + ',  !- Zone or ZoneList Name\n' + \
        '\t' + scheduleName + ',  !- Schedule Name\n' + \
        '\t' + methods[method] + ', !- Design Level Calculation Method\n' + \
        '\t' + designLevel + ', !- Design Level {W}\n' + \
        '\t' + wattPerZoneArea + ', !- Watts per Zone Floor Area {W/m2}\n' + \
        '\t' + wattPerPerson + ',   !- Watts per Person {W/person}\n' + \
        '\t,                        !- Fraction Latent\n' + \
        '\t,                        !- Fraction Radiant\n' + \
        '\t,                        !- Fraction Lost\n' + \
        '\t' + endUseSub + ';       !- End-Use Subcategory\n'

    def EPZoneLights(self, zone, zoneListName = None):
        
        #name = 'largeOfficeLights', zoneListName ='largeOffices', method = 0, value = 9.687523546064174,
        #scheduleName = 'Large Office_BLDG_LIGHT_SCH', lightingLevel = 250):
        
        if zoneListName == None:
                zoneListName = zone.name
        name = zoneListName + 'OfficeLights'
        value = zone.lightingDensityPerArea
        scheduleName = zone.lightingSchedule
        
        if scheduleName.lower().endswith(".csv"):
            # find filebased schedule name
            scheduleName = self.fileBasedSchedules[scheduleName.upper()]
        
        method = 0
        lightingLevel = ""
        """
        Methods:
            0: Watts/Area =&gt; Watts per Zone Floor Area -- enter the number to apply.  Value * Floor Area = Equipment Level
            1: Watts/Person =&gt; Watts per Person -- enter the number to apply.  Value * Occupants = Equipment Level
        """
        
        methods = {0: 'Watts/Area',
                   1: 'Watts/Person',
                   2: 'LightingLevel'}
        
        wattPerZoneArea = ''
        wattPerPerson = ''
        
        if method == 0: wattPerZoneArea = `value`
        elif method == 1: wattPerPerson = `value`
            
        return '\nLights,\n' + \
        '\t' + name + ',  !- Name\n' + \
        '\t' + zoneListName + ',  !- Zone or ZoneList Name\n' + \
        '\t' + scheduleName + ',  !- Schedule Name\n' + \
        '\t' + methods[method] + ',       !- Design Level Calculation Method\n' + \
        '\t' + lightingLevel + ',       !- Lighting Level {W}\n' + \
        '\t' + wattPerZoneArea + ',       !- Watts per Zone Floor Area {W/m2}\n' + \
        '\t' + wattPerPerson + ',         !- Watts per Person {W/person}\n' + \
        '\t,                       !- Return Air Fraction\n' + \
        '\t,                       !- Fraction Radiant\n' + \
        '\t;                       !- Fraction Visible\n'

    
    def EPZonePeople(self, zone, zoneListName =None):
        
        # , method = 1, value = 0.053819575255912078,
        #scheduleName = 'Large Office_BLDG_OCC_SCH', activityScheduleName = 'Large Office_ACTIVITY_SCH',
        # fractionRadiant = 0.3, sensibleHeatFraction = 'autocalculate'):
            
        if zoneListName == None:
                zoneListName = zone.name
        name = zoneListName + 'OfficePeople'
        method = 1
        value = zone.numOfPeoplePerArea
        scheduleName = zone.occupancySchedule
        if scheduleName.lower().endswith(".csv"):
            # find filebased schedule name
            scheduleName = self.fileBasedSchedules[scheduleName.upper()]
        
        activityScheduleName = zone.occupancyActivitySch
        if activityScheduleName.lower().endswith(".csv"):
            # find filebased schedule name
            activityScheduleName = self.fileBasedSchedules[activityScheduleName.upper()]
        
        fractionRadiant = 0.3
        sensibleHeatFraction = ''
        
        """
        Methods:
            0: People -- simply enter number of occupants.
            1: People per Zone Floor Area -- enter the number to apply. Value * Floor Area = Number of people
            2: Zone Floor Area per Person -- enter the number to apply. Floor Area / Value = Number of people
        """
        if type(fractionRadiant) is int or type(fractionRadiant) is float: fractionRadiant = `fractionRadiant`
        if type(sensibleHeatFraction) is int or type(sensibleHeatFraction) is float: sensibleHeatFraction = `sensibleHeatFraction`
        
        methods = {0: 'People',
                   1: 'People/Area',
                   2: 'Area/Person'}
        
        numOfPeople = ''
        peoplePerArea = ''
        areaPerPerson = ''
        
        if method == 0: numOfPeople = `value`
        elif method == 1: peoplePerArea = `value`
        elif method == 2: areaPerPerson = `value`
        
        return '\nPeople,\n' + \
        '\t' + name + ',  !- Name\n' + \
        '\t' + zoneListName + ',  !- Zone or ZoneList Name\n' + \
        '\t' + scheduleName + ',  !- Number of People Schedule Name\n' + \
        '\t' + methods[method] + ', !- Number of People Calculation Method\n' + \
        '\t' + numOfPeople + ', !- Number of People\n' + \
        '\t' + peoplePerArea + ',  !- People per Zone Floor Area {person/m2}\n' + \
        '\t' + areaPerPerson + ',  !- Zone Floor Area per Person {m2/person}\n' + \
        '\t' + fractionRadiant + ',     !- Fraction Radiant\n' + \
        '\t' + sensibleHeatFraction + ',!- Sensible Heat Fraction\n' + \
        '\t' + activityScheduleName + ';!- Activity Level Schedule Name\n'
    
    def EPMaterialStr(self, materialName):
        materialData = None
        materialName = materialName.strip()
        if materialName in sc.sticky ["honeybee_windowMaterialLib"].keys():
            materialData = sc.sticky ["honeybee_windowMaterialLib"][materialName]
        elif materialName in sc.sticky ["honeybee_materialLib"].keys():
            materialData = sc.sticky ["honeybee_materialLib"][materialName]
        
        if materialData!=None:
            numberOfLayers = len(materialData.keys())
            materialStr = materialData[0] + ",\n"
            
            # add the name
            materialStr =  materialStr + "  " + materialName + ",   !- name\n"
            for layer in range(1, numberOfLayers):
                if layer &lt; numberOfLayers-1:
                    materialStr =  materialStr + "  " + str(materialData[layer][0]) + ",   !- " +  materialData[layer][1] + "\n"
                else:
                    materialStr =  materialStr + "  " + str(materialData[layer][0]) + ";   !- " +  materialData[layer][1] + "\n\n"
            
            return materialStr
        else:
            warning = "Failed to find " + materialName + " in library."
            print warning
            ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warning)
            return None
       
    def EPConstructionStr(self, constructionName):
        constructionData = None
        if constructionName in sc.sticky ["honeybee_constructionLib"].keys():
            constructionData = sc.sticky ["honeybee_constructionLib"][constructionName]
        
        if constructionData!=None:
            materials = []
            numberOfLayers = len(constructionData.keys())
            constructionStr = constructionData[0] + ",\n"
            # add the name
            constructionStr =  constructionStr + "  " + constructionName + ",   !- name\n"
            
            for layer in range(1, numberOfLayers):
                if layer &lt; numberOfLayers-1:
                    constructionStr =  constructionStr + "  " + constructionData[layer][0] + ",   !- " +  constructionData[layer][1] + "\n"
                else:
                    constructionStr =  constructionStr + "  " + constructionData[layer][0] + ";   !- " +  constructionData[layer][1] + "\n\n"
                materials.append(constructionData[layer][0])
                
            return constructionStr, materials
        else:
            warning = "Failed to find " + constructionName + " in library."
            print warning
            ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warning)
            return None, None
            
    def EPSCHStr(self, scheduleName):
        scheduleData = None
        scheduleName= scheduleName.upper()
        if scheduleName.lower().endswith(".csv"):
            # check if the schedule is already created
            if scheduleName.upper() in self.fileBasedSchedules.keys(): return "\n"
            # set up default values
            schTypeLimitStr = "\n"
            schTypeLimitName = "Fraction"
            numOfHours = 8760
            
            # create schedule object based on file
            # find file name and use it as schedule name
            scheduleFileName = os.path.basename(scheduleName)
            scheduleObjectName = "_".join(scheduleFileName.split(".")[:-1])
            
            # copy schedule file into working dir
            scheduleNewAddress = os.path.join(self.workingDir, scheduleFileName)
            shutil.copyfile(scheduleName, scheduleNewAddress)
            
            # put them as key, value so I can find the new name when write schedule
            self.fileBasedSchedules[scheduleName.upper()] = scheduleObjectName
            
            # get the inputs if the schedule is generated by Honeybee
            with open(scheduleName, "r") as schFile:
                for lineCount, line in enumerate(schFile):
                    if lineCount == 3: break
                    elif lineCount == 0:
                        # try to collect information related to type limit
                        lineSeg = line.split(",")
                        if not lineSeg[0].startswith("Honeybee"): break
                        lowerLimit, upperLimit, numericType, unitType = lineSeg[1:5]
                        
                        # prepare the schedulTypeLimitObject
                        schTypeLimitName = os.path.basename(scheduleName).lower(). \
                                           replace(".", "").split("csv")[0] + "TypeLimit"
                        
                        schTypeLimitStr = "ScheduleTypeLimits,\t!Schedule Type\n" + \
                                          schTypeLimitName + ",\t! Name\n" + \
                                          lowerLimit.strip() + ",\t!- Lower Limit Value\n" + \
                                          upperLimit.strip() + ",\t!- Upper Limit Value\n" + \
                                          numericType.strip() + ",\t!- Numeric Type\n" + \
                                          unitType.strip() + ";\t!- Unit Type\n\n"
                    elif lineCount == 2:
                        # check timestep
                        try: numOfHours *= int(line.split(",")[0])
                        except: pass
            
            # scheduleStr writes the section Schedule:File in the EnergyPlus file
            # for custom schedules.
            scheduleStr = schTypeLimitStr + \
                          "Schedule:File,\n" + \
                          scheduleObjectName + ",\t!- Name\n" + \
                          schTypeLimitName + ",\t!- Schedule Type Limits Name\n" + \
                          scheduleNewAddress + ",\t!- File Name\n" + \
                          "5,\t!- Column Number\n" + \
                          "4,\t!- Rows To Skip\n" + \
                          str(int(numOfHours)) + ",\t!- Hours of Data\n" + \
                          "Comma;\t!- Column Separator\n"

            return scheduleStr
            
        if scheduleName in sc.sticky ["honeybee_ScheduleLib"].keys():
            scheduleData = sc.sticky ["honeybee_ScheduleLib"][scheduleName]
        elif scheduleName in sc.sticky ["honeybee_ScheduleTypeLimitsLib"].keys():
            scheduleData = sc.sticky["honeybee_ScheduleTypeLimitsLib"][scheduleName]
        
        if scheduleData!=None:
            numberOfLayers = len(scheduleData.keys())
            scheduleStr = scheduleData[0] + ",\n"
            if numberOfLayers == 1:
                return scheduleStr  + "  " +  scheduleName + ";   !- name\n\n"
            # add the name
            scheduleStr =  scheduleStr  + "  " +  scheduleName + ",   !- name\n"
            
            for layer in range(1, numberOfLayers):
                if layer &lt; numberOfLayers - 1:
                    scheduleStr =  scheduleStr + "  " + scheduleData[layer][0] + ",   !- " +  scheduleData[layer][1] + "\n"
                else:
                    scheduleStr =  scheduleStr + "  " + str(scheduleData[layer][0]) + ";   !- " +  scheduleData[layer][1] + "\n\n"
            return scheduleStr
    
    def requestSrfeio(self):
        return '\nOutput:Surfaces:List,\n' + \
        '\t' + 'Details;                 !- Report Type' + '\n'
    
    def requestVarDict(self):
        return '\nOutput:VariableDictionary,\n' + \
        '\t' + 'regular;                 !- Key Field' + '\n'
        
    def EarthTube(self,zone):
        if zone.ETschedule.upper().endswith('CSV'):
            # For custom schedule
            scheduleFileName = os.path.basename(zone.ETschedule)
            scheduleObjectName = "_".join(scheduleFileName.split(".")[:-1]).upper()
            earthTubeSched = scheduleObjectName
           
        else: earthTubeSched = zone.ETschedule
    
        return '\nZoneEarthtube,\n' + \
            '\t' + zone.name + ',\t!- Zone Name\n' + \
            '\t' + str(earthTubeSched) + ',\t!- Schedule Name\n'+\
            '\t' + str(zone.design_flow_rate) + ',\t!- Design Flow Rate {m3/s}\n'+\
            '\t' + str(zone.mincooltemp) + ',\t!- Minimum Zone Temperature when Cooling {C}\n'+\
            '\t' + str(zone.maxheatingtemp) + ',\t!- Maximum Zone Temperature when Heating {C}\n'+\
            '\t' + str(zone.delta_temp) + ',\t!- Delta Temperature {deltaC}\n'+\
            '\t' + str(zone.et_type) + ',\t!- Earthtube Type\n'+\
            '\t' + str(zone.fanprise) + ',\t!- Fan Pressure Rise {Pa}\n'+\
            '\t' + str(zone.efficiency) + ',\t!- Fan Total Efficiency\n'+\
            '\t' + str(zone.piperadius) + ',\t!- Pipe Radius {m}\n'+\
            '\t' + str(zone.thick) + ',\t!- Pipe Thickness {m}\n'+\
            '\t' + str(zone.length) + ',\t!- Pipe Length {m}\n'+\
            '\t' + str(zone.thermal_k) + ',\t!- Pipe Thermal Conductivity {W/m-K}\n'+\
            '\t' + str(zone.pipedepth) + ',\t!- Pipe Depth Under Ground Surface {m}\n'+\
            '\t' + str(zone.soil_con) + ',\t!- Soil Condition\n'+\
            '\t' + str(zone.soil_avannual) +',\t!- Average Soil Surface Temperature {C}\n'+\
            '\t' + str(zone.soil_amplitude) + ',\t!- Amplitude of Soil Surface Temperature {C}\n'+\
            '\t' + str(zone.soil_phaseconstant) + ',\t!- Phase Constant of Soil Surface Temperature {days}\n'+\
            '\t' + zone.termflow + ',\t!- Constant Term Flow Coefficient\n'+\
            '\t' + zone.tempflowco + ',\t!- Temperature Term Flow Coefficient\n'+\
            '\t' + zone.veltermflow  + ',\t!- Velocity Term Flow Coefficient\n'+\
            '\t' + zone.velsquflow  + ';\t!- Velocity Squared Term Flow Coefficient\n'
            
    def write_PVgen(self,PVgen):
    
        return '\nGenerator:Photovoltaic,\n' + \
            '\t' + str(PVgen.name) + ',\t!- Name\n' + \
            '\t' + str(PVgen.surfacename) + ',\t!- Surface Name\n'+\
            '\t' + str(PVgen.performancetype) + ',\t!- Photovoltaic Performance Object Type\n'+\
            '\t' + str(PVgen.namePVperformobject) + ',\t!- Module Performance Name\n'+\
            '\t' + str(PVgen.integrationmode) + ',\t!- Heat Transfer Integration Mode\n'+\
            '\t' + str(PVgen.NOparallel) + ',\t!- Number of Series Strings in Parallel {dimensionless}\n'+\
            '\t' + str(PVgen.NOseries) + ';\t!- Number of Modules in Series {dimensionless}\n'
    
    
    def write_PVgenperformanceobject(self,PVgen):
        
        if PVgen.mode == 'simple':
            
            return '\nPhotovoltaicPerformance:Simple,\n' + \
                '\t' + str(PVgen.namePVperformobject) + ',\t!- Name\n' + \
                '\t' + str(PVgen.surfaceareacells) + ',\t!- Fraction of Surface Area with Active Solar Cells {dimensionless}\n'+\
                '\t' + str(PVgen.cellefficiencyinputmode) + ',\t!- Conversion Efficiency Input Mode\n'+\
                '\t' + str(PVgen.efficiency) + ',\t!- Value for Cell Efficiency if Fixed\n'+\
                '\t' + str(PVgen.schedule) + ';\t!- Efficiency Schedule Name\n'
                
        if PVgen.mode == 'sandia':
            
            # Replace name in sandia with name of the PV surface.
            for count,line in enumerate(PVgen.sandia):
                if "         !- Name" in line:
                
                    PVgen.sandia[count] = PVgen.namePVperformobject+',         !- Name'
                    
            return '\n'.join(PVgen.sandia)
            
    def simple_inverter(self,inverter):
        
        return '\nElectricLoadCenter:Inverter:Simple,\n' + \
            '\t' + str(inverter.name) + ',\t!- Name\n' + \
            '\t' + "ALWAYS ON" + ',\t!- Availability Schedule Name\n' + \
            '\t' + str(inverter.zone) + ',\t!- Zone Name\n' + \
            '\t' + "0.3" + ',\t!- Radiative Fraction\n' + \
            '\t' + str(inverter.efficiency) + ';\t!- Inverter Efficiency\n'
    
    def battery_simple(self,battery):
        
        return '\nElectricLoadCenter:Storage:Simple,\n' + \
            '\t' + str(battery.name ) + ',\t!- Name\n' + \
            '\t' + "ALWAYS ON" + ',\t!- Availability Schedule Name\n' + \
            '\t' + str(battery.zonename) + ',\t!- Zone Name\n' + \
            '\t' + "0.3" + ',\t!- Radiative Fraction for Zone Heat Gains\n' + \
            '\t' + str(battery.chargingefficiency) + ',\t!- Nominal Energetic Efficiency for Charging\n'+ \
            '\t' + str(battery.dischargingeffciency) + ',\t!- Nominal Discharging Energetic Efficiency\n'+ \
            '\t' + str(battery.batterycap ) + ',\t!- Maximum Storage Capacity {J}\n'+ \
            '\t' + str(battery.maxdischarge) + ',\t!- Maximum Power for Discharging {W}\n'+ \
            '\t' + str(battery.maxcharge) + ',\t!- Maximum Power for Charging {W}\n'+ \
            '\t' + str(battery.initalcharge) + ';\t!- Initial State of Charge {J}\n'
            
    def wind_generator(self,windgenerator):
        
        def powercoefficients(windgenerator):
            if windgenerator.powercoefficients == None:
                    
                return '\t' + ''+',\t!- Power Coefficient C1\n' + \
                    '\t' + ''+',\t!- Power Coefficient C2\n' + \
                    '\t' + ''+',\t!- Power Coefficient C3\n' + \
                    '\t' + ''+',\t!- Power Coefficient C4\n' + \
                    '\t' + ''+',\t!- Power Coefficient C5\n' + \
                    '\t' + ''+';\t!- Power Coefficient C6\n'
            else:
                
                powercoefficients = []
                
                for count,powercoefficient in enumerate(windgenerator.powercoefficients):
                    
                    if count == 5: # Last power coefficient
                        powercoefficients.append('\t' + str(powercoefficient)+';\t!- Power Coefficient C'+str(count+1)+'\n')
                    else:
                        powercoefficients.append('\t' + str(powercoefficient)+',\t!- Power Coefficient C'+str(count+1)+'\n')
                return ''.join(powercoefficients)
    
        
        return '\nGenerator:WindTurbine,\n' + \
            '\t' + str(windgenerator.name)+',\t!- Name\n' + \
            '\t' + 'Always On'+',\t!- Availability Schedule Name\n' + \
            '\t' + str(windgenerator.rotortype)+',\t!- Rotor Type\n' + \
            '\t' + str(windgenerator.powercontrol)+',\t!- Power Control\n' + \
            '\t' + str(windgenerator.rotorspeed)+',\t!- Rated Rotor Speed {rev/min}\n' + \
            '\t' + str(windgenerator.rotor_diameter)+',\t!- Rotor Diameter {m}\n' + \
            '\t' + str(windgenerator.overall_height)+',\t!- Overall Height {m}\n' + \
            '\t' + str(windgenerator.numblades)+',\t!- Number of Blades\n' + \
            '\t' + str(windgenerator.powerout)+',\t!- Rated Power {W}\n' + \
            '\t' + str(windgenerator.rated_wind_speed)+',\t!- Rated Wind Speed {m/s}\n' + \
            '\t' + str(windgenerator.cut_in_windspeed)+',\t!- Cut In Wind Speed {m/s}\n' + \
            '\t' + str(windgenerator.cut_out_windspeed)+',\t!- Cut Out Wind Speed {m/s}\n' + \
            '\t' + str(windgenerator.overall_turbine_n)+',\t!- Fraction system Efficiency\n' + \
            '\t' + str(windgenerator.max_tip_speed_ratio)+',\t!- Maximum Tip Speed Ratio\n' + \
            '\t' + str(windgenerator.max_power_coefficient)+',\t!- Maximum Power Coefficient\n' + \
            '\t' + str(windgenerator.local_av_windspeed)+',\t!- Annual Local Average Wind Speed {m/s}\n' + \
            '\t' + str(windgenerator.height_local_metrological_station)+',\t!- Height for Local Average Wind Speed {m}\n' + \
            '\t' + ''+',\t!- Blade Chord Area {m2}\n' + \
            '\t' + ''+',\t!- Blade Drag Coefficient\n' + \
            '\t' + ''+',\t!- Blade Lift Coefficient\n'+\
            powercoefficients(windgenerator)
            

    def writegeneratlorlist(self,genlistname,generators):
        
        def generatorinfo(generator,generatornumber):
            
            return '\t'+str(generator.name)+ ',\t!- Generator ' + str(generatornumber) + ' '+'Name\n'+ \
                '\t'+str(generator.type)+ ',\t!- Generator ' + str(generatornumber) + ' '+'Object Type\n'+ \
                '\t'+str(generator.powerout)+ ',\t!- Generator ' + str(generatornumber) + ' '+'Rated Electric Power Output {W}\n'+ \
                '\t'+'Always On,               !- Generator 1 Availability Schedule Name\n'+ \
                '\t'+',                        !- Generator 1 Rated Thermal to Electrical Power Ratio\n'
        
        def generatorinfofinal(generator,generatornumber):
            
            return '\t'+str(generator.name)+ ',\t!- Generator ' + str(generatornumber) + ' '+'Name\n'+ \
                '\t'+str(generator.type)+ ',\t!- Generator ' + str(generatornumber) + ' '+'Object Type\n'+ \
                '\t'+str(generator.powerout)+ ',\t!- Generator ' + str(generatornumber) + ' '+'Rated Electric Power Output {W}\n'+ \
                '\t'+'Always On,               !- Generator 1 Availability Schedule Name\n'+ \
                '\t'+';                        !- Generator 1 Rated Thermal to Electrical Power Ratio\n'
        
            # XXX change above in future so can handle schedules and thermal to electrical power ratio
            
        generatornumber = 0
        
        generatorlist = []
        
        for count,generator in enumerate(generators):
               
            generatornumber = generatornumber+1
            
            if count == (len(generators)-1): # If last generator in the generaor list need  
            
                generatorlist.append(generatorinfofinal(generator,generatornumber))
            
            else:
                generatorlist.append(generatorinfo(generator,generatornumber))
            
        return '\nElectricLoadCenter:Generators,\n' + \
            '\t' + str(genlistname) + ',\t!- Name\n' + \
            ''.join(generatorlist)
            
    def writeloadcenterdistribution(self,distribution_name,HBsystemgenerator_name,operationscheme,demandlimit,trackschedule,trackmeterschedule,busstype,inverterobject,elecstorageobject):

        if demandlimit == None:
            demandlimit = ''
        if trackschedule == None:
            demandlimit = 'Always On'
        if trackmeterschedule == None:
            trackmeterschedule = ''
        if elecstorageobject == None:
            elecstorageobject = ''
            
        if inverterobject is None:  # Note on is: is is pointing to whether inverterobject and None are the same object, is inverterobject is None they will be,# Need to use is as have overide the __eq__ operator for inverter object 
            
            # The Honeybee generation system is a wind or fuel generation system
            # meaining that elecstorageobject is also None,
            inverterobject  = ''
            
            return '\nElectricLoadCenter:Distribution,\n' + \
                '\t'+str(distribution_name)+ ',\t!- Name\n'+ \
                '\t'+str(HBsystemgenerator_name)+ ',\t!- Generator List Name\n'+ \
                '\t'+str(operationscheme)+ ',\t!- Generator Operation Scheme Type\n'+ \
                '\t'+str(demandlimit)+ ',\t!- Demand Limit Scheme Purchased Electric Demand Limit {W}\n'+ \
                '\t'+str(trackschedule)+ ',\t!- Track Schedule Name Scheme Schedule Name\n'+ \
                '\t'+str(trackmeterschedule)+ ',\t!- Track Meter Scheme Meter Name\n'+ \
                '\t'+str(busstype)+ ',\t!- Electrical Buss Type\n'+ \
                '\t'+str(inverterobject)+ ',\t!- Inverter Object Name\n'+ \
                '\t'+str(elecstorageobject)+ ',\t!- Electrical Storage Object Name\n'+\
                '\t'+''+';\t!- Transformer Object Name\n'

        else:
            
            # The generator system contains an inverter and is a Honeybee PV system, this means that
            # inverterobject is an object and contains the attribute inverterobject.name and inverterobject.replacementtime
            try:
                # If the generator system contains a battery, elecstorageobject will be a battery object and not a string,
                # thus containing the attributes elecstorageobject.name and elecstorageobject.replacementtime
                return '\nElectricLoadCenter:Distribution,\n' + \
                    '\t'+str(distribution_name)+ ',\t!- Name\n'+ \
                    '\t'+str(HBsystemgenerator_name)+ ',\t!- Generator List Name\n'+ \
                    '\t'+str(operationscheme)+ ',\t!- Generator Operation Scheme Type\n'+ \
                    '\t'+str(demandlimit)+ ',\t!- Demand Limit Scheme Purchased Electric Demand Limit {W}\n'+ \
                    '\t'+str(trackschedule)+ ',\t!- Track Schedule Name Scheme Schedule Name\n'+ \
                    '\t'+str(trackmeterschedule)+ ',\t!- Track Meter Scheme Meter Name\n'+ \
                    '\t'+str(busstype)+ ',\t!- Electrical Buss Type\n'+ \
                    '\t'+str(inverterobject.name)+ ',\t!- Inverter Object Name\n'+ \
                    '\t'+str(elecstorageobject.name)+ ',\t!- Electrical Storage Object Name\n'+\
                    '\t'+''+';\t!- Transformer Object Name\n'
            except AttributeError:
               # If the attributes .replacementtime and .name not in battery the Honeybee generation system does not contain
               # a battery and elecstorageobject = ''
                return '\nElectricLoadCenter:Distribution,\n' + \
                    '\t'+str(distribution_name)+ ',\t!- Name\n'+ \
                    '\t'+str(HBsystemgenerator_name)+ ',\t!- Generator List Name\n'+ \
                    '\t'+str(operationscheme)+ ',\t!- Generator Operation Scheme Type\n'+ \
                    '\t'+str(demandlimit)+ ',\t!- Demand Limit Scheme Purchased Electric Demand Limit {W}\n'+ \
                    '\t'+str(trackschedule)+ ',\t!- Track Schedule Name Scheme Schedule Name\n'+ \
                    '\t'+str(trackmeterschedule)+ ',\t!- Track Meter Scheme Meter Name\n'+ \
                    '\t'+str(busstype)+ ',\t!- Electrical Buss Type\n'+ \
                    '\t'+str(inverterobject.name)+ ',\t!- Inverter Object Name\n'+ \
                    '\t'+str(elecstorageobject)+ ',\t!- Electrical Storage Object Name\n'+\
                    '\t'+''+';\t!- Transformer Object Name\n'

    def writegeneration_system_financialdata(self,financialdata):
        """This function takes the financial data and writes it to the IDF in such a way so that the
        Honeybee_Read_generation_system_results can read it this is why the list is called newfinancialdata"""
        
        
        newfinancialdata = []
        # Add !!! in front of all data so EnergyPlus views it as comments
        # and it can be easily read
        
        newfinancialdata.append('\n')
        newfinancialdata.append('!########## Facility generation system financial data ##########'+ '\n')
        newfinancialdata.append('\n')
        
        # Create a header for the data in the IDF 
        newfinancialdata.append('!!!!Y Honeybee generation system financial data'+'\n')
        
        for dataitem in financialdata:

            if dataitem.find('Honeybee system generator ') != -1:
                
                # Create a header for the financial data of each Honeybee generator system
                
                newfinancialdata.append('!!!X Honeybee generation system name - ' + str(dataitem.replace('Honeybee system generator ',''))+'\n')
            
            else:
                
                # Add the financial data for each Honeybee generator system under the header
                
                newfinancialdata.append('!!!Z '+str(dataitem)+'\n')
                
        newfinancialdata.append('\n')

        return newfinancialdata
        

class RunIDF(object):
    
    def writeBatchFile(self, workingDir, idfFileName, epwFileAddress, EPDirectory = 'C:\\EnergyPlusV8-1-0', runInBackground = False):
        
        workingDrive = workingDir[:2]
        
        if idfFileName.EndsWith('.idf'):  shIdfFileName = idfFileName.replace('.idf', '')
        else: shIdfFileName = idfFileName
        
        if not workingDir.EndsWith('\\'): workingDir = workingDir + '\\'
        
        fullPath = workingDir + shIdfFileName
        folderName = workingDir.replace( (workingDrive + '\\'), '')
        batchStr = workingDrive + '\ncd\\' +  folderName + '\n"' + EPDirectory + \
                '\\Epl-run" ' + fullPath + ' ' + fullPath + ' idf ' + epwFileAddress + ' EP N nolimit N N 0 Y'
        
        batchFileAddress = fullPath +'.bat'
        batchfile = open(batchFileAddress, 'w')
        batchfile.write(batchStr)
        batchfile.close()
        
        #execute the batch file
        if runInBackground:		
            self.runCmd(batchFileAddress)		
        else:		
            os.system(batchFileAddress)		
    
    def runCmd(self, batchFileAddress, shellKey = True):
        batchFileAddress.replace("\\", "/")		
        p = subprocess.Popen(["cmd /c ", batchFileAddress], shell=shellKey, stdout=subprocess.PIPE, stderr=subprocess.PIPE)		
        out, err = p.communicate()


sc.sticky["honeybee_WriteIDF"] = WriteIDF
sc.sticky["honeybee_RunIDF"] = RunIDF


def main(north, epwFileAddress, EPParameters, analysisPeriod, HBZones, HBContext,
         simulationOutputs, writeIdf, runEnergyPlus, workingDir, idfFileName,
         meshSettings):
    
    # import the classes
    w = gh.GH_RuntimeMessageLevel.Warning
    
    if not sc.sticky.has_key('ladybug_release')and sc.sticky.has_key('honeybee_release'):
        print "You should first let both Ladybug and Honeybee to fly..."
        ghenv.Component.AddRuntimeMessage(w, "You should first let both Ladybug and Honeybee to fly...")
        return -1
    
    units = sc.doc.ModelUnitSystem
    if `units` != 'Rhino.UnitSystem.Meters':
        msg = "Currently the EnergyPlus component only works in meters. Change the units to Meters and try again!"
        ghenv.Component.AddRuntimeMessage(w, msg)
        return -1
    
    try:
        if not sc.sticky['honeybee_release'].isCompatible(ghenv.Component): return -1
        if sc.sticky['honeybee_release'].isInputMissing(ghenv.Component): return -1
    except:
        warning = "You need a newer version of Honeybee to use this compoent." + \
        " Use updateHoneybee component to update userObjects.\n" + \
        "If you have already updated userObjects drag Honeybee_Honeybee component " + \
        "into canvas and try again."
        ghenv.Component.AddRuntimeMessage(w, warning)
        return -1

    try:
        if not sc.sticky['ladybug_release'].isCompatible(ghenv.Component): return -1
    except:
        warning = "You need a newer version of Ladybug to use this compoent." + \
        " Use updateLadybug component to update userObjects.\n" + \
        "If you have already updated userObjects drag Ladybug_Ladybug component " + \
        "into canvas and try again."
        ghenv.Component.AddRuntimeMessage(w, warning)
        return -1
    
    # make sure EnergyPlus folder is found
    EPPath = sc.sticky["honeybee_folders"]["EPPath"]
    
    if EPPath == None:
        # give a warning to the user
        
        msg= "Honeybee cannot find a compatible EnergyPlus folder on your system.\n" + \
             "Make sure you have EnergyPlus installed on your system.\n" + \
             "You won't be able to run energy simulations without EnergyPlus.\n" +\
             "Check Honeybee_Honeybee component for more information."
        
        print msg
        ghenv.Component.AddRuntimeMessage(w, msg)
        return -1
        
    # make sure epw file address is correct
    if not epwFileAddress.endswith(epwFileAddress) or not os.path.isfile(epwFileAddress):
        msg = "Wrong weather file!"
        print msg
        ghenv.Component.AddRuntimeMessage(w, msg)
        return -1
    else:
        illegalChar = ["&amp;", "%", "'", "^", "=", ","] # based on EP error message
        for c in illegalChar:
            if c in epwFileAddress:
                msg = "Illegal charecter in weather file path: " + c
                print msg
                ghenv.Component.AddRuntimeMessage(w, msg)
                return -1
        
    
    lb_preparation = sc.sticky["ladybug_Preparation"]()
    lb_comfortModels = sc.sticky["ladybug_ComfortModels"]()
    hb_reEvaluateHBZones= sc.sticky["honeybee_reEvaluateHBZones"]
    hb_hive = sc.sticky["honeybee_Hive"]()
    hb_EPScheduleAUX = sc.sticky["honeybee_EPScheduleAUX"]()
    hb_EPPar = sc.sticky["honeybee_EPParameters"]()
    hb_EPObjectsAux = sc.sticky["honeybee_EPObjectsAUX"]()
    
    northAngle, northVector = lb_preparation.angle2north(north)
    stMonth, stDay, stHour, endMonth, endDay, endHour = lb_preparation.readRunPeriod(analysisPeriod, True)
    conversionFac = lb_preparation.checkUnits()
    
    # check for folder and idf file address
    
    # if workingDir\
    ## check for idf file to be connected
    if idfFileName == None: idfFileName = 'unnamed.idf'
    elif idfFileName[-3:] != 'idf': idfFileName = idfFileName + '.idf'
    
    # make working directory
    if workingDir:
        workingDir = lb_preparation.removeBlankLight(workingDir)
        originalWorkingDir = copy.copy(workingDir)
    else:
        workingDir = "c:\\ladybug"
        originalWorkingDir = os.path.join("c:\\ladybug", idfFileName.split(".idf")[0])
    
    workingDir = os.path.join(workingDir, idfFileName.split(".idf")[0], "EnergyPlus")
    
    workingDir = lb_preparation.makeWorkingDir(workingDir)
    
    # make sure the directory has been created
    if workingDir == -1: return -1
    workingDrive = workingDir[0:1]
        
    hb_writeIDF = sc.sticky["honeybee_WriteIDF"](workingDir)
    hb_runIDF = sc.sticky["honeybee_RunIDF"]()
    
    # call the objects from the lib
    thermalZonesPyClasses = hb_hive.callFromHoneybeeHive(HBZones)
    
    reEvaluate = hb_reEvaluateHBZones(thermalZonesPyClasses, meshSettings)
    reEvaluate.evaluateZones()
    
    idfFileFullName = workingDir + "\\" + idfFileName
    idfFile = open(idfFileFullName, "w")
    
    ################## HEADER ###################
    print "[1 of 8] Writing simulation parameters..."
    
    # Version,8.1;
    idfFile.write(hb_writeIDF.EPVersion(sc.sticky["honeybee_folders"]["EPVersion"]))
    
    # Read simulation parameters
    timestep, shadowPar, solarDistribution, simulationControl, ddyFile, terrain, grndTemps, holidays, startDayOfWeek, heatSizFac, coolSizFac = hb_EPPar.readEPParams(EPParameters)
    try:
        maxWarmUpDays = str(simulationControl[5])
        minWarmUpDays = str(simulationControl[6])
    except:
        maxWarmUpDays =''
        minWarmUpDays = ''
    
    # Timestep,6;
    idfFile.write(hb_writeIDF.EPTimestep(timestep))
    
    # ShadowCalculation
    idfFile.write(hb_writeIDF.EPShadowCalculation(*shadowPar))
    
    # Building
    EPBuilding = hb_writeIDF.EPBuilding(idfFileName, math.degrees(northAngle), terrain, solarDistribution, maxWarmUpDays, minWarmUpDays)
    idfFile.write(EPBuilding)
    
    # Sizing Factor
    idfFile.write(hb_writeIDF.EPSizingFactor(heatSizFac, coolSizFac))
    
    # HeatBalanceAlgorithm - We will just take the default for now
    #idfFile.write(hb_writeIDF.EPHeatBalanceAlgorithm())
    
    # SurfaceConvectionAlgorithm - We will just take the default for now
    #idfFile.write(hb_writeIDF.EPSurfaceConvectionAlgorithm())
    
    # Location
    idfFile.write(hb_writeIDF.EPSiteLocation(epwFileAddress))
    
    if grndTemps != []:
        idfFile.write(hb_writeIDF.EPGroundTemp(grndTemps))
    
    # SizingPeriod
    # Check if there is a DDY file to pull design days from.
    if ddyFile != None: pass
    else: ddyFile = epwFileAddress.replace(".epw", ".ddy", 1)
    usedDDY = False
    
    try:
        designDayLines = hb_writeIDF.extractDDYObjs(ddyFile)
        if designDayLines != ['\n']:
            for line in designDayLines:
                idfFile.write(line)
            usedDDY = True
    except:
        print "Can't find ddy file next to the EPW."
        print "Extreme values from the weather file design will be used instead."
    
    if usedDDY == False:
        # If there are no design days, analyze the EPW file and produce design day objects.
        ddyFile = hb_writeIDF.createDdyFromEPW(epwFileAddress, workingDir, lb_preparation, lb_comfortModels)
        designDayLines = hb_writeIDF.extractDDYObjs(ddyFile)
        if designDayLines != ['\n']:
            for line in designDayLines:
                idfFile.write(line)
            usedDDY = True
    
    # simulationControl
    idfFile.write(hb_writeIDF.EPSimulationControl(*simulationControl[0:5]))
    
    # runningPeriod
    idfFile.write(hb_writeIDF.EPRunPeriod('customRun', stDay, stMonth, endDay, endMonth, startDayOfWeek))
    
    # holidays
    if holidays != []:
        for count, hol in enumerate(holidays):
            idfFile.write(hb_writeIDF.EPHoliday(hol, count))
    
    # for now I write all the type limits but it can be cleaner
    scheduleTypeLimits = set([key.upper() for key in sc.sticky["honeybee_ScheduleTypeLimitsLib"].keys()])
    
    for scheduleTypeLimit in scheduleTypeLimits:
        try: idfFile.write(hb_writeIDF.EPSCHStr(scheduleTypeLimit))
        except: pass
    
    # Geometry rules
    idfFile.write(hb_writeIDF.EPGeometryRules())

    EPConstructionsCollection = []
    EPMaterialCollection = []
    EPScheduleCollection = []
    shdCntrlCollection = []
    
    # Shading Surfaces
    if HBContext and HBContext[0]!=None:
        print "[2 of 8] Writing context surfaces..."
       
        # call the objects from the lib
        shadingPyClasses = hb_hive.callFromHoneybeeHive(HBContext)
       
       
    def writeHBcontext(shadingPyClasses):
        
        for shading in shadingPyClasses:
            
            # take care of shcedule
            schedule = shading.TransmittanceSCH
            if schedule!="" and schedule.upper() not in EPScheduleCollection:
                # add schedule
                scheduleValues, comments = hb_EPScheduleAUX.getScheduleDataByName(schedule, ghenv.Component)
                if comments == "csv":
                    # create a new schedule object based on file
                    # and write it to idf
                    idfFile.write(hb_writeIDF.EPSCHStr(schedule))
                else:
                    # collect shchedule name
                    EPScheduleCollection.append(schedule.upper())
                    
                hb_writeIDF.EPSCHStr(shading.TransmittanceSCH.upper())
                
            idfFile.write(hb_writeIDF.EPShdSurface(shading))
       
    # Shading Surfaces
    if HBContext and HBContext[0]!=None:
        print "[2 of 8] Writing context surfaces..."
        # call the objects from the lib
        shadingPyClasses = hb_hive.callFromHoneybeeHive(HBContext)
        
        WriteIDF.checksurfaceduplicate.extend(shadingPyClasses) # Add to a list so can check for duplicates later
        writeHBcontext(shadingPyClasses)

    else:
        print "[2 of 8] No context surfaces..."

        
    #################  BODY #####################
    print "[3 of 8] Writing geometry..."
    ZoneCollectionBasedOnSchAndLoads = {} # This will be used to create zoneLists
    
    
    # write idf file
    for zone in thermalZonesPyClasses:
        # Zone
        idfFile.write(hb_writeIDF.EPZone(zone))
        
        # get the schedule and loads for the zone
        schedules = zone.getCurrentSchedules(True)
        loads = zone.getCurrentLoads(True)
        
        # create a unique key based on schedules and loads
        # zones with similar keys will be grouped
        key = ",".join(schedules.values() + loads.values())
        if key not in ZoneCollectionBasedOnSchAndLoads.keys():
            ZoneCollectionBasedOnSchAndLoads[key] = []
        
        ZoneCollectionBasedOnSchAndLoads[key].append(zone)
        
        # collect unique schedules
        for schedule in schedules.values():
            if schedule != "" and schedule.upper() not in EPScheduleCollection:
                EPScheduleCollection.append(schedule.upper())
        
        for srf in zone.surfaces:
            # check if there is an energyPlus material
            
            # Add surface to a list so that zone surfaces can be checked against honeybee generator PV surfaces
            WriteIDF.zonesurfaces.append(srf.name)
            
            if srf.EPConstruction != None:
                srf.construction = srf.EPConstruction
            # else try to find the material based on bldg type and climate zone
            # the surface will use the default construction
            if not srf.construction.upper() in EPConstructionsCollection:
                EPConstructionsCollection.append(srf.construction.upper())
            
            # Surfaces
            idfFile.write(hb_writeIDF.EPZoneSurface(srf))
            
            if srf.hasChild:
                # check the construction
                # this should be moved inside the function later
                for childSrf in srf.childSrfs:
                    # check if there is an energyPlus material
                    if childSrf.EPConstruction != None:
                        childSrf.construction = childSrf.EPConstruction
                    # else try to find the material based on bldg type and climate zone
                    # I will apply this later
                    # the surface will use the default construction
                    if not childSrf.construction.upper() in EPConstructionsCollection:
                            EPConstructionsCollection.append(childSrf.construction.upper())
                    
                    # Check if there is any shading for the window.
                    if childSrf.shadingControlName != []:
                        for shadingCount, windowShading in enumerate(childSrf.shadingControlName):
                            try:
                                if windowShading not in shdCntrlCollection:
                                    values = hb_EPObjectsAux.getEPObjectDataByName(windowShading)
                                    if not values[4][0].endswith('.CSV'):
                                        idfFile.write(hb_EPObjectsAux.getEPObjectsStr(windowShading))
                                    else:
                                        newSchedName = os.path.basename(values[4][0]).replace('.CSV', '')
                                        initStr = hb_EPObjectsAux.getEPObjectsStr(windowShading)
                                        finStr = initStr.replace(values[4][0], newSchedName)
                                        idfFile.write(finStr)
                                    
                                    if values[2][0] != '':
                                        # Iniitalize for construction (for switchable glazing).
                                        constrName = values[2][0]
                                        if constrName not in EPConstructionsCollection:
                                            EPConstructionsCollection.append(constrName)
                                    else:
                                        # Iniitalize for material (for blinds and shades).
                                        materialName = values[8][0]
                                        if materialName not in EPMaterialCollection:
                                            EPMaterialCollection.append(materialName)
                                    
                                    if values[4][0] != '' and values[4][0] not in EPScheduleCollection:
                                        EPScheduleCollection.append(values[4][0].upper())
                                    
                                    shdCntrlCollection.append(windowShading)
                            except: pass
                
                # write the glazing strings
                idfFile.write(hb_writeIDF.EPFenSurface(srf))
        
        #If there are internal masses assigned to the zone, write them into the IDF.
        if len(zone.internalMassNames) &gt; 0:
            for massCount, massName in enumerate(zone.internalMassNames):
                #Write the internal mass construction into the IDF if it is not there yet.
                if not zone.internalMassConstructions[massCount].upper() in EPConstructionsCollection:
                    EPConstructionsCollection.append(zone.internalMassConstructions[massCount].upper())
                
                #Write the internal mass into the IDF
                idfFile.write(hb_writeIDF.EPInternalMass(zone, massName, zone.internalMassSrfAreas[massCount], zone.internalMassConstructions[massCount]))
    
    ########### Generators - Electric load center ###########
    
    # This section was created by Anton Szilasi 
    # for technical support or user requests
    # please contact me ajszilasi@gmail.com
    
    print "[4 of 8] Writing Electric Load Center - Generator specifications ..."
        
    HBgeneratoroutputs = []
    
    if HBGenerators_ != []:
        hb_hivegen = sc.sticky["honeybee_generationHive"]()
        HBsystemgenerators = hb_hivegen.callFromHoneybeeHive(HBGenerators_)
        # Generation objects use "always on" schedule
        EPScheduleCollection.append('ALWAYS ON')
        
        # This code here is used to extractingruntime periods if outputs are specified externally
        # If the function returns and exception that means that external outputs are not specified.
        # and teh default below will be used.
        
        def extracttimeperiod(simulationOutputs):
            try:
                timeperiod = simulationOutputs[-1].split(',')[-1]
                HBgeneratortimeperiod = timeperiod.replace(";","")
                return HBgeneratortimeperiod
            except:
                pass
        
        # Extract the timestep from the incoming component simulationOutputs if its being used
        HBgeneratortimeperiod = extracttimeperiod(simulationOutputs)
        if simulationOutputs_ == []:
            HBgeneratoroutputs.append("Output:Variable,*,Facility Net Purchased Electric Energy, hourly;")
            HBgeneratoroutputs.append("Output:Variable,*,Facility Total Electric Demand Power, hourly;")
            HBgeneratortimeperiod = 'hourly'
        if simulationOutputs_ != []:
            if (not any('Output:Variable,*,Facility Total Electric Demand Power' in s for s in simulationOutputs)) and (not any('Output:Variable,*,Facility Net Purchased Electric Power' in s for s in simulationOutputs)):
                # These are the default inputs if the user does not specify their own using the component
                # simulationOutputs, the default timestep is therefore hourly 
                # the component Ladybug monthly bar chart needs hourly in order to run
                simulationOutputs.append("Output:Variable,*,Facility Net Purchased Electric Energy, hourly;")
                simulationOutputs.append("Output:Variable,*,Facility Total Electric Demand Power, hourly;")
                HBgeneratortimeperiod = 'hourly'
        # CHECK that HBgenerator names are unique for each HB generator
        HBgenerators = []
        for HBgenerator in HBsystemgenerators:
            HBgenerators.extend([generator.name for generator in HBgenerator.windgenerators])
            HBgenerators.extend([generator.name for generator in HBgenerator.PVgenerators])
        if len(HBgenerators) != len(set(HBgenerators)):
            duplicateHBgenerators =  [item for item, count in collections.Counter([item for item in HBgenerators]).items() if count &gt; 1]
            for HBgenerator in duplicateHBgenerators:
                warn = " Duplicate Honeybee generator (A PV or wind generator) name, named : " + HBgenerator +" detected!"+ "\n"+\
                "Please ensure that all PV and wind generators have unique names for EnergyPlus to run!"+ "\n"+\
                "This error usually occurs when several PVgen components are connected to one EnergyPlus simulation, and default names " + "\n"+\
                "have been assigned in each component. Fix this issue by inputing unique names to the input _name_ on the PVgen component."
                ghenv.Component.AddRuntimeMessage(w, warn )
            return -1
        
        # CHECK that the HBsystemgenerator_name is unique for this simulation - Otherwise E+ will crash
        if len(set([HBsystemgenerator.name for HBsystemgenerator in HBsystemgenerators])) != len(HBsystemgenerators):
            duplicateHBsystemgenerators = [HBsystemgenerator for HBsystemgenerator, count in collections.Counter([HBsystemgenerator.name for HBsystemgenerator in HBsystemgenerators]).items() if count &gt; 1]
            for HBsystemgenerator in duplicateHBsystemgenerators:
                warn = " Duplicate Honeybee generation system name, named: " + HBsystemgenerator +" detected!"+ "\n"+\
                "Please ensure that all Honeybee generation systems have unique names for EnergyPlus to run!"
                ghenv.Component.AddRuntimeMessage(w, warn )
            return -1
            
        # CHECK that HBgenerator names are unique for this simulation - Otherwise E+ will crash
        for HBsystemcount, HBsystemgenerator in enumerate(HBsystemgenerators):
            # Append to HBgeneratoroutputs as if we append to simulationOutputs the original default outputs will never run
            if simulationOutputs_ == []:
                # For this HBsystemgenerator write the output so that the produced electric energy is reported.
                HBgeneratoroutputs.append("Output:Variable,"+str(HBsystemgenerator.name)+":DISTRIBUTIONSYSTEM,Electric Load Center Produced Electric Energy,"+ HBgeneratortimeperiod +";")
            if simulationOutputs_ != []:
                # If there are output variables in simulationOutputs original default outputs will not run anyhow
                # so we can append to simulationOutputs without affecting default outputs
                
                # For this HBsystemgenerator write the output so that the produced electric energy is reported.
                simulationOutputs.append("Output:Variable,"+str(HBsystemgenerator.name)+":DISTRIBUTIONSYSTEM,Electric Load Center Produced Electric Energy,"+ HBgeneratortimeperiod +";")
            
            # Define the name for the list of generators and to use in generator's list name in ElectricLoadCenter:Distribution
            if HBsystemgenerator.name == None:
                # This shouldn't happen as Honeybee generation system has a check on it 
                # which doesnt allow for no names to be specified.
                HBsystemgenerator_name = "generatorsystem" + str(HBsystemcount)
            else:
                HBsystemgenerator_name = str(HBsystemgenerator.name)
            # Write one ElectricLoadCenter:Generators for each HBsystemgenerator
            idfFile.write(hb_writeIDF.writegeneratlorlist(HBsystemgenerator_name,HBsystemgenerator.PVgenerators+HBsystemgenerator.windgenerators+HBsystemgenerator.fuelgenerators)) # The writegeneratlorlist only takes 'generators' as an input so add all the different generator lists together 
            # Determine the type of system and write one ElectricLoadCenter:Distribution for each HBsystemgenerator
            distribution_name = str(HBsystemgenerator_name) + ':Distributionsystem' 
            # Add a header to the financial data so that its clear financial data is from this system
            
            WriteIDF.financialdata.append('Honeybee system generator '+str(HBsystemgenerator.name))
            # Add the Honeybee generation systems' annual operation and maintenance costs
            WriteIDF.financialdata.append('Honeybee system annual maintenance cost - '+str(HBsystemgenerator.maintenance_cost))
            
            # Determine whether it is a PV, Wind or fuel generator system
            if HBsystemgenerator.PVgenerators != []:
                # Add to a list to conduct checks on consistency of context surfaces later
                WriteIDF.checksurfaceduplicate.extend(HBsystemgenerator.contextsurfaces) 
                # Write the Honeybee context sufaces
                writeHBcontext(HBsystemgenerator.contextsurfaces)
                
                # CHECK
                # If PV surfaces are part of a zone make sure that, that zone is connected to _HBZones
                # that is the PV surfaces are contained in HBsystemgenerator.HBzonesurfaces
                for surface in HBsystemgenerator.HBzonesurfaces:
                    if  not surface.name in WriteIDF.zonesurfaces:
                        warn  = "It has been detected that there are PV generators attached to sufaces of a Honeybee zone\n"+\
                        " However this Honeybee zone has not been connected to the _HBZones input on this component\n"+\
                        " Please connect it to run the EnergyPlus simulation!"
                        print warn 
                        ghenv.Component.AddRuntimeMessage(w, warn)
                        
                        return -1
                if HBsystemgenerator.simulationinverter != None:
                    
                    if HBsystemgenerator.battery != None:
                        
                        # HBsystem contains a inverter and is a DC system AND has storage
                        WriteIDF.financialdata.append('Battery cost - ' +str(HBsystemgenerator.battery.cost_) +' replacement time = '+ str(HBsystemgenerator.battery.replacementtime)+ ' years')
                        # Although multiple inverters may exist in HBsystemgenerator.simulationinverter 
                        # in the Honeybee generation system it has been checked that they are all the same
                        WriteIDF.financialdata.append('Inverter cost - '+ str(HBsystemgenerator.simulationinverter[0].cost_)+ ' replacement time = '+ str(HBsystemgenerator.simulationinverter[0].replacementtime)+ ' years') 
                        
                        operationscheme = 'Baseload'
                        busstype = 'DirectCurrentWithInverterDCStorage'
                        demandlimit = ''
                        trackschedule = 'Always On'
                        trackmeterschedule = ''
                        inverterobject = HBsystemgenerator.simulationinverter[0] # All inverters are the same doesnt matter which one you pick
                        elecstorageobject = HBsystemgenerator.battery
                        
                        # Write HBsystemgenerator battery
                        idfFile.write(hb_writeIDF.battery_simple(HBsystemgenerator.battery))
                        
                        # Write HBsystemgenerator photovoltaic generators
                        for PVgen in HBsystemgenerator.PVgenerators:
                            
                            idfFile.write(hb_writeIDF.write_PVgen(PVgen))
                            idfFile.write(hb_writeIDF.write_PVgenperformanceobject(PVgen))
                            WriteIDF.financialdata.append('PVgenerator cost - '+str(PVgen.cost_)) # - Does the class PV_gen need an ID?
                        
                        # Write HBsystemgenerator inverters
                        idfFile.write(hb_writeIDF.simple_inverter(inverterobject))
               
                        # Write HBsystemgenerator ElectricLoadCenter:Distribution
                        idfFile.write(hb_writeIDF.writeloadcenterdistribution(distribution_name,HBsystemgenerator_name,operationscheme,demandlimit,trackschedule,trackmeterschedule,busstype,inverterobject,elecstorageobject))
                        
                        # CHECK for duplicate batteries - These can cause EnergyPlus to crash
                        # Append battery ID to checkbatteryduplicate to check for duplicate batteries
                        WriteIDF.checkbatteryduplicate.append(HBsystemgenerator.battery.ID)
                        
                        # If the battery ID occurs twice in the list WriteIDF.checkbatteryduplicate it is a duplicate
                        if WriteIDF.checkbatteryduplicate.count(HBsystemgenerator.battery.ID) == 2:
                            
                            warning  = 'Duplicate battery detected! please make sure that each HB generators has its own battery \n'+ \
                            'usually this happens because one battery is connected to many PVgenerators make sure each PVgenerator has its own\n'+ \
                            'unique battery'
                            ghenv.Component.AddRuntimeMessage(w, warning)
                            print warning 
                            return -1 
                            
                        # CHECK for duplicate inverters - These can cause EnergyPlus to crash
                        # Append inverter ID to checkbatteryduplicate to check for duplicate inverter 
                        WriteIDF.checkinverterduplicate.append(inverterobject.ID)
                
                        # If the inverter ID occurs twice in the list WriteIDF.checkinverterduplicate it is a duplicate
                        if WriteIDF.checkinverterduplicate.count(inverterobject.ID) == 2:
                            warning  = 'Duplicate inverter detected! please make sure that each Honeybee PV generator has its own inverter \n'+ \
                            'usually this happens because one inverter is connected to many PVgenerators make sure each PVgenerator has its own\n'+ \
                            'unique inverter'
                            ghenv.Component.AddRuntimeMessage(w, warning)
                            print warning 
                            return -1 
                        
                    else:
                        # HBsystem contains a inverter and is a DC system there are NO batteries in the system
                        
                        WriteIDF.financialdata.append('Inverter cost - '+ str(HBsystemgenerator.simulationinverter[0].cost_)+ ' replacement time = '+ str(HBsystemgenerator.simulationinverter[0].replacementtime)+ ' years') 
                        
                        operationscheme = 'Baseload'
                        busstype = 'DirectCurrentWithInverter'
                        demandlimit = ''
                        trackschedule = 'Always On'
                        trackmeterschedule = ''
                        inverterobject = HBsystemgenerator.simulationinverter[0] # All inverters are the same doesnt matter which one you pick
                        
                        # Write HBsystemgenerator photovoltaic generators
                        for PVgen in HBsystemgenerator.PVgenerators:
                            
                            idfFile.write(hb_writeIDF.write_PVgen(PVgen))
                            idfFile.write(hb_writeIDF.write_PVgenperformanceobject(PVgen))
                            WriteIDF.financialdata.append('PVgenerator cost - '+str(PVgen.cost_)) # - Does the class PV_gen need an ID?
                        
                        # Write HBsystemgenerator inverters
                        idfFile.write(hb_writeIDF.simple_inverter(inverterobject))
                        
                        # Write HBsystemgenerator ElectricLoadCenter:Distribution
                        idfFile.write(hb_writeIDF.writeloadcenterdistribution(distribution_name,HBsystemgenerator_name,operationscheme,demandlimit,trackschedule,trackmeterschedule,busstype,inverterobject,None)) 
                        # CHECK for duplicate inverters - These can cause EnergyPlus to crash
                        # Append inverter ID to checkbatteryduplicate to check for duplicate inverter 
                        WriteIDF.checkinverterduplicate.append(inverterobject.ID)
                        # If the inverter ID occurs twice in the list WriteIDF.checkinverterduplicate it is a duplicate
                        if WriteIDF.checkinverterduplicate.count(inverterobject.ID) == 2:
                            warning  = 'Duplicate inverter detected! please make sure that each Honeybee PV generator has its own inverter \n'+ \
                            'usually this happens because one inverter is connected to many PVgenerators make sure each PVgenerator has its own\n'+ \
                            'unique inverter'
                            ghenv.Component.AddRuntimeMessage(w, warning)
                            print warning 
                            return -1 
            
            elif HBsystemgenerator.windgenerators != []:
                operationscheme = 'Baseload'
                busstype = 'AlternatingCurrent'
                demandlimit = ''
                trackschedule = 'Always On'
                trackmeterschedule = ''
                inverterobject = None
                elecstorageobject = None
                
                # Write HBsystemgenerator wind generators
                for windgenerator in HBsystemgenerator.windgenerators:
                    idfFile.write(hb_writeIDF.wind_generator(windgenerator))
                    WriteIDF.financialdata.append('Wind turbine cost - '+str(windgenerator.cost_)) 
                # Write HBsystemgenerator ElectricLoadCenter:Distribution
                idfFile.write(hb_writeIDF.writeloadcenterdistribution(distribution_name,HBsystemgenerator_name,operationscheme,demandlimit,trackschedule,trackmeterschedule,busstype,inverterobject,elecstorageobject))
            elif HBsystemgenerator.fuelgenerators != []: # XXX 14/04/2015 not yet implemented so always equal to []
                busstype = 'AlternatingCurrent'
            
        # CHECK for duplicate HBcontext surfaces this could happen if the user connects context surfaces to both HBContext_ and a HB generator system
        HBcontextsurfaces = set()
        for HBcontextsurface in WriteIDF.checksurfaceduplicate:
            HBcontextsurfaces.add(HBcontextsurface.ID)
        if len(HBcontextsurfaces) != len(WriteIDF.checksurfaceduplicate):
            print "Duplicate HBcontext surfaces detected! Don't connect HBcontext surfaces to both PVgen component and run E+ component HBContext_ input!"
            ghenv.Component.AddRuntimeMessage(w, "Duplicate HBcontext surfaces detected! Don't connect HBcontext surfaces to both PVgen component and run E+ component HBContext_ input!")
            return -1
            
        # Write the financial data to the IDF file
        for data in hb_writeIDF.writegeneration_system_financialdata(WriteIDF.financialdata):
            idfFile.write(data)
        idfFile.write('\n')
    
    ################ Construction #####################
    print "[5 of 8] Writing materials and constructions..."
    
    # Write any materials that are outside constructions.
    for mat in EPMaterialCollection:
        materialStr = hb_writeIDF.EPMaterialStr(mat.upper())
        if materialStr:
            idfFile.write(materialStr)
    
    # Write constructions
    for cnstr in EPConstructionsCollection:
        constructionStr, materials = hb_writeIDF.EPConstructionStr(cnstr)
        if constructionStr:
            idfFile.write(constructionStr)
            #Check for materials.
            for mat in materials:
                if not mat.upper() in EPMaterialCollection:
                    materialStr = hb_writeIDF.EPMaterialStr(mat.upper())
                    if materialStr:
                        idfFile.write(materialStr)
                        EPMaterialCollection.append(mat.upper())
    
    ################ BODYII #####################
    print "[6 of 8] Writing schedules..."
    
    #Check if schedules need to be written for air mixing or natural ventilation.
    needToWriteAlwaysSched = False
    for key, zones in ZoneCollectionBasedOnSchAndLoads.items():
        for zone in zones:
            if zone.natVent == True:
                for schedule in zone.natVentSchedule:
                    if schedule != None:
                        if schedule.upper() not in EPScheduleCollection: EPScheduleCollection.append(schedule)
                    else: needToWriteAlwaysSched = True
            if zone.mixAir == True:
                for schedule in zone.mixAirFlowSched:
                    if schedule != None:
                        if schedule.upper() not in EPScheduleCollection: EPScheduleCollection.append(schedule)
                    else: needToWriteAlwaysSched = True
            if zone.earthtube == True:
                if zone.ETschedule.upper() not in EPScheduleCollection:
                    EPScheduleCollection.append(zone.ETschedule)
            if zone.isConditioned:
                needToWriteAlwaysSched = True
                if zone.HVACSystem.airDetails != None:
                    if zone.HVACSystem.airDetails.HVACAvailabiltySched != 'ALWAYS ON':
                        EPScheduleCollection.append(zone.HVACSystem.airDetails.HVACAvailabiltySched)
                if zone.HVACSystem.heatingDetails != None:
                    if zone.HVACSystem.heatingDetails.heatingAvailSched != 'ALWAYS ON':
                        EPScheduleCollection.append(zone.HVACSystem.heatingDetails.heatingAvailSched)
                if zone.HVACSystem.coolingDetails != None:
                    if zone.HVACSystem.coolingDetails.coolingAvailSched != 'ALWAYS ON':
                        EPScheduleCollection.append(zone.HVACSystem.coolingDetails.coolingAvailSched)
        if needToWriteAlwaysSched == True and 'ALWAYS ON' not in EPScheduleCollection: EPScheduleCollection.append('ALWAYS ON')
    
    
    # Write Schedules
    for schedule in EPScheduleCollection:
        scheduleValues, comments = hb_EPScheduleAUX.getScheduleDataByName(schedule, ghenv.Component)
        if comments == "csv":
            # create a new schedule object based on file
            idfFile.write(hb_writeIDF.EPSCHStr(schedule))
            
            # I need to also change the name of the schedule
            # when I write the objects! Maybe I should have added them
            # when I check for the zones so I can name them based on zone names
            pass
            
        elif scheduleValues!=None:
            idfFile.write(hb_writeIDF.EPSCHStr(schedule))
            
            if scheduleValues[0].lower() == "schedule:year":
                numOfWeeklySchedules = int((len(scheduleValues)-2)/5)
                
                for i in range(numOfWeeklySchedules):
                    weekDayScheduleName = scheduleValues[5 * i + 2]
                    if weekDayScheduleName not in EPScheduleCollection:
                            EPScheduleCollection.append(weekDayScheduleName)
                    
            # collect all the schedule items inside the schedule
            elif scheduleValues[0].lower() == "schedule:week:daily":
                for value in scheduleValues[1:]:
                    if value not in EPScheduleCollection:
                        EPScheduleCollection.append(value)
    
    print "[7 of 8] Writing loads and ideal air system..."
    listCount = 0
    listName = None
    
    
    for key, zones in ZoneCollectionBasedOnSchAndLoads.items():
        
        for zone in zones:
            if zone.daylightCntrlFract != 0:
                warning = "Daylighting controls have been applied to " + zone.name + \
                          ".\n" + \
                          "This component does not model daylighting controls.\n" + \
                          "To model daylight controls, use the Export to OpenStudio component."
                w = gh.GH_RuntimeMessageLevel.Warning
                ghenv.Component.AddRuntimeMessage(w, warning)
                print warning
            
            if zone.HVACSystem.Index &gt; 1:
                warning = "An HVAC system is applied to " + zone.name + \
                          ".\n" + \
                          "This component will replace this HVAC system with an Ideal Air Loads system.\n" + \
                          "To model advanced HVAC systems, use the Export to OpenStudio component."
                w = gh.GH_RuntimeMessageLevel.Warning
                ghenv.Component.AddRuntimeMessage(w, warning)
                print warning
            
            #   HAVC System
            if listName!=None:
                HAVCTemplateName = listName + "_HVAC"
                for zone in zones:
                    idfFile.write(hb_writeIDF.EPIdealAirSystem(zone, HAVCTemplateName))
            else:
                HAVCTemplateName = zone.name + "_HVAC"
                idfFile.write(hb_writeIDF.EPIdealAirSystem(zone, HAVCTemplateName))
            
            #Thermostat
            idfFile.write(hb_writeIDF.EPHVACTemplate(HAVCTemplateName, zone))
            
            #Outdoor Air Controller.
            idfFile.write(hb_writeIDF.EPOutdoorAir(zone))
            
            #   LOADS - INTERNAL LOADS + PLUG LOADS
            if zone.equipmentSchedule != None:
                idfFile.write(hb_writeIDF.EPZoneElectricEquipment(zone, listName))
            
            #   PEOPLE
            if zone.occupancySchedule != None:
                idfFile.write(hb_writeIDF.EPZonePeople(zone, listName))
            
            #   LIGHTs
            idfFile.write(hb_writeIDF.EPZoneLights(zone, listName))
            
            #   INFILTRATION
            idfFile.write(hb_writeIDF.EPZoneInfiltration(zone, listName))
            
            #   AIR MIXING
            if zone.mixAir == True:
                for mixZoneCount, zoneMixName in enumerate(zone.mixAirZoneList):
                    idfFile.write(hb_writeIDF.EPZoneAirMixing(zone, zoneMixName, zone.mixAirFlowList[mixZoneCount], mixZoneCount))
            
            # EARTH TUBE
            if zone.earthtube == True:
                idfFile.write(hb_writeIDF.EarthTube(zone))
            
            #   SIMPLE NATURAL VENTILATION
            if zone.natVent == True:
                for natVentCount, natVentObj in enumerate(zone.natVentType):
                    if natVentObj == 1 or natVentObj == 2:
                        idfFile.write(hb_writeIDF.EPNatVentSimple(zone, natVentCount))
                    elif natVentObj == 3:
                        idfFile.write(hb_writeIDF.EPNatVentFan(zone, natVentCount))
    
    #Write any additional strings.
    if additionalStrings_ != []:
        idfFile.write("\n")
        for string in additionalStrings_:
            if ":" in string and not '!' in string:
                idfFile.write("\n")
                idfFile.write("\n")
                idfFile.write(string)
            elif "!" not in string:
                idfFile.write("\n")
                idfFile.write("\n")
                idfFile.write(string)
                idfFile.write("\n")
            else:
                idfFile.write(string)
                idfFile.write("\n")
        idfFile.write("\n")
    
    ################## FOOTER ###################
    # write output lines
    # request surface information in the eio file.
    idfFile.write(hb_writeIDF.requestSrfeio())
    
    # request an output variable dictionary.
    idfFile.write(hb_writeIDF.requestVarDict())
    
    # write the outputs requested by the user.
    if simulationOutputs:
        print "[8 of 8] Writing outputs..."
        idfFile.write('\n')
        idfFile.write("OutputControl:Table:Style,CommaAndHTML,JtoKWH;")
        idfFile.write('\n')
        idfFile.write("Output:Table:SummaryReports,AllSummary;")
        idfFile.write('\n')
        for line in simulationOutputs[1:]:
            idfFile.write(line + '\n')
            
    else:
        print "[8 of 8] No outputs! You usually want to get some outputs when you run an analysis. Just saying..."
        print "We'll just request some energy-related outputs for you that are monthly."
        outPutsDefalut = 'OutputControl:Table:Style,Comma; \n' + \
            'Output:Variable,*,Zone Ideal Loads Supply Air Total Cooling Energy, monthly; \n' + \
            'Output:Variable,*,Zone Ideal Loads Supply Air Total Heating Energy, monthly; \n' + \
            'Output:Variable,*,Zone Lights Electric Energy, monthly; \n' + \
            'Output:Variable,*,Zone Electric Equipment Electric Energy, monthly;'
        idfFile.write('\n')
        idfFile.write(outPutsDefalut + '\n')
        # Write honeybee generator default outputs 
        for line in HBgeneratoroutputs:
            idfFile.write(line + '\n')
        # Writing outputs for Honeybee generators if there are any
        
    idfFile.close()
    
    print "...\n... idf file is successfully written to : " + idfFileFullName + "\n"
    
    ######################## RUN ENERGYPLUS SIMULATION #######################
    resultFileFullName = None
    performanceSummaryReport= None;
    studyFolder = None
    if runEnergyPlus:
        print "Analysis is running!..."
        # write the batch file
        hb_runIDF.writeBatchFile(workingDir, idfFileName, epwFileAddress, sc.sticky["honeybee_folders"]["EPPath"], runEnergyPlus &gt; 1)
        resultFileFullName = idfFileFullName.replace('.idf', '.csv')
        performanceSummaryReport = idfFileFullName.replace('.idf', 'Table.html');
        studyFolder = originalWorkingDir
        try:
            test = open(workingDir + '\eplusout.csv', 'r')
            test.close()
            resultFileFullName = workingDir + '\eplusout.csv'
        except:
            pass
        print "...\n...\n\nDone! Read below for errors and warnings:\n\n"
    else:
        print "Set runEnergyPlus to True!"
        
    return idfFileFullName, resultFileFullName, performanceSummaryReport,studyFolder


if _writeIdf == True and _epwFile and _HBZones and _HBZones[0]!=None:
    
    result = main(north_, _epwFile, _energySimPar_, _analysisPeriod_, _HBZones,
                  HBContext_, simulationOutputs_, _writeIdf, runEnergyPlus_,
                  _workingDir_, _idfFileName_, meshSettings_)
    if result!= -1:
        idfFileAddress, resultFileAddress, htmlReport, studyFolder = result
        if runEnergyPlus_:
            try:
                errorFileFullName = idfFileAddress.replace('.idf', '.err')
                errFile = open(errorFileFullName, 'r')
                for line in errFile:
                    print line
                    if "**  Fatal  **" in line:
                        warning = "The simulation has failed because of this fatal error: \n" + str(line)
                        w = gh.GH_RuntimeMessageLevel.Error
                        ghenv.Component.AddRuntimeMessage(w, warning)
                        resultFileAddress = None
                    elif "** Severe  **" in line:
                        comment = "The simulation has not run correctly because of this severe error: \n" + str(line)
                        w = gh.GH_RuntimeMessageLevel.Warning
                        ghenv.Component.AddRuntimeMessage(w, comment)
                errFile.close()
            except:
                pass
else:
    print "At least one of the mandatory inputs in missing."</item>
                    <item name="Description" type_name="gh_string" type_code="10">Use this component to export HBZones into an IDF file, and run them through EnergyPlus.
_
The component outputs the report from the simulation, the file path of the IDF file, and the CSV result file from the EnergyPlus run.
-
Provided by Honeybee 0.0.62</item>
                    <item name="EditorLocation" type_name="gh_drawing_point" type_code="30">
                      <X>527</X>
                      <Y>128</Y>
                    </item>
                    <item name="EditorSize" type_name="gh_drawing_size" type_code="32">
                      <W>1050</W>
                      <H>932</H>
                    </item>
                    <item name="Hidden" type_name="gh_bool" type_code="1">true</item>
                    <item name="HideInput" type_name="gh_bool" type_code="1">true</item>
                    <item name="HideOutput" type_name="gh_bool" type_code="1">false</item>
                    <item name="IconOverride" type_name="gh_drawing_bitmap" type_code="37">
                      <bitmap length="971">iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOwAAADsABataJCQAAA21JREFUSEvVlHlIFGEYxr/Zdmfcy9H1WHdNrdQ021bC7oigrCAoiOgggqJMOuh0touo/aeC7iQiS40OrbQDibLNSbM/SjONiqyg6LBMiCijLIp8emd3go7RrPyjfvAwM9++7/Mw77fzsf8CqyRPt3h8j0RPmU9d6lxE6YIkemSInnMv1KXORfRcmKQEWD3ydXXp7wle5lsgSmWFoiQfJvOrSkDQIvk1XQu+yrSk1KGW/z7i9qY74sqLoBAajTIeDWWVp6nlbTKKtJbjuD1BXbi9dL+FNI8ZzC429/gYccNtKXRD/Y7gpaWVtMGK6UtS9leZs3yRiokWc6IFoX53pBM14U4UMR3yGMMJnYAKepaMPKgmn4UlWZVi28Z7E8Qsn7IHdcpze+hJJd5wO5CYiia9Bct1PBYPGoJlo8dAcrnhZV3wMdiO5tgEDKNQqncFr7oyKtRbC6NU1ux3aRMdV3s2Og5ISsMuana4+yC7XMZrBHj46SPWlZxCRGgInlnCqC4VfRl7yYbOXBO270NVyOrLxaqTJtkF9mggZQD2k7l1YH80tH5Wrb8n51oN3FQDRwKe27tCx9gv/57OYSYLEO9CS0gU+ggCat40q3baTMvMxCElJDkN84xB/lEFrLSZnRvhoAA3DlDT1Fmz/CZyfT0OVlWhsPpbVaOY3iAtMwPb9HogIRUno2KUgBUBK23Wy45YfwBVYdPxIuzYm4PhdO9lHCS6/qidvIlG1B1wJqImJFIJyAlYabP2rBqwmJq3ni7B7vx8jKb79Xoeqzj9T/LyRswWjJhjNGMELygBGQErbSZvC4/yv+4eMp1E81W4dP8BjtReQ3Fd7U8qIh0jHb1eh9JbtypVnzYJH2wyAz1ceG9zoreOw7mGJ/6QjtDa2rpQ9WmX3PPKmJL74TRnAB8Xg8rGZ6qFNrkV5Xjc2HiXAgTVo12CIgyGV01xPf0f2lEald0eiUX7cnD/w3vVErjX8g7rCgswfcRI2mwdYqzWCrW/Q/TuxvNvb9IxgF790WIMxXwKmpKUjBnjxyNj3DgsTUrBZlo7Q0fGVtGmbO6aQGvHiafTs3yFLQJPYxOBbiloMdtQTaYyqYK3IC/MDpcgKF/vxEDLnzGWcVx+vCDcGGIwP083WRrcPH+FcSybfksPlHQeBhIdOf8cjH0BfOdJCtVFP4YAAAAASUVORK5CYII=</bitmap>
                    </item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">00f0168d-cb5f-4f65-8252-5a5b63ef1b37</item>
                    <item name="Name" type_name="gh_string" type_code="10">Honeybee_ Run Energy Simulation</item>
                    <item name="NickName" type_name="gh_string" type_code="10">runEnergySimulation</item>
                  </items>
                  <chunks count="2">
                    <chunk name="Attributes">
                      <items count="2">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>3137</X>
                          <Y>937</Y>
                          <W>262</W>
                          <H>364</H>
                        </item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>3290</X>
                          <Y>1119</Y>
                        </item>
                      </items>
                    </chunk>
                    <chunk name="ParameterData">
                      <items count="24">
                        <item name="InputCount" type_name="gh_int32" type_code="3">18</item>
                        <item name="InputId" index="0" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="1" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="2" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="3" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="4" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="5" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="6" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="7" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="8" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="9" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="10" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="11" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="12" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="13" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="14" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="15" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="16" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="17" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="OutputCount" type_name="gh_int32" type_code="3">4</item>
                        <item name="OutputId" index="0" type_name="gh_guid" type_code="9">3ede854e-c753-40eb-84cb-b48008f14fd4</item>
                        <item name="OutputId" index="1" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                        <item name="OutputId" index="2" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                        <item name="OutputId" index="3" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                      </items>
                      <chunks count="22">
                        <chunk name="InputParam" index="0">
                          <items count="10">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Input a vector to be used as a true North direction for the energy simulation or a number between 0 and 360 that represents the degrees off from the y-axis to make North.  The default North direction is set to the Y-axis (0 degrees).</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">b5eb5c06-0ff1-41db-99a0-bec9fdafcf59</item>
                            <item name="Name" type_name="gh_string" type_code="10">north_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">north_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">87f87f55-5b71-41f4-8aea-21d494016f81</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>3139</X>
                                  <Y>939</Y>
                                  <W>136</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>3216.5</X>
                                  <Y>949</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="1">
                          <items count="11">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">An .epw file path on your system as a text string.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">8c497ec7-a4dd-4f7f-99c5-de8e04e54557</item>
                            <item name="Name" type_name="gh_string" type_code="10">_epwFile</item>
                            <item name="NickName" type_name="gh_string" type_code="10">_epwFile</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="Source" index="0" type_name="gh_guid" type_code="9">e78b871f-3584-48c5-8630-75519e5a840d</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">87f87f55-5b71-41f4-8aea-21d494016f81</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>3139</X>
                                  <Y>959</Y>
                                  <W>136</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>3216.5</X>
                                  <Y>969</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="2">
                          <items count="11">
                            <item name="Access" type_name="gh_int32" type_code="3">1</item>
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">An optional analysis period from the Ladybug_Analysis Period component.  If no Analysis period is given, the energy simulation will be run for the enitre year.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">00604232-4055-40bf-86e0-91592f21d979</item>
                            <item name="Name" type_name="gh_string" type_code="10">_analysisPeriod_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">_analysisPeriod_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">1</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">87f87f55-5b71-41f4-8aea-21d494016f81</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>3139</X>
                                  <Y>979</Y>
                                  <W>136</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>3216.5</X>
                                  <Y>989</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="3">
                          <items count="11">
                            <item name="Access" type_name="gh_int32" type_code="3">1</item>
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">...</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">cbe1690a-8f84-4f94-b52d-66bfc18e5a29</item>
                            <item name="Name" type_name="gh_string" type_code="10">+++++++++++++++</item>
                            <item name="NickName" type_name="gh_string" type_code="10">+++++++++++++++</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">1</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">87f87f55-5b71-41f4-8aea-21d494016f81</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>3139</X>
                                  <Y>999</Y>
                                  <W>136</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>3216.5</X>
                                  <Y>1009</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="4">
                          <items count="11">
                            <item name="Access" type_name="gh_int32" type_code="3">1</item>
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Optional Energy Simulation Parameters from the "Honeybee_Energy Simulation Par" component.  If no value is connected here, the simulation will run with the following parameters:
1 - 6 timeSteps per hour
2 - A shadow calculation that averages over multiple days (as opposed to running it for each timeStep)
3 - A shadow calculation frequency of 30 (meaning that the shadow calulation is averaged over every 30 days)
4 - A maximum of 3000 points used in the shadow calculation. (This may need to be higher if you have a lot of detailed context geometry)
5 - An colar energy calculation that includes both interior and exterior light reflections.
6 - A simulation including a zone sizing calculation, a system sizing calculation, a plat sizing calculation, and a full run of the energy use ofver the analysis period.  The simulation is not run for the sizing period by default.
7 - A system sizing period that runs from the extreme periods of the weather file and not a ddy file.
8 - City terrian.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">fbbdd43e-2450-45a1-84fb-9bf296d6a38f</item>
                            <item name="Name" type_name="gh_string" type_code="10">_energySimPar_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">_energySimPar_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">1</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">87f87f55-5b71-41f4-8aea-21d494016f81</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>3139</X>
                                  <Y>1019</Y>
                                  <W>136</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>3216.5</X>
                                  <Y>1029</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="5">
                          <items count="13">
                            <item name="Access" type_name="gh_int32" type_code="3">1</item>
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">The HBZones that you wish to write into an IDF and/or run through EnergyPlus.  These can be from any of the components that output HBZones.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">07f518a3-56cf-429b-a597-1b62f3633562</item>
                            <item name="Mapping" type_name="gh_int32" type_code="3">1</item>
                            <item name="Name" type_name="gh_string" type_code="10">_HBZones</item>
                            <item name="NickName" type_name="gh_string" type_code="10">_HBZones</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">1</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="Source" index="0" type_name="gh_guid" type_code="9">47324697-c25f-4352-b7b1-fb5c598e7432</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">2ceb0405-fdfe-403d-a4d6-8786da45fb9d</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>3139</X>
                                  <Y>1039</Y>
                                  <W>136</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>3216.5</X>
                                  <Y>1049</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="6">
                          <items count="12">
                            <item name="Access" type_name="gh_int32" type_code="3">1</item>
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Optional HBContext geometry from the "Honeybee_EP Context Surfaces." component or Honeybee PV gen component.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">0d1dd0a5-c372-44bf-8c85-66a5cd356826</item>
                            <item name="Mapping" type_name="gh_int32" type_code="3">1</item>
                            <item name="Name" type_name="gh_string" type_code="10">HBContext_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">HBContext_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">1</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">2ceb0405-fdfe-403d-a4d6-8786da45fb9d</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>3139</X>
                                  <Y>1059</Y>
                                  <W>136</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>3216.5</X>
                                  <Y>1069</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="7">
                          <items count="11">
                            <item name="Access" type_name="gh_int32" type_code="3">1</item>
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Connect the output HBGeneratorSystem from the Honeybee_generationsystem component here to model EnergyPlus Photovoltaic and Wind generator systems in this simulation.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">662a1904-14d0-446e-b6a9-23cecbf3de4b</item>
                            <item name="Name" type_name="gh_string" type_code="10">HBGenerators_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">HBGenerators_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">1</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">37261734-eec7-4f50-b6a8-b8d1f3c4396b</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>3139</X>
                                  <Y>1079</Y>
                                  <W>136</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>3216.5</X>
                                  <Y>1089</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="8">
                          <items count="13">
                            <item name="Access" type_name="gh_int32" type_code="3">1</item>
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">A list of the outputs that you would like EnergyPlus to write into the result CSV file.  This can be any set of any outputs that you would like from EnergyPlus, writen as a list of text that will be written into the IDF.  It is recommended that, if you are not expereinced with writing EnergyPlus outputs, you should use the "Honeybee_Write EP Result Parameters" component to request certain types of common outputs.  If no value is input here, this component will automatically request outputs of heating, cooling, lighting, and equipment energy use.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">1b9598a2-5afa-4eec-a3bb-e8b5cfe93904</item>
                            <item name="Mapping" type_name="gh_int32" type_code="3">1</item>
                            <item name="Name" type_name="gh_string" type_code="10">simulationOutputs_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">simulationOutputs_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">1</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="Source" index="0" type_name="gh_guid" type_code="9">181ff420-8948-437c-af06-925df54a387e</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">37261734-eec7-4f50-b6a8-b8d1f3c4396b</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>3139</X>
                                  <Y>1099</Y>
                                  <W>136</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>3216.5</X>
                                  <Y>1109</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="9">
                          <items count="10">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Script input +++++++++++++++.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">10418d1d-e7ac-4623-b197-f68f501fe2be</item>
                            <item name="Name" type_name="gh_string" type_code="10">+++++++++++++++</item>
                            <item name="NickName" type_name="gh_string" type_code="10">+++++++++++++++</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">87f87f55-5b71-41f4-8aea-21d494016f81</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>3139</X>
                                  <Y>1119</Y>
                                  <W>136</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>3216.5</X>
                                  <Y>1129</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="10">
                          <items count="11">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Set to "True" to have the component take your HBZones and other inputs and write them into an IDF file.  The file path of the resulting file will appear in the idfFileAddress output of this component.  Note that only setting this to "True" and not setting the output below to "True" will not automatically run the IDF through EnergyPlus for you.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">59f139f0-bfd5-44fc-b94d-a18f843c8ad3</item>
                            <item name="Name" type_name="gh_string" type_code="10">_writeIdf</item>
                            <item name="NickName" type_name="gh_string" type_code="10">_writeIdf</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="Source" index="0" type_name="gh_guid" type_code="9">f1992f90-6e35-4597-add0-342bfd0e973a</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">87f87f55-5b71-41f4-8aea-21d494016f81</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>3139</X>
                                  <Y>1139</Y>
                                  <W>136</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>3216.5</X>
                                  <Y>1149</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="11">
                          <items count="11">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Set to "True" to have the component run your IDF through EnergyPlus once it has finished writing it.  This will ensure that a CSV result file appears in the resultFileAddress output. Set to 2 if you want the analysis to run in background. This option is useful for parametric runs when you don't want to see command shells.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">98d5b8fc-2666-48e3-bbba-4f0c3cbf19a2</item>
                            <item name="Name" type_name="gh_string" type_code="10">runEnergyPlus_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">runEnergyPlus_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="Source" index="0" type_name="gh_guid" type_code="9">f1992f90-6e35-4597-add0-342bfd0e973a</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">87f87f55-5b71-41f4-8aea-21d494016f81</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>3139</X>
                                  <Y>1159</Y>
                                  <W>136</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>3216.5</X>
                                  <Y>1169</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="12">
                          <items count="10">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Script input +++++++++++++++.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">a859bcdc-c5e3-445c-8ba2-be08d6ffda43</item>
                            <item name="Name" type_name="gh_string" type_code="10">+++++++++++++++</item>
                            <item name="NickName" type_name="gh_string" type_code="10">+++++++++++++++</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">87f87f55-5b71-41f4-8aea-21d494016f81</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>3139</X>
                                  <Y>1179</Y>
                                  <W>136</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>3216.5</X>
                                  <Y>1189</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="13">
                          <items count="10">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">An optional working directory to a folder on your system, into which your IDF and result files will be written.  NOTE THAT DIRECTORIES INPUT HERE SHOULD NOT HAVE ANY SPACES OR UNDERSCORES IN THE FILE PATH.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">f2d36fa5-cb21-4335-a407-76552b3da40c</item>
                            <item name="Name" type_name="gh_string" type_code="10">_workingDir_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">_workingDir_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">37261734-eec7-4f50-b6a8-b8d1f3c4396b</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>3139</X>
                                  <Y>1199</Y>
                                  <W>136</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>3216.5</X>
                                  <Y>1209</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="14">
                          <items count="10">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Optional text which will be used to name your IDF and result files.  Change this to aviod over-writing results of previous energy simulations.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">f6b12ee0-ae5c-4abf-89e7-2a2bcf02d73d</item>
                            <item name="Name" type_name="gh_string" type_code="10">_idfFileName_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">_idfFileName_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">87f87f55-5b71-41f4-8aea-21d494016f81</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>3139</X>
                                  <Y>1219</Y>
                                  <W>136</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>3216.5</X>
                                  <Y>1229</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="15">
                          <items count="10">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Script input +++++++++++++++.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">68f1484b-097f-4e39-9c78-4b0f035fbeef</item>
                            <item name="Name" type_name="gh_string" type_code="10">+++++++++++++++</item>
                            <item name="NickName" type_name="gh_string" type_code="10">+++++++++++++++</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">87f87f55-5b71-41f4-8aea-21d494016f81</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>3139</X>
                                  <Y>1239</Y>
                                  <W>136</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>3216.5</X>
                                  <Y>1249</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="16">
                          <items count="10">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Optional mesh settings for your geometry from any one of the native Grasshopper mesh setting components.  These will be used to change the meshing of curved surfaces before they are run through EnergyPlus (note that meshing of curved surfaces is done since Energyplus is not able to calculate heat flow through non-planar surfaces).  Default Grasshopper meshing is used if nothing is input here but you may want to decrease your calculation time by changing it to Coarse or increase your curvature definition (and calculation time) by making it finer.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">614544ef-a0e7-49e9-a201-834b1d1898a0</item>
                            <item name="Name" type_name="gh_string" type_code="10">meshSettings_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">meshSettings_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">87f87f55-5b71-41f4-8aea-21d494016f81</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>3139</X>
                                  <Y>1259</Y>
                                  <W>136</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>3216.5</X>
                                  <Y>1269</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="17">
                          <items count="11">
                            <item name="Access" type_name="gh_int32" type_code="3">1</item>
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">THIS OPTION IS JUST FOR ADVANCED USERS OF ENERGYPLUS.  You can input additional text strings here that you would like written into the IDF.  The strings input here should be complete EnergyPlus objects that are correctly formatted.  You can input as many objects as you like in a list.  This input can be used to write objects into the IDF that are not currently supported by Honeybee.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">68c658b4-1d4c-49ef-bd1b-537586cf50d4</item>
                            <item name="Name" type_name="gh_string" type_code="10">additionalStrings_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">additionalStrings_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">1</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">37261734-eec7-4f50-b6a8-b8d1f3c4396b</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>3139</X>
                                  <Y>1279</Y>
                                  <W>136</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>3216.5</X>
                                  <Y>1289</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="0">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10">Check here to see a report of the EnergyPlus run, including errors.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">e33ebdf0-87ce-4912-a157-0d936cabc7bc</item>
                            <item name="Name" type_name="gh_string" type_code="10">out</item>
                            <item name="NickName" type_name="gh_string" type_code="10">report</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>3305</X>
                                  <Y>939</Y>
                                  <W>92</W>
                                  <H>90</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>3351</X>
                                  <Y>984</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="1">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10">The file path of the IDF file that has been generated on your machine.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">6a07735b-f670-431d-8af6-3aaad753707a</item>
                            <item name="Name" type_name="gh_string" type_code="10">idfFileAddress</item>
                            <item name="NickName" type_name="gh_string" type_code="10">idfFileAddress</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>3305</X>
                                  <Y>1029</Y>
                                  <W>92</W>
                                  <H>90</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>3351</X>
                                  <Y>1074</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="2">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10">The Html file path of the Building Utility Performance Summar. You can review the report by copying the file path, and open it in your web browser.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">83147fe5-78fa-4a85-971e-9f6f8e406d26</item>
                            <item name="Name" type_name="gh_string" type_code="10">htmlReport</item>
                            <item name="NickName" type_name="gh_string" type_code="10">htmlReport</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>3305</X>
                                  <Y>1119</Y>
                                  <W>92</W>
                                  <H>90</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>3351</X>
                                  <Y>1164</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="3">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10">The file path of the CSV result file that has been generated on your machine.  This only happens when you set "runEnergyPlus_" to "True."</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">bf880545-de40-453c-9c3f-b2e317504dbd</item>
                            <item name="Name" type_name="gh_string" type_code="10">resultFileAddress</item>
                            <item name="NickName" type_name="gh_string" type_code="10">resultFileAddress</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>3305</X>
                                  <Y>1209</Y>
                                  <W>92</W>
                                  <H>90</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>3351</X>
                                  <Y>1254</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                      </chunks>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="11">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">c552a431-af5b-46a9-a8a4-0fcbc27ef596</item>
                <item name="Name" type_name="gh_string" type_code="10">Group</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="8">
                    <item name="Border" type_name="gh_int32" type_code="3">3</item>
                    <item name="Colour" type_name="gh_drawing_color" type_code="36">
                      <ARGB>188;245;201;64</ARGB>
                    </item>
                    <item name="Description" type_name="gh_string" type_code="10">A group of Grasshopper objects</item>
                    <item name="ID" index="0" type_name="gh_guid" type_code="9">4aaf89dc-e6d1-4a57-8270-229137b56f6e</item>
                    <item name="ID_Count" type_name="gh_int32" type_code="3">1</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">81b05e65-b9b7-461a-a948-5ce2d48a92d6</item>
                    <item name="Name" type_name="gh_string" type_code="10">Group</item>
                    <item name="NickName" type_name="gh_string" type_code="10">Make all surfaces except the facade with window adiabatic</item>
                  </items>
                  <chunks count="1">
                    <chunk name="Attributes" />
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="12">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">2e78987b-9dfb-42a2-8b76-3923ac8bd91a</item>
                <item name="Name" type_name="gh_string" type_code="10">Boolean Toggle</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="7">
                    <item name="Description" type_name="gh_string" type_code="10">Boolean (true/false) toggle</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">f1992f90-6e35-4597-add0-342bfd0e973a</item>
                    <item name="Name" type_name="gh_string" type_code="10">Boolean Toggle</item>
                    <item name="NickName" type_name="gh_string" type_code="10">Toggle</item>
                    <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                    <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                    <item name="ToggleValue" type_name="gh_bool" type_code="1">true</item>
                  </items>
                  <chunks count="1">
                    <chunk name="Attributes">
                      <items count="1">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>2859</X>
                          <Y>1146</Y>
                          <W>104</W>
                          <H>22</H>
                        </item>
                      </items>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="13">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">ac750e41-2450-4f98-9658-98fef97b01b2</item>
                <item name="Name" type_name="gh_string" type_code="10">Brep Wireframe</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="4">
                    <item name="Description" type_name="gh_string" type_code="10">Extract the wireframe curves of a brep.</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">ec7f1bd1-d05d-4f82-98e4-d2ec1b1233a7</item>
                    <item name="Name" type_name="gh_string" type_code="10">Brep Wireframe</item>
                    <item name="NickName" type_name="gh_string" type_code="10">Wires</item>
                  </items>
                  <chunks count="4">
                    <chunk name="Attributes">
                      <items count="2">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>2231</X>
                          <Y>941</Y>
                          <W>69</W>
                          <H>44</H>
                        </item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>2263</X>
                          <Y>963</Y>
                        </item>
                      </items>
                    </chunk>
                    <chunk name="param_input" index="0">
                      <items count="7">
                        <item name="Description" type_name="gh_string" type_code="10">Base Brep</item>
                        <item name="InstanceGuid" type_name="gh_guid" type_code="9">cc4fb1be-01cf-4db2-bfd6-fd60246ff005</item>
                        <item name="Name" type_name="gh_string" type_code="10">Brep</item>
                        <item name="NickName" type_name="gh_string" type_code="10">B</item>
                        <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                        <item name="Source" index="0" type_name="gh_guid" type_code="9">47324697-c25f-4352-b7b1-fb5c598e7432</item>
                        <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                      </items>
                      <chunks count="1">
                        <chunk name="Attributes">
                          <items count="2">
                            <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                              <X>2233</X>
                              <Y>943</Y>
                              <W>15</W>
                              <H>20</H>
                            </item>
                            <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                              <X>2242</X>
                              <Y>953</Y>
                            </item>
                          </items>
                        </chunk>
                      </chunks>
                    </chunk>
                    <chunk name="param_input" index="1">
                      <items count="6">
                        <item name="Description" type_name="gh_string" type_code="10">Wireframe isocurve density</item>
                        <item name="InstanceGuid" type_name="gh_guid" type_code="9">3950aa19-44d3-4933-b4b2-3001fb1e52be</item>
                        <item name="Name" type_name="gh_string" type_code="10">Density</item>
                        <item name="NickName" type_name="gh_string" type_code="10">D</item>
                        <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                        <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                      </items>
                      <chunks count="2">
                        <chunk name="Attributes">
                          <items count="2">
                            <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                              <X>2233</X>
                              <Y>963</Y>
                              <W>15</W>
                              <H>20</H>
                            </item>
                            <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                              <X>2242</X>
                              <Y>973</Y>
                            </item>
                          </items>
                        </chunk>
                        <chunk name="PersistentData">
                          <items count="1">
                            <item name="Count" type_name="gh_int32" type_code="3">1</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Branch" index="0">
                              <items count="2">
                                <item name="Count" type_name="gh_int32" type_code="3">1</item>
                                <item name="Path" type_name="gh_string" type_code="10">{0}</item>
                              </items>
                              <chunks count="1">
                                <chunk name="Item" index="0">
                                  <items count="1">
                                    <item name="number" type_name="gh_int32" type_code="3">-1</item>
                                  </items>
                                </chunk>
                              </chunks>
                            </chunk>
                          </chunks>
                        </chunk>
                      </chunks>
                    </chunk>
                    <chunk name="param_output" index="0">
                      <items count="7">
                        <item name="Access" type_name="gh_int32" type_code="3">1</item>
                        <item name="Description" type_name="gh_string" type_code="10">Wireframe curves</item>
                        <item name="InstanceGuid" type_name="gh_guid" type_code="9">3945fbc6-93ab-4a01-b24f-989908c688ec</item>
                        <item name="Name" type_name="gh_string" type_code="10">Wireframe</item>
                        <item name="NickName" type_name="gh_string" type_code="10">W</item>
                        <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                        <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                      </items>
                      <chunks count="1">
                        <chunk name="Attributes">
                          <items count="2">
                            <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                              <X>2278</X>
                              <Y>943</Y>
                              <W>20</W>
                              <H>40</H>
                            </item>
                            <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                              <X>2288</X>
                              <Y>963</Y>
                            </item>
                          </items>
                        </chunk>
                      </chunks>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="14">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">2e78987b-9dfb-42a2-8b76-3923ac8bd91a</item>
                <item name="Name" type_name="gh_string" type_code="10">Boolean Toggle</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="7">
                    <item name="Description" type_name="gh_string" type_code="10">Boolean (true/false) toggle</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">2668e594-da9e-40ba-8239-59b08291f804</item>
                    <item name="Name" type_name="gh_string" type_code="10">Boolean Toggle</item>
                    <item name="NickName" type_name="gh_string" type_code="10">Toggle</item>
                    <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                    <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                    <item name="ToggleValue" type_name="gh_bool" type_code="1">true</item>
                  </items>
                  <chunks count="1">
                    <chunk name="Attributes">
                      <items count="1">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>2512</X>
                          <Y>1295</Y>
                          <W>104</W>
                          <H>22</H>
                        </item>
                      </items>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="15">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">919e146f-30ae-4aae-be34-4d72f555e7da</item>
                <item name="Name" type_name="gh_string" type_code="10">Brep</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="7">
                    <item name="Description" type_name="gh_string" type_code="10">Contains a collection of Breps (Boundary REPresentations)</item>
                    <item name="Hidden" type_name="gh_bool" type_code="1">true</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">89764d79-e19a-4f0b-beb2-ceb9ba2d8741</item>
                    <item name="Name" type_name="gh_string" type_code="10">Brep</item>
                    <item name="NickName" type_name="gh_string" type_code="10">Brep</item>
                    <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                    <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                  </items>
                  <chunks count="2">
                    <chunk name="Attributes">
                      <items count="2">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>2425</X>
                          <Y>1071</Y>
                          <W>50</W>
                          <H>24</H>
                        </item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>2450.089</X>
                          <Y>1083.122</Y>
                        </item>
                      </items>
                    </chunk>
                    <chunk name="PersistentData">
                      <items count="1">
                        <item name="Count" type_name="gh_int32" type_code="3">1</item>
                      </items>
                      <chunks count="1">
                        <chunk name="Branch" index="0">
                          <items count="2">
                            <item name="Count" type_name="gh_int32" type_code="3">10</item>
                            <item name="Path" type_name="gh_string" type_code="10">{0}</item>
                          </items>
                          <chunks count="10">
                            <chunk name="Item" index="0">
                              <items count="1">
                                <item name="RefID" type_name="gh_guid" type_code="9">2f06dd2a-247a-4d30-8de8-86a4fea610a1</item>
                              </items>
                            </chunk>
                            <chunk name="Item" index="1">
                              <items count="1">
                                <item name="RefID" type_name="gh_guid" type_code="9">c00536a9-61ec-4a0c-9a1a-62b414f1b6e3</item>
                              </items>
                            </chunk>
                            <chunk name="Item" index="2">
                              <items count="1">
                                <item name="RefID" type_name="gh_guid" type_code="9">b2f0bf93-13d5-4fae-a2f1-1c5a8fdb3c33</item>
                              </items>
                            </chunk>
                            <chunk name="Item" index="3">
                              <items count="1">
                                <item name="RefID" type_name="gh_guid" type_code="9">a3b2d500-e6b2-4e35-a67c-aed65322c00a</item>
                              </items>
                            </chunk>
                            <chunk name="Item" index="4">
                              <items count="1">
                                <item name="RefID" type_name="gh_guid" type_code="9">f33bb3a9-f789-44f3-92b5-d455859457c7</item>
                              </items>
                            </chunk>
                            <chunk name="Item" index="5">
                              <items count="1">
                                <item name="RefID" type_name="gh_guid" type_code="9">746af46c-d888-4da2-b9bb-d9290036bb91</item>
                              </items>
                            </chunk>
                            <chunk name="Item" index="6">
                              <items count="1">
                                <item name="RefID" type_name="gh_guid" type_code="9">d2e9db0d-0b58-4a3d-8723-728cf3fae1e7</item>
                              </items>
                            </chunk>
                            <chunk name="Item" index="7">
                              <items count="1">
                                <item name="RefID" type_name="gh_guid" type_code="9">bd786442-96e0-4f7f-a61e-b6eb1890a35e</item>
                              </items>
                            </chunk>
                            <chunk name="Item" index="8">
                              <items count="1">
                                <item name="RefID" type_name="gh_guid" type_code="9">e8dc7191-9ed5-4c76-9ee1-f2f50328cac7</item>
                              </items>
                            </chunk>
                            <chunk name="Item" index="9">
                              <items count="1">
                                <item name="RefID" type_name="gh_guid" type_code="9">b5d0d853-cb36-4596-93a9-48d1191aaec8</item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                      </chunks>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="16">
              <items count="3">
                <item name="GUID" type_name="gh_guid" type_code="9">410755b1-224a-4c1e-a407-bf32fb45ea7e</item>
                <item name="Lib" type_name="gh_guid" type_code="9">16cf80bc-9018-cbdb-2238-976eb17fd30d</item>
                <item name="Name" type_name="gh_string" type_code="10">Honeybee EP context Surfaces</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="11">
                    <item name="CodeInput" type_name="gh_string" type_code="10">"""
prepare shading/context geometries

    Args:
        northVectorOrRotation: A vector that shows North or a number that shows
                               the rotation of the North from the Y axis
        bldgMasses: List of closed Breps as thermal zones.
    Returns:
        report: ...
        thermalZones: Thermal zone's geometries for visualiza
"""

ghenv.Component.Name = 'Honeybee EP context Surfaces'
ghenv.Component.NickName = 'HB_EPContextSrf'
ghenv.Component.Message = 'VER 0.0.60\nNOV_04_2016'
ghenv.Component.IconDisplayMode = ghenv.Component.IconDisplayMode.application
ghenv.Component.Category = "Honeybee"
ghenv.Component.SubCategory = "10 | Energy | Energy"
#compatibleHBVersion = VER 0.0.57\nNOV_04_2016
#compatibleLBVersion = VER 0.0.59\nFEB_01_2015
ghenv.Component.AdditionalHelpFromDocStrings = "2"

import rhinoscriptsyntax as rs
import Rhino as rc
import scriptcontext as sc
import os
import System
import Grasshopper.Kernel as gh
import uuid

tolerance = sc.doc.ModelAbsoluteTolerance
import math


def main(shdSurfaces, EPTransSchedule, meshingSettings, justBoundingBox):
    
    # import the classes
    if sc.sticky.has_key('honeybee_release'):

        try:
            if not sc.sticky['honeybee_release'].isCompatible(ghenv.Component): return -1
            if sc.sticky['honeybee_release'].isInputMissing(ghenv.Component): return -1
        except:
            warning = "You need a newer version of Honeybee to use this compoent." + \
            " Use updateHoneybee component to update userObjects.\n" + \
            "If you have already updated userObjects drag Honeybee_Honeybee component " + \
            "into canvas and try again."
            w = gh.GH_RuntimeMessageLevel.Warning
            ghenv.Component.AddRuntimeMessage(w, warning)
            return -1
        
        # don't customize this part
        hb_EPSrf = sc.sticky["honeybee_EPSurface"]
        hb_EPSHDSurface = sc.sticky["honeybee_EPShdSurface"]
        hb_RADMaterialAUX = sc.sticky["honeybee_RADMaterialAUX"]
        hb_EPObjectsAux = sc.sticky["honeybee_EPObjectsAUX"]()
        HBScheduleList = sc.sticky["honeybee_ScheduleLib"].keys()

        ########################################################################
        #----------------------------------------------------------------------#
        shdBreps = []
        # create bounding box of shading geometries
        if justBoundingBox:
            for brep in shdSurfaces:
                if brep.Faces.Count&gt;1 or not brep.Faces[0].IsPlanar(sc.doc.ModelAbsoluteTolerance):
                    shdBreps.append(brep.GetBoundingBox(True).ToBrep())
                else:
                    shdBreps.append(brep)
        else:
            shdBreps = shdSurfaces
        
        shadingClasses = []
        shadingMeshPreview = []
        
        if meshingSettings == None:
            mp = rc.Geometry.MeshingParameters.Minimal
            mp.SimplePlanes = True
        else:
            mp = meshingSettings
        
        def getRadMaterialName(radMaterial):
            nameStr = radMaterial.split(" ")[2]
            name =  nameStr.split("\n")[0]
            return name
        
        for brepCount, brep in enumerate(shdBreps):
            if brep != None:
                isPlanar = True
                # check planarity
                for face in brep.Faces:
                    if not face.IsPlanar(tolerance):
                        isPlanar = False
                        break
                
                shadingBreps = []
                if not isPlanar:
                    meshArray = rc.Geometry.Mesh.CreateFromBrep(brep, mp)
                    for mesh in meshArray:
                        for meshFace in range(mesh.Faces.Count):
                            vertices = list(mesh.Faces.GetFaceVertices(meshFace))[1:]
                            vertices = vertices + [sc.doc.ModelAbsoluteTolerance]
                            # create the brep from mesh
                            shdBrep = rc.Geometry.Brep.CreateFromCornerPoints(*vertices)
                            shadingBreps.append(shdBrep)
                else:
                    for face in brep.Faces:
                        shadingBreps.append(face.DuplicateFace(False))
                
                for faceCount, shdBrep in enumerate(shadingBreps):
                        thisShading = hb_EPSHDSurface(shdBrep, 1000*brepCount + faceCount, 'shdSrf_' + `brepCount` + '_' + `faceCount` + "_" + str(uuid.uuid4()))
                        
                        # add transmittance schedule if any
                        if EPTransSchedule!=None:
                            schedule= EPTransSchedule.upper()
                            if schedule!=None and not schedule.lower().endswith(".csv") and schedule not in HBScheduleList:
                                msg = "Cannot find " + schedule + " in Honeybee schedule library."
                                print msg
                                ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, msg)
                                return -1
                            elif schedule!=None and schedule.lower().endswith(".csv"):
                                # check if csv file is existed
                                if not os.path.isfile(schedule):
                                    msg = "Cannot find the shchedule file: " + schedule
                                    print msg
                                    ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, msg)
                                    return -1
                            
                            thisShading.TransmittanceSCH = schedule
                        
                        # add the Rad Material if any
                        if RADMaterial!=None:
                            # if it is just the name of the material make sure it is already defined
                            if len(RADMaterial.split(" ")) == 1:
                                # if the material is not in the library add it to the library
                                if not hb_RADMaterialAUX.isMatrialExistInLibrary(RADMaterial):
                                    warningMsg = "Can't find " + RADMaterial + " in RAD Material Library.\n" + \
                                                "Add the material to the library and try again."
                                    ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warningMsg)
                                    return
                                
                                try:
                                    thisShading.setRADMaterial(RADMaterial)
                                except Exception, e:
                                    print e
                                    warningMsg = "You are using an old version of Honeybee_Honeybee! Update your files and try again."
                                    print warningMsg
                                    ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warningMsg)
                                    return
                                
                                addedToLib = True
                            else:
                                
                                # try to add the material to the library
                                addedToLib, thisShading.RadMaterial = hb_RADMaterialAUX.analyseRadMaterials(RADMaterial, True)
                                
                            if addedToLib==False:
                                warningMsg = "Failed to add " + RADMaterial + " to the Library."
                                ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warningMsg)
                                return
                        
                        # add shading to the list
                        shadingClasses.append(thisShading)
                
        # add to the hive
        hb_hive = sc.sticky["honeybee_Hive"]()
        HBContext  = hb_hive.addToHoneybeeHive(shadingClasses, ghenv.Component)
        return HBContext
        ################################################################################################
    else:
        print "You should first let Honeybee to fly..."
        w = gh.GH_RuntimeMessageLevel.Warning
        ghenv.Component.AddRuntimeMessage(w, "You should first let Honeybee to fly...")
        return -1
        

if _shdSurfaces and _shdSurfaces[0]!=None:
    # add cleaning function
    result= main(_shdSurfaces, EPTransSchedule_, meshingSettings_, justBoundingBox_)
    
    if result != -1: HBContext = result</item>
                    <item name="Description" type_name="gh_string" type_code="10">prepare shading/context geometries</item>
                    <item name="EditorLocation" type_name="gh_drawing_point" type_code="30">
                      <X>253</X>
                      <Y>92</Y>
                    </item>
                    <item name="EditorSize" type_name="gh_drawing_size" type_code="32">
                      <W>1198</W>
                      <H>812</H>
                    </item>
                    <item name="Hidden" type_name="gh_bool" type_code="1">true</item>
                    <item name="HideInput" type_name="gh_bool" type_code="1">true</item>
                    <item name="HideOutput" type_name="gh_bool" type_code="1">true</item>
                    <item name="IconOverride" type_name="gh_drawing_bitmap" type_code="37">
                      <bitmap length="1058">iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOvAAADrwBlbxySQAAA8RJREFUSEvdVVtMVFcU3SPDS5DHAIpag1TiJIiitjbQSkoxGJz64CVIpVHsRxs1jQlto1FJqNo0TdVSRUERmpRpqtHBQUVTC1ZA46OjoIkFWx+RkhjTpCFB27Q6y3XuHToOc9s0fLqSlbvPPfvsdfc++5wrzxVWkfVR4eaNfO5VtklMX1jCzZuVrRgaHPAJuXVoHBYa8DGfVZ5xLddWeOx3SD90N5TPwq2DOWj97DW0bEtH+465uLbvDc1u2ZYG155MjcpW7KrJRAd91Px3n76Km43ZOLjhJTBWlx7yGYyLDt6Jc4VA1zLg4lLgchFwgc/OAt0+z7mrnLu3Evj5beAS36k55aPm1fhKMfBjERLjR3/pCesF063r+zYH7h/y8fDYQj8+oWg9M1y7JBG9X2cD10qAbrKjAIPONzHYvBDutlz81mRDTETQAU9YHzT1HJinfZWRAHqWo6LUqtLXaEubgLryNFyuycKfpxbj0XH6nM3Dr/b54N41aRGfhTnAZL+tvqzdOANcL8H2d1P+ERhiQvxorinE3ycXw30mD/cP5SA02GznnC/iIoOrHjA9d1vevwpUrfEKlJUKAMHS7EgMHCrAXxR48n0uBk4sQsLYkF1a0GFw9Nb/R4lY860rUmC1CmbOEMRYBHPmCNKnReFxqy6gStT/DUtkMh3xxPSB86e6LAoUGgtwQ1fPT4HdLmhr9pZoRmKU9lFDAn1sVb4/qgL6IHpM4O77RxZodTQUYAabilKQNU/w4QeC+HG6wOwkCrR7StSai9/pO9ESog6qL2LDA3cNtiziGWA/01Hj6SVa+2kCngw2bhY8+kMwK1UXeDnJAtzl2bj+FnCzFHAVY2JsyB49qi+ar1Zn4sHRPNxpsKHfbsOA04aHbD9NgJu84z3vJk9PFlRWUiA5DI4t6Thc8QqcPN3716WqeacKOBwO3iWwJgXCOsWMSePNyJgWA/fZfL2+FKh+3yuQPFXgcgni4vTxMBpucnV0rKCjU9B5QfDRBi4OG8OTyiviNMt1YznWF0xHfqGgsVFQVyvY+bnAwm7iWphGCUqKBRPGa+MaLeIwNEZEsL9XCFaVCTIy2I6J0bybeB2oe4h30PrcmVhXLujvF/TdFtz9RTDpBV0gKEjQzYxen6uN/Q8a4ZicIOi5IejtFdTvFQSOCkDqi5FsxQikWqN4akO0YP+DDtIPDaSR80j4FekHdbyNnEdCwza9Qho5j4Qu0g8ryVpyE6myUfZ2Uv0yVVeosfpdbvHY6l0lqXzUeDepfJVdRj4XEHkKk4Til9Yen5EAAAAASUVORK5CYII=</bitmap>
                    </item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">73e7d10f-41a4-4a16-ad01-b97d948ce86f</item>
                    <item name="Name" type_name="gh_string" type_code="10">Honeybee EP context Surfaces</item>
                    <item name="NickName" type_name="gh_string" type_code="10">HB_EPContextSrf</item>
                  </items>
                  <chunks count="2">
                    <chunk name="Attributes">
                      <items count="2">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>2539</X>
                          <Y>1071</Y>
                          <W>206</W>
                          <H>104</H>
                        </item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>2666</X>
                          <Y>1123</Y>
                        </item>
                      </items>
                    </chunk>
                    <chunk name="ParameterData">
                      <items count="8">
                        <item name="InputCount" type_name="gh_int32" type_code="3">5</item>
                        <item name="InputId" index="0" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="1" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="2" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="3" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="4" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="OutputCount" type_name="gh_int32" type_code="3">1</item>
                        <item name="OutputId" index="0" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                      </items>
                      <chunks count="6">
                        <chunk name="InputParam" index="0">
                          <items count="13">
                            <item name="Access" type_name="gh_int32" type_code="3">1</item>
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Script variable Python</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">5c7acefb-9d81-4206-bd9f-9b0b2643fa7f</item>
                            <item name="Mapping" type_name="gh_int32" type_code="3">1</item>
                            <item name="Name" type_name="gh_string" type_code="10">_shdSurfaces</item>
                            <item name="NickName" type_name="gh_string" type_code="10">_shdSurfaces</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">1</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="Source" index="0" type_name="gh_guid" type_code="9">89764d79-e19a-4f0b-beb2-ceb9ba2d8741</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">c37956f4-d39c-49c7-af71-1e87f8031b26</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>2541</X>
                                  <Y>1073</Y>
                                  <W>110</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>2605.5</X>
                                  <Y>1083</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="1">
                          <items count="10">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Script variable HB_EPContextSrf</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">877e6bc8-2fff-4775-b4d0-3ce5314d8309</item>
                            <item name="Name" type_name="gh_string" type_code="10">EPTransSchedule_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">EPTransSchedule_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">37261734-eec7-4f50-b6a8-b8d1f3c4396b</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>2541</X>
                                  <Y>1093</Y>
                                  <W>110</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>2605.5</X>
                                  <Y>1103</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="2">
                          <items count="10">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Script variable HB_EPContextSrf</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">778b6f9d-d8cd-4595-a551-9ad4719b152b</item>
                            <item name="Name" type_name="gh_string" type_code="10">RADMaterial</item>
                            <item name="NickName" type_name="gh_string" type_code="10">RADMaterial</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">87f87f55-5b71-41f4-8aea-21d494016f81</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>2541</X>
                                  <Y>1113</Y>
                                  <W>110</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>2605.5</X>
                                  <Y>1123</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="3">
                          <items count="10">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Script variable HB_ShdSrf</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">61a95891-14de-48da-b93e-3da8d9cfd4a1</item>
                            <item name="Name" type_name="gh_string" type_code="10">meshingSettings_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">meshingSettings_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">87f87f55-5b71-41f4-8aea-21d494016f81</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>2541</X>
                                  <Y>1133</Y>
                                  <W>110</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>2605.5</X>
                                  <Y>1143</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="4">
                          <items count="10">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Script variable HB_ShdSrf</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">fefd4d24-4d36-4a56-b3c3-b195476a5923</item>
                            <item name="Name" type_name="gh_string" type_code="10">justBoundingBox_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">justBoundingBox_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">d60527f5-b5af-4ef6-8970-5f96fe412559</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>2541</X>
                                  <Y>1153</Y>
                                  <W>110</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>2605.5</X>
                                  <Y>1163</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="0">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10">Script variable Python</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">ca72c26c-1e54-468a-abf4-2be6daf86463</item>
                            <item name="Name" type_name="gh_string" type_code="10">HBContext</item>
                            <item name="NickName" type_name="gh_string" type_code="10">HBContext</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>2681</X>
                                  <Y>1073</Y>
                                  <W>62</W>
                                  <H>100</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>2712</X>
                                  <Y>1123</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                      </chunks>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="17">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">c552a431-af5b-46a9-a8a4-0fcbc27ef596</item>
                <item name="Name" type_name="gh_string" type_code="10">Group</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="8">
                    <item name="Border" type_name="gh_int32" type_code="3">3</item>
                    <item name="Colour" type_name="gh_drawing_color" type_code="36">
                      <ARGB>255;205;92;92</ARGB>
                    </item>
                    <item name="Description" type_name="gh_string" type_code="10">A group of Grasshopper objects</item>
                    <item name="ID" index="0" type_name="gh_guid" type_code="9">1b69de12-1634-418c-aadd-fd5f923dcd63</item>
                    <item name="ID_Count" type_name="gh_int32" type_code="3">1</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">83237049-7527-4d9e-80b9-78ebd68f68f0</item>
                    <item name="Name" type_name="gh_string" type_code="10">Group</item>
                    <item name="NickName" type_name="gh_string" type_code="10">There is a change in input or output. Replace manually with the inserted component!</item>
                  </items>
                  <chunks count="1">
                    <chunk name="Attributes" />
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="18">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">c552a431-af5b-46a9-a8a4-0fcbc27ef596</item>
                <item name="Name" type_name="gh_string" type_code="10">Group</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="8">
                    <item name="Border" type_name="gh_int32" type_code="3">3</item>
                    <item name="Colour" type_name="gh_drawing_color" type_code="36">
                      <ARGB>255;205;92;92</ARGB>
                    </item>
                    <item name="Description" type_name="gh_string" type_code="10">A group of Grasshopper objects</item>
                    <item name="ID" index="0" type_name="gh_guid" type_code="9">f214ede9-cb86-4ea9-80f2-e4581f9c2ec7</item>
                    <item name="ID_Count" type_name="gh_int32" type_code="3">1</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">33f05ffc-68ad-4e0d-9dbd-e2c9d71edb0d</item>
                    <item name="Name" type_name="gh_string" type_code="10">Group</item>
                    <item name="NickName" type_name="gh_string" type_code="10">There is a change in input or output. Replace manually with the inserted component!</item>
                  </items>
                  <chunks count="1">
                    <chunk name="Attributes" />
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="19">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">c552a431-af5b-46a9-a8a4-0fcbc27ef596</item>
                <item name="Name" type_name="gh_string" type_code="10">Group</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="8">
                    <item name="Border" type_name="gh_int32" type_code="3">3</item>
                    <item name="Colour" type_name="gh_drawing_color" type_code="36">
                      <ARGB>255;205;92;92</ARGB>
                    </item>
                    <item name="Description" type_name="gh_string" type_code="10">A group of Grasshopper objects</item>
                    <item name="ID" index="0" type_name="gh_guid" type_code="9">643cf199-1b26-4850-921f-9c851da8f0e2</item>
                    <item name="ID_Count" type_name="gh_int32" type_code="3">1</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">4d37c041-57ee-49fe-8839-03ff9da61900</item>
                    <item name="Name" type_name="gh_string" type_code="10">Group</item>
                    <item name="NickName" type_name="gh_string" type_code="10">There is a change in input or output. Replace manually with the inserted component!</item>
                  </items>
                  <chunks count="1">
                    <chunk name="Attributes" />
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="20">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">c552a431-af5b-46a9-a8a4-0fcbc27ef596</item>
                <item name="Name" type_name="gh_string" type_code="10">Group</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="8">
                    <item name="Border" type_name="gh_int32" type_code="3">3</item>
                    <item name="Colour" type_name="gh_drawing_color" type_code="36">
                      <ARGB>255;205;92;92</ARGB>
                    </item>
                    <item name="Description" type_name="gh_string" type_code="10">A group of Grasshopper objects</item>
                    <item name="ID" index="0" type_name="gh_guid" type_code="9">92a1bfc4-33cf-4c39-b1d1-3cb94b5e68a4</item>
                    <item name="ID_Count" type_name="gh_int32" type_code="3">1</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">061a2cf3-cb70-43a9-aabc-5a14b27d4734</item>
                    <item name="Name" type_name="gh_string" type_code="10">Group</item>
                    <item name="NickName" type_name="gh_string" type_code="10">There is a change in input or output. Replace manually with the inserted component!</item>
                  </items>
                  <chunks count="1">
                    <chunk name="Attributes" />
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="21">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">919e146f-30ae-4aae-be34-4d72f555e7da</item>
                <item name="Name" type_name="gh_string" type_code="10">Brep</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="6">
                    <item name="Description" type_name="gh_string" type_code="10">Contains a collection of Breps (Boundary REPresentations)</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">cd44ae03-dea6-468a-82ea-529113a5833f</item>
                    <item name="Name" type_name="gh_string" type_code="10">Brep</item>
                    <item name="NickName" type_name="gh_string" type_code="10">3windowwall</item>
                    <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                    <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                  </items>
                  <chunks count="2">
                    <chunk name="Attributes">
                      <items count="2">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>225</X>
                          <Y>331</Y>
                          <W>50</W>
                          <H>24</H>
                        </item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>250.132</X>
                          <Y>343.4401</Y>
                        </item>
                      </items>
                    </chunk>
                    <chunk name="PersistentData">
                      <items count="1">
                        <item name="Count" type_name="gh_int32" type_code="3">1</item>
                      </items>
                      <chunks count="1">
                        <chunk name="Branch" index="0">
                          <items count="2">
                            <item name="Count" type_name="gh_int32" type_code="3">1</item>
                            <item name="Path" type_name="gh_string" type_code="10">{0}</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Item" index="0">
                              <items count="1">
                                <item name="RefID" type_name="gh_guid" type_code="9">f8760a78-273a-4cfb-8ecd-c5508846e22e</item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                      </chunks>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="22">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">919e146f-30ae-4aae-be34-4d72f555e7da</item>
                <item name="Name" type_name="gh_string" type_code="10">Brep</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="6">
                    <item name="Description" type_name="gh_string" type_code="10">Contains a collection of Breps (Boundary REPresentations)</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">6e1790b3-b42a-4aab-b7cc-ee732483793d</item>
                    <item name="Name" type_name="gh_string" type_code="10">Brep</item>
                    <item name="NickName" type_name="gh_string" type_code="10">3windowwall</item>
                    <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                    <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                  </items>
                  <chunks count="2">
                    <chunk name="Attributes">
                      <items count="2">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>227</X>
                          <Y>561</Y>
                          <W>50</W>
                          <H>24</H>
                        </item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>252.9775</X>
                          <Y>573.1476</Y>
                        </item>
                      </items>
                    </chunk>
                    <chunk name="PersistentData">
                      <items count="1">
                        <item name="Count" type_name="gh_int32" type_code="3">1</item>
                      </items>
                      <chunks count="1">
                        <chunk name="Branch" index="0">
                          <items count="2">
                            <item name="Count" type_name="gh_int32" type_code="3">1</item>
                            <item name="Path" type_name="gh_string" type_code="10">{0}</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Item" index="0">
                              <items count="1">
                                <item name="RefID" type_name="gh_guid" type_code="9">9084d4ac-5060-4491-ae0d-84981e941c7d</item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                      </chunks>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="23">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">919e146f-30ae-4aae-be34-4d72f555e7da</item>
                <item name="Name" type_name="gh_string" type_code="10">Brep</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="6">
                    <item name="Description" type_name="gh_string" type_code="10">Contains a collection of Breps (Boundary REPresentations)</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">bf26dc1f-9b71-438f-9dfc-1ae52be325a9</item>
                    <item name="Name" type_name="gh_string" type_code="10">Brep</item>
                    <item name="NickName" type_name="gh_string" type_code="10">wall</item>
                    <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                    <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                  </items>
                  <chunks count="2">
                    <chunk name="Attributes">
                      <items count="2">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>223</X>
                          <Y>793</Y>
                          <W>50</W>
                          <H>24</H>
                        </item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>248.4174</X>
                          <Y>805.8885</Y>
                        </item>
                      </items>
                    </chunk>
                    <chunk name="PersistentData">
                      <items count="1">
                        <item name="Count" type_name="gh_int32" type_code="3">1</item>
                      </items>
                      <chunks count="1">
                        <chunk name="Branch" index="0">
                          <items count="2">
                            <item name="Count" type_name="gh_int32" type_code="3">2</item>
                            <item name="Path" type_name="gh_string" type_code="10">{0}</item>
                          </items>
                          <chunks count="2">
                            <chunk name="Item" index="0">
                              <items count="1">
                                <item name="RefID" type_name="gh_guid" type_code="9">809a316e-2708-4953-b662-4f56b7917828</item>
                              </items>
                            </chunk>
                            <chunk name="Item" index="1">
                              <items count="1">
                                <item name="RefID" type_name="gh_guid" type_code="9">a555b54e-fd38-4039-ba14-d24e541c2013</item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                      </chunks>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="24">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">919e146f-30ae-4aae-be34-4d72f555e7da</item>
                <item name="Name" type_name="gh_string" type_code="10">Brep</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="6">
                    <item name="Description" type_name="gh_string" type_code="10">Contains a collection of Breps (Boundary REPresentations)</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">43ab3e6c-3d9d-46ce-b70e-a8c64d567a15</item>
                    <item name="Name" type_name="gh_string" type_code="10">Brep</item>
                    <item name="NickName" type_name="gh_string" type_code="10">ceiling</item>
                    <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                    <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                  </items>
                  <chunks count="2">
                    <chunk name="Attributes">
                      <items count="2">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>202</X>
                          <Y>981</Y>
                          <W>50</W>
                          <H>24</H>
                        </item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>227.998</X>
                          <Y>993.0887</Y>
                        </item>
                      </items>
                    </chunk>
                    <chunk name="PersistentData">
                      <items count="1">
                        <item name="Count" type_name="gh_int32" type_code="3">1</item>
                      </items>
                      <chunks count="1">
                        <chunk name="Branch" index="0">
                          <items count="2">
                            <item name="Count" type_name="gh_int32" type_code="3">1</item>
                            <item name="Path" type_name="gh_string" type_code="10">{0}</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Item" index="0">
                              <items count="1">
                                <item name="RefID" type_name="gh_guid" type_code="9">83bbc616-709c-43e4-a5a1-6e126736003c</item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                      </chunks>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="25">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">919e146f-30ae-4aae-be34-4d72f555e7da</item>
                <item name="Name" type_name="gh_string" type_code="10">Brep</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="6">
                    <item name="Description" type_name="gh_string" type_code="10">Contains a collection of Breps (Boundary REPresentations)</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">68989fa6-3118-480a-9b13-7fa2a16c2b6a</item>
                    <item name="Name" type_name="gh_string" type_code="10">Brep</item>
                    <item name="NickName" type_name="gh_string" type_code="10">floor</item>
                    <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                    <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                  </items>
                  <chunks count="2">
                    <chunk name="Attributes">
                      <items count="2">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>198</X>
                          <Y>1164</Y>
                          <W>50</W>
                          <H>24</H>
                        </item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>223.6576</X>
                          <Y>1176.417</Y>
                        </item>
                      </items>
                    </chunk>
                    <chunk name="PersistentData">
                      <items count="1">
                        <item name="Count" type_name="gh_int32" type_code="3">1</item>
                      </items>
                      <chunks count="1">
                        <chunk name="Branch" index="0">
                          <items count="2">
                            <item name="Count" type_name="gh_int32" type_code="3">1</item>
                            <item name="Path" type_name="gh_string" type_code="10">{0}</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Item" index="0">
                              <items count="1">
                                <item name="RefID" type_name="gh_guid" type_code="9">76ba8681-260e-4752-a786-71bcdaad8841</item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                      </chunks>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="26">
              <items count="3">
                <item name="GUID" type_name="gh_guid" type_code="9">410755b1-224a-4c1e-a407-bf32fb45ea7e</item>
                <item name="Lib" type_name="gh_guid" type_code="9">16cf80bc-9018-cbdb-2238-976eb17fd30d</item>
                <item name="Name" type_name="gh_string" type_code="10">Honeybee_createHBSrfs</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="10">
                    <item name="CodeInput" type_name="gh_string" type_code="10">#
# Honeybee: A Plugin for Environmental Analysis (GPL) started by Mostapha Sadeghipour Roudsari
# 
# This file is part of Honeybee.
# 
# Copyright (c) 2013-2017, Mostapha Sadeghipour Roudsari &lt;mostapha@ladybug.tools&gt; 
# Honeybee is free software; you can redistribute it and/or modify 
# it under the terms of the GNU General Public License as published 
# by the Free Software Foundation; either version 3 of the License, 
# or (at your option) any later version. 
# 
# Honeybee is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of 
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Honeybee; If not, see &lt;http://www.gnu.org/licenses/&gt;.
# 
# @license GPL-3.0+ &lt;http://spdx.org/licenses/GPL-3.0+&gt;


"""
Create a Honeybee surface, which can be plugged into the "Run Daylight Sumilation" component or combined with other surfaces to make HBZones with the "createHBZones" component.
-
Provided by Honeybee 0.0.62

    Args:
        _geometry: List of Breps
        srfName_: Optional name for surface
        srfType_: Optional input for surface type &gt;
            0- 'WALL'
            0.5- 'UndergroundWall'
            1- 'ROOF'
            1.5- 'UndergroundCeiling'
            2- 'FLOOR'
            2.25- 'UndergroundSlab'
            2.5- 'SlabOnGrade'
            2.75- 'ExposedFloor'
            3- 'CEILING'
            4- 'AIRWALL'
            5- 'WINDOW'
            6- 'SHADING'
        EPBC_: 'Ground', 'Adiabatic', 'Outdoors'
        _EPConstruction_: Optional EnergyPlus construction
        _RADMaterial_: Optional Radiance Material
    Returns:
        readMe!:...
        HBZone: A Honeybee Surface, which can be plugged into the "Run Daylight Sumilation" component or combined with other surfaces to make HBZones with the "createHBZones" component.
"""

import rhinoscriptsyntax as rs
import Rhino as rc
import scriptcontext as sc
import os
import sys
import System
import Grasshopper.Kernel as gh
import uuid

ghenv.Component.Name = 'Honeybee_createHBSrfs'
ghenv.Component.NickName = 'createHBSrfs'
ghenv.Component.Message = 'VER 0.0.62\nJUL_28_2017'
ghenv.Component.IconDisplayMode = ghenv.Component.IconDisplayMode.application
ghenv.Component.Category = "Honeybee"
ghenv.Component.SubCategory = "00 | Honeybee"
#compatibleHBVersion = VER 0.0.57\nNOV_04_2016
#compatibleLBVersion = VER 0.0.59\nFEB_01_2015
try: ghenv.Component.AdditionalHelpFromDocStrings = "3"
except: pass


tolerance = sc.doc.ModelAbsoluteTolerance
import math


def main(geometry, srfName, srfType, EPBC, EPConstruction, RADMaterial):
    # import the classes
    if sc.sticky.has_key('honeybee_release'):

        try:
            if not sc.sticky['honeybee_release'].isCompatible(ghenv.Component): return -1
            if sc.sticky['honeybee_release'].isInputMissing(ghenv.Component): return -1
        except:
            warning = "You need a newer version of Honeybee to use this compoent." + \
            "Use updateHoneybee component to update userObjects.\n" + \
            "If you have already updated userObjects drag Honeybee_Honeybee component " + \
            "into canvas and try again."
            w = gh.GH_RuntimeMessageLevel.Warning
            ghenv.Component.AddRuntimeMessage(w, warning)
            return -1
            
        # don't customize this part
        hb_EPZone = sc.sticky["honeybee_EPZone"]
        hb_EPSrf = sc.sticky["honeybee_EPSurface"]
        hb_EPZoneSurface = sc.sticky["honeybee_EPZoneSurface"]
        hb_EPFenSurface = sc.sticky["honeybee_EPFenSurface"]
        hb_RADMaterialAUX = sc.sticky["honeybee_RADMaterialAUX"]
        hb_EPObjectsAux = sc.sticky["honeybee_EPObjectsAUX"]()
        
    else:
        print "You should first let Honeybee to fly..."
        w = gh.GH_RuntimeMessageLevel.Warning
        ghenv.Component.AddRuntimeMessage(w, "You should first let Honeybee to fly...")
        return
    
    # if the input is mesh, convert it to a surface
    try:
        # check if this is a mesh
        geometry.Faces[0].IsQuad
        # convert to brep
        geometry = rc.Geometry.Brep.CreateFromMesh(geometry, False)
    except:
        pass
    
    HBSurfaces = []
    originalSrfName = srfName
    
    for faceCount in range(geometry.Faces.Count):
        
        # 0. check if user input a name for this surface
        guid = str(uuid.uuid4())
        number = guid.split("-")[-1]
        
        if srfName != None:
            if originalSrfName == None: originalSrfName = srfName
            originalSrfName = originalSrfName.strip().replace(" ","_")
            if geometry.Faces.Count != 1:
                srfName = originalSrfName + "_" + `faceCount`
            else: srfName = originalSrfName
        else:
            # generate a random name
            # the name will be overwritten for energy simulation
            srfName = "".join(guid.split("-")[:-1])
        
        # 1. create initial surface
        HBSurface = hb_EPZoneSurface(geometry.Faces[faceCount].DuplicateFace(False), number, srfName)
        
        # If the user has set a construction as Air Wall, change the surface type to air wall.
        try:
            if EPConstruction.ToUpper() == "AIR WALL":
                if srfType == None or srfType == "4":
                    srfType = 4
                    infoMsg = "Setting the construction to Air Wall will also ensure that the surface has the air wall srfType_."
                    print infoMsg
                else:
                    infoMsg = "By manually setting the srfType_ to be something other than 4: Air Wall on this component and also setting the Air Wall construction, you are overriding the air mixing properties of the air wall and only using the air wall as a construction."
                    print infoMsg
        except: pass
        
        if srfType == 4 or srfType == 4.0 or srfType == "4" or srfType == "4.0":
            try:
                if EPConstruction.ToUpper() == "AIR WALL": pass
                else:
                    infoMsg = "Setting the srfType to 4 will also ensure that the surface has the air wall construction."
                    print infoMsg
            except:
                infoMsg = "Setting the srfType to 4 will also ensure that the surface has the air wall construction."
                print infoMsg
            EPConstruction = "AIR WALL"
        
        # 1.1 check for surface type
        if srfType!=None:
            try:
                # if user uses a number to input type
                try: surfaceType = int(srfType)
                except:
                    if float(srfType) == 0.5 or float(srfType) == 1.5 or float(srfType) == 2.25 or float(srfType) == 2.5 or float(srfType) == 2.75:
                        surfaceType = srfType
                    else: pass
                print "HBSurface Type has been set to " + HBSurface.srfType[float(srfType)]
                
                if surfaceType == 5.0:
                    warningMsg = "If you want to use this model for energy simulation, use addGlazing to add window to surfaces.\n" + \
                                 "It will be fine for Daylighting simulation though."
                    print warningMsg
                    ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Remark, warningMsg)
            except:
                # user uses text as an input (e.g.: wall)
                # convert it to a number if a valid input
                surfaceType = srfType.ToUpper()
                if surfaceType in HBSurface.srfType.keys():
                   surfaceType = HBSurface.srfType[surfaceType.ToUpper()]
                   print "HBSurface Type has been set to " + surfaceType.ToUpper()
            
            if surfaceType in HBSurface.srfType.keys():
                acceptableCombination = [[1,3], [3,1], [0,5], [5,0], [1,5], [5,1], [4,0], [4,1], [4,2], [4,3], [0,4], [1,4], [2,4], [3,4]]
                try:
                    if int(HBSurface.type) != surfaceType and [int(HBSurface.type), surfaceType] not in acceptableCombination:
                        warningMsg = "Normal direction of the surface is not expected for a " + HBSurface.srfType[surfaceType] + ". " + \
                                     "The surface is more likely a " + HBSurface.srfType[int(HBSurface.type)] + ".\n" + \
                                     "Honeybee won't overwrite the type so you may need to manually flip the surface."
                        print warningMsg
                    HBSurface.setType(surfaceType, isUserInput= True)
                except:
                    warningMsg = "You are using an old version of Honeybee_Honeybee! Update your files and try again."
                    print warningMsg
                    ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warningMsg)
                    return
            
        
        # 1.2 assign boundary condition
        if EPBC!= None:
            # only ground, adiabatic and outdoors is valid
            validBC = ['ground', 'adiabatic', 'outdoors']
            if EPBC.lower() in validBC:
                try:
                    HBSurface.setBC(EPBC, isUserInput= True)
                    
                    # change type of surface if BC is set to ground
                    if EPBC.lower()== "ground":
                        HBSurface.setType(int(HBSurface.type) + 0.5, isUserInput= True)
                    
                    
                    if EPBC.lower()== "ground" or EPBC.lower()== "adiabatic":
                        HBSurface.setSunExposure('NoSun')
                        HBSurface.setWindExposure('NoWind')
                    
                    print "HBSurface boundary condition has been set to " + EPBC.upper()
                except:
                    warningMsg = "You are using an old version of Honeybee_Honeybee! Update your files and try again."
                    print warningMsg
                    ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warningMsg)
                    return               
            else:
                print "HBSurface BOUNDARY CONDITION IS NOT VALID."
        
        # 1.3 assign construction for EnergyPlus
        if EPConstruction!=None:
            # if it is just the name of the material make sure it is already defined
            if len(EPConstruction.split("\n")) == 1:
                # if the material is not in the library add it to the library
                if not hb_EPObjectsAux.isEPConstruction(EPConstruction):
                    warningMsg = "Can't find " + EPConstruction + " in EP Construction Library.\n" + \
                                "Add the construction to the library and try again."
                    print warningMsg
                    ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warningMsg)
                    return
            else:
                # it is a full string
                if "CONSTRUCTION" in EPConstruction.upper():
                    added, EPConstruction = hb_EPObjectsAux.addEPObjectToLib(EPConstruction, overwrite = True)
                    
                    if not added:
                        msg = name + " is not added to the project library!"
                        ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, msg)
                        print msg
                        return
                elif "MATERIAL" in EPConstruction.upper():
                    msg = "Your connected EPConstruction_ is just a material and not a full construction. \n You have to pass it through an 'EnergyPlus Construction' component before connecting it here."
                    ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, msg)
                    print msg
                    return
                else:
                    msg = "Your connected EPConstruction_ is not a valid construction."
                    ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, msg)
                    print msg
                    return
            
            try:
                HBSurface.setEPConstruction(EPConstruction)
                print "HBSurface construction has been set to " + EPConstruction
            except:
                warningMsg = "You are using an old version of Honeybee_Honeybee! Update your files and try again."
                print warningMsg
                ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warningMsg)
                return                 
            
        # 1.4 assign RAD Material
        if RADMaterial!=None:
            # if it is just the name of the material make sure it is already defined
            if len(RADMaterial.split(" ")) == 1:
                # if the material is not in the library add it to the library
                if not hb_RADMaterialAUX.isMatrialExistInLibrary(RADMaterial):
                    warningMsg = "Can't find " + RADMaterial + " in RAD Material Library.\n" + \
                                "Add the material to the library and try again."
                    ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warningMsg)
                    return
                
                try:
                    HBSurface.setRADMaterial(RADMaterial)
                    print "HBSurface Radiance Material has been set to " + RADMaterial
                except Exception, e:
                    print e
                    warningMsg = "You are using an old version of Honeybee_Honeybee! Update your files and try again."
                    print warningMsg
                    ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warningMsg)
                    return
                
                addedToLib = True
            else:
                
                # try to add the material to the library
                addedToLib, HBSurface.RadMaterial = hb_RADMaterialAUX.analyseRadMaterials(RADMaterial, True)
                
            if addedToLib==False:
                warningMsg = "Failed to add " + RADMaterial + " to the Library."
                ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warningMsg)
                return
            
        HBSurfaces.append(HBSurface)
    
    # add to the hive
    hb_hive = sc.sticky["honeybee_Hive"]()
    HBSurface  = hb_hive.addToHoneybeeHive(HBSurfaces, ghenv.Component)
    
    return HBSurface
    
    
    

if _geometry != None:
    
    result= main(_geometry, srfName_, srfType_, EPBC_, _EPConstruction_, _RADMaterial_)
    
    if result!=-1:
        HBSurface = result
</item>
                    <item name="Description" type_name="gh_string" type_code="10">Create a Honeybee surface, which can be plugged into the "Run Daylight Sumilation" component or combined with other surfaces to make HBZones with the "createHBZones" component.
-
Provided by Honeybee 0.0.62</item>
                    <item name="EditorLocation" type_name="gh_drawing_point" type_code="30">
                      <X>1390</X>
                      <Y>67</Y>
                    </item>
                    <item name="EditorSize" type_name="gh_drawing_size" type_code="32">
                      <W>1169</W>
                      <H>812</H>
                    </item>
                    <item name="HideInput" type_name="gh_bool" type_code="1">true</item>
                    <item name="HideOutput" type_name="gh_bool" type_code="1">false</item>
                    <item name="IconOverride" type_name="gh_drawing_bitmap" type_code="37">
                      <bitmap length="794">iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOwQAADsEBuJFr7QAAArxJREFUSEvNVWtIk1EYnpuXb6arVJTN0oQgo1RwI4WS8I9ZWoZNN2+L7lKpP0ItCNQsoqILWGo/igok7UerZXSTDDOisjIvBSX0o9uPhKjmFLWe3nffBzn7stWMeuBhh3Pe93nP955znin+NxQrlQqzNJ5U6IgtlZZo2HYlgMa3iXN5wVP4EMvXpUb2dx1PBp7nA0/z8LoxFamGUC5U7Yz6Q5g0GsHRXJUA9BUA97MxcCENA9Y04G4W0J2Ltw0pMGinDVNsiZjiHgzaIN9b57brMdKWCfTmYtCWDjtx4JJIHg82pzuLosOEui0x0AjKHsqdKUrII5ZozUrS4SMJ4EUBRq5nwH6Rdi0JjyevDV9dAfTkAg9NqMifw21rJSay4HjUlhtnA+/X42u7EXZuh4yoHO22NHy5kQG8W4v9G+dxkZOi5BgE+nuXNlUsADrNLu1wl5yDjmzcPLQIEWHq3ZKsC2orC6KBrhxZAXeIRyacLouHv4/qqKTpgjruoUcFnuSgZmusfIsI+w5umu9skVyyO+Tc2uI4LnBClByDQMG79EyZ3nnt5JLdIe5lo7k6Ebpgvz2SrAs8bxF/QdFPvoDwd89ApfKqqi+JAx57cAZ0ixp26BEgqGok2e/w8VIcOLXTAPRvwNDl5RO+4PHk2CH65YfWUrMYM6b7HZFkXVA4RfB2NJbTQT8j16TdDFLiRI+O1xwUgwfkSb15uEYHHKLx5RZtEyXlUZS5MPRVdz3ZM7noaNsq2K3LfhSnudFWMsM+C96cXYI1KRH9lMsv2Mup8gsEEK1mMr4PV8jMXq4WjY/86TMbHM+RsKNlJQqXRvKO2eCmcuLvIj4qzP/8sc0xwB2j85bwJWCbbiI7j9KqWThZDPUMlvAQ4VP74SR0Uuu02gD+kykSlyYPwbNC1Xu1QUIdjcPFqX8OheIbukQwObBaeUMAAAAASUVORK5CYII=</bitmap>
                    </item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">ff82b5cb-8488-47c7-93ae-4726fbea9ae3</item>
                    <item name="Name" type_name="gh_string" type_code="10">Honeybee_createHBSrfs</item>
                    <item name="NickName" type_name="gh_string" type_code="10">createHBSrfs</item>
                  </items>
                  <chunks count="2">
                    <chunk name="Attributes">
                      <items count="2">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>376</X>
                          <Y>561</Y>
                          <W>200</W>
                          <H>124</H>
                        </item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>483</X>
                          <Y>623</Y>
                        </item>
                      </items>
                    </chunk>
                    <chunk name="ParameterData">
                      <items count="10">
                        <item name="InputCount" type_name="gh_int32" type_code="3">6</item>
                        <item name="InputId" index="0" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="1" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="2" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="3" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="4" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="5" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="OutputCount" type_name="gh_int32" type_code="3">2</item>
                        <item name="OutputId" index="0" type_name="gh_guid" type_code="9">3ede854e-c753-40eb-84cb-b48008f14fd4</item>
                        <item name="OutputId" index="1" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                      </items>
                      <chunks count="8">
                        <chunk name="InputParam" index="0">
                          <items count="11">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">List of Breps</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">2b2dcd5c-a6ed-4b65-abe6-aba5900acad9</item>
                            <item name="Name" type_name="gh_string" type_code="10">_geometry</item>
                            <item name="NickName" type_name="gh_string" type_code="10">_geometry</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="Source" index="0" type_name="gh_guid" type_code="9">6e1790b3-b42a-4aab-b7cc-ee732483793d</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">c37956f4-d39c-49c7-af71-1e87f8031b26</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>378</X>
                                  <Y>563</Y>
                                  <W>90</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>424.5</X>
                                  <Y>573</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="1">
                          <items count="10">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Optional name for surface</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">e5a47e74-284d-4fbb-ae8f-d06516948909</item>
                            <item name="Name" type_name="gh_string" type_code="10">srfName_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">srfName_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">37261734-eec7-4f50-b6a8-b8d1f3c4396b</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>378</X>
                                  <Y>583</Y>
                                  <W>90</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>424.5</X>
                                  <Y>593</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="2">
                          <items count="11">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Optional input for surface type &gt;
0- 'WALL'
0.5- 'UndergroundWall'
1- 'ROOF'
1.5- 'UndergroundCeiling'
2- 'FLOOR'
2.25- 'UndergroundSlab'
2.5- 'SlabOnGrade'
2.75- 'ExposedFloor'
3- 'CEILING'
4- 'AIRWALL'
5- 'WINDOW'
6- 'SHADING'</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">3d85d23e-9769-4d42-b2c3-4f0a7ddc1f09</item>
                            <item name="Name" type_name="gh_string" type_code="10">srfType_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">srfType_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="Source" index="0" type_name="gh_guid" type_code="9">8a3e4f0a-9e91-4ded-a02b-7b7dba9aa035</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">37261734-eec7-4f50-b6a8-b8d1f3c4396b</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>378</X>
                                  <Y>603</Y>
                                  <W>90</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>424.5</X>
                                  <Y>613</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="3">
                          <items count="10">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">'Ground', 'Adiabatic', 'Outdoors'</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">0d10a3ec-a5ab-498f-b88b-f3b4dd9d7a73</item>
                            <item name="Name" type_name="gh_string" type_code="10">EPBC_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">EPBC_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">37261734-eec7-4f50-b6a8-b8d1f3c4396b</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>378</X>
                                  <Y>623</Y>
                                  <W>90</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>424.5</X>
                                  <Y>633</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="4">
                          <items count="10">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Optional EnergyPlus construction</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">132bf3e4-93df-41a9-a0f6-a16c26a47d8a</item>
                            <item name="Name" type_name="gh_string" type_code="10">_EPConstruction_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">_EPConstruction_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">37261734-eec7-4f50-b6a8-b8d1f3c4396b</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>378</X>
                                  <Y>643</Y>
                                  <W>90</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>424.5</X>
                                  <Y>653</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="5">
                          <items count="10">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Optional Radiance Material</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">2b93dbc9-d43e-4d73-bc55-eae3fb7ce058</item>
                            <item name="Name" type_name="gh_string" type_code="10">_RADMaterial_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">_RADMaterial_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">37261734-eec7-4f50-b6a8-b8d1f3c4396b</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>378</X>
                                  <Y>663</Y>
                                  <W>90</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>424.5</X>
                                  <Y>673</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="0">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10">...</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">88b32a0b-73ce-4809-a337-df761721b840</item>
                            <item name="Name" type_name="gh_string" type_code="10">out</item>
                            <item name="NickName" type_name="gh_string" type_code="10">readMe!</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>498</X>
                                  <Y>563</Y>
                                  <W>76</W>
                                  <H>60</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>528</X>
                                  <Y>593</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="1">
                          <items count="7">
                            <item name="Description" type_name="gh_string" type_code="10">Honeybee zone as the result</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">bf8a8917-531e-48de-bd69-394af8f07f64</item>
                            <item name="Name" type_name="gh_string" type_code="10">HBSurface</item>
                            <item name="NickName" type_name="gh_string" type_code="10">HBSurface</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SimplifyData" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>498</X>
                                  <Y>623</Y>
                                  <W>76</W>
                                  <H>60</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>528</X>
                                  <Y>653</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                      </chunks>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="27">
              <items count="3">
                <item name="GUID" type_name="gh_guid" type_code="9">410755b1-224a-4c1e-a407-bf32fb45ea7e</item>
                <item name="Lib" type_name="gh_guid" type_code="9">16cf80bc-9018-cbdb-2238-976eb17fd30d</item>
                <item name="Name" type_name="gh_string" type_code="10">Honeybee_createHBSrfs</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="10">
                    <item name="CodeInput" type_name="gh_string" type_code="10">#
# Honeybee: A Plugin for Environmental Analysis (GPL) started by Mostapha Sadeghipour Roudsari
# 
# This file is part of Honeybee.
# 
# Copyright (c) 2013-2017, Mostapha Sadeghipour Roudsari &lt;mostapha@ladybug.tools&gt; 
# Honeybee is free software; you can redistribute it and/or modify 
# it under the terms of the GNU General Public License as published 
# by the Free Software Foundation; either version 3 of the License, 
# or (at your option) any later version. 
# 
# Honeybee is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of 
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Honeybee; If not, see &lt;http://www.gnu.org/licenses/&gt;.
# 
# @license GPL-3.0+ &lt;http://spdx.org/licenses/GPL-3.0+&gt;


"""
Create a Honeybee surface, which can be plugged into the "Run Daylight Sumilation" component or combined with other surfaces to make HBZones with the "createHBZones" component.
-
Provided by Honeybee 0.0.62

    Args:
        _geometry: List of Breps
        srfName_: Optional name for surface
        srfType_: Optional input for surface type &gt;
            0- 'WALL'
            0.5- 'UndergroundWall'
            1- 'ROOF'
            1.5- 'UndergroundCeiling'
            2- 'FLOOR'
            2.25- 'UndergroundSlab'
            2.5- 'SlabOnGrade'
            2.75- 'ExposedFloor'
            3- 'CEILING'
            4- 'AIRWALL'
            5- 'WINDOW'
            6- 'SHADING'
        EPBC_: 'Ground', 'Adiabatic', 'Outdoors'
        _EPConstruction_: Optional EnergyPlus construction
        _RADMaterial_: Optional Radiance Material
    Returns:
        readMe!:...
        HBZone: A Honeybee Surface, which can be plugged into the "Run Daylight Sumilation" component or combined with other surfaces to make HBZones with the "createHBZones" component.
"""

import rhinoscriptsyntax as rs
import Rhino as rc
import scriptcontext as sc
import os
import sys
import System
import Grasshopper.Kernel as gh
import uuid

ghenv.Component.Name = 'Honeybee_createHBSrfs'
ghenv.Component.NickName = 'createHBSrfs'
ghenv.Component.Message = 'VER 0.0.62\nJUL_28_2017'
ghenv.Component.IconDisplayMode = ghenv.Component.IconDisplayMode.application
ghenv.Component.Category = "Honeybee"
ghenv.Component.SubCategory = "00 | Honeybee"
#compatibleHBVersion = VER 0.0.57\nNOV_04_2016
#compatibleLBVersion = VER 0.0.59\nFEB_01_2015
try: ghenv.Component.AdditionalHelpFromDocStrings = "3"
except: pass


tolerance = sc.doc.ModelAbsoluteTolerance
import math


def main(geometry, srfName, srfType, EPBC, EPConstruction, RADMaterial):
    # import the classes
    if sc.sticky.has_key('honeybee_release'):

        try:
            if not sc.sticky['honeybee_release'].isCompatible(ghenv.Component): return -1
            if sc.sticky['honeybee_release'].isInputMissing(ghenv.Component): return -1
        except:
            warning = "You need a newer version of Honeybee to use this compoent." + \
            "Use updateHoneybee component to update userObjects.\n" + \
            "If you have already updated userObjects drag Honeybee_Honeybee component " + \
            "into canvas and try again."
            w = gh.GH_RuntimeMessageLevel.Warning
            ghenv.Component.AddRuntimeMessage(w, warning)
            return -1
            
        # don't customize this part
        hb_EPZone = sc.sticky["honeybee_EPZone"]
        hb_EPSrf = sc.sticky["honeybee_EPSurface"]
        hb_EPZoneSurface = sc.sticky["honeybee_EPZoneSurface"]
        hb_EPFenSurface = sc.sticky["honeybee_EPFenSurface"]
        hb_RADMaterialAUX = sc.sticky["honeybee_RADMaterialAUX"]
        hb_EPObjectsAux = sc.sticky["honeybee_EPObjectsAUX"]()
        
    else:
        print "You should first let Honeybee to fly..."
        w = gh.GH_RuntimeMessageLevel.Warning
        ghenv.Component.AddRuntimeMessage(w, "You should first let Honeybee to fly...")
        return
    
    # if the input is mesh, convert it to a surface
    try:
        # check if this is a mesh
        geometry.Faces[0].IsQuad
        # convert to brep
        geometry = rc.Geometry.Brep.CreateFromMesh(geometry, False)
    except:
        pass
    
    HBSurfaces = []
    originalSrfName = srfName
    
    for faceCount in range(geometry.Faces.Count):
        
        # 0. check if user input a name for this surface
        guid = str(uuid.uuid4())
        number = guid.split("-")[-1]
        
        if srfName != None:
            if originalSrfName == None: originalSrfName = srfName
            originalSrfName = originalSrfName.strip().replace(" ","_")
            if geometry.Faces.Count != 1:
                srfName = originalSrfName + "_" + `faceCount`
            else: srfName = originalSrfName
        else:
            # generate a random name
            # the name will be overwritten for energy simulation
            srfName = "".join(guid.split("-")[:-1])
        
        # 1. create initial surface
        HBSurface = hb_EPZoneSurface(geometry.Faces[faceCount].DuplicateFace(False), number, srfName)
        
        # If the user has set a construction as Air Wall, change the surface type to air wall.
        try:
            if EPConstruction.ToUpper() == "AIR WALL":
                if srfType == None or srfType == "4":
                    srfType = 4
                    infoMsg = "Setting the construction to Air Wall will also ensure that the surface has the air wall srfType_."
                    print infoMsg
                else:
                    infoMsg = "By manually setting the srfType_ to be something other than 4: Air Wall on this component and also setting the Air Wall construction, you are overriding the air mixing properties of the air wall and only using the air wall as a construction."
                    print infoMsg
        except: pass
        
        if srfType == 4 or srfType == 4.0 or srfType == "4" or srfType == "4.0":
            try:
                if EPConstruction.ToUpper() == "AIR WALL": pass
                else:
                    infoMsg = "Setting the srfType to 4 will also ensure that the surface has the air wall construction."
                    print infoMsg
            except:
                infoMsg = "Setting the srfType to 4 will also ensure that the surface has the air wall construction."
                print infoMsg
            EPConstruction = "AIR WALL"
        
        # 1.1 check for surface type
        if srfType!=None:
            try:
                # if user uses a number to input type
                try: surfaceType = int(srfType)
                except:
                    if float(srfType) == 0.5 or float(srfType) == 1.5 or float(srfType) == 2.25 or float(srfType) == 2.5 or float(srfType) == 2.75:
                        surfaceType = srfType
                    else: pass
                print "HBSurface Type has been set to " + HBSurface.srfType[float(srfType)]
                
                if surfaceType == 5.0:
                    warningMsg = "If you want to use this model for energy simulation, use addGlazing to add window to surfaces.\n" + \
                                 "It will be fine for Daylighting simulation though."
                    print warningMsg
                    ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Remark, warningMsg)
            except:
                # user uses text as an input (e.g.: wall)
                # convert it to a number if a valid input
                surfaceType = srfType.ToUpper()
                if surfaceType in HBSurface.srfType.keys():
                   surfaceType = HBSurface.srfType[surfaceType.ToUpper()]
                   print "HBSurface Type has been set to " + surfaceType.ToUpper()
            
            if surfaceType in HBSurface.srfType.keys():
                acceptableCombination = [[1,3], [3,1], [0,5], [5,0], [1,5], [5,1], [4,0], [4,1], [4,2], [4,3], [0,4], [1,4], [2,4], [3,4]]
                try:
                    if int(HBSurface.type) != surfaceType and [int(HBSurface.type), surfaceType] not in acceptableCombination:
                        warningMsg = "Normal direction of the surface is not expected for a " + HBSurface.srfType[surfaceType] + ". " + \
                                     "The surface is more likely a " + HBSurface.srfType[int(HBSurface.type)] + ".\n" + \
                                     "Honeybee won't overwrite the type so you may need to manually flip the surface."
                        print warningMsg
                    HBSurface.setType(surfaceType, isUserInput= True)
                except:
                    warningMsg = "You are using an old version of Honeybee_Honeybee! Update your files and try again."
                    print warningMsg
                    ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warningMsg)
                    return
            
        
        # 1.2 assign boundary condition
        if EPBC!= None:
            # only ground, adiabatic and outdoors is valid
            validBC = ['ground', 'adiabatic', 'outdoors']
            if EPBC.lower() in validBC:
                try:
                    HBSurface.setBC(EPBC, isUserInput= True)
                    
                    # change type of surface if BC is set to ground
                    if EPBC.lower()== "ground":
                        HBSurface.setType(int(HBSurface.type) + 0.5, isUserInput= True)
                    
                    
                    if EPBC.lower()== "ground" or EPBC.lower()== "adiabatic":
                        HBSurface.setSunExposure('NoSun')
                        HBSurface.setWindExposure('NoWind')
                    
                    print "HBSurface boundary condition has been set to " + EPBC.upper()
                except:
                    warningMsg = "You are using an old version of Honeybee_Honeybee! Update your files and try again."
                    print warningMsg
                    ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warningMsg)
                    return               
            else:
                print "HBSurface BOUNDARY CONDITION IS NOT VALID."
        
        # 1.3 assign construction for EnergyPlus
        if EPConstruction!=None:
            # if it is just the name of the material make sure it is already defined
            if len(EPConstruction.split("\n")) == 1:
                # if the material is not in the library add it to the library
                if not hb_EPObjectsAux.isEPConstruction(EPConstruction):
                    warningMsg = "Can't find " + EPConstruction + " in EP Construction Library.\n" + \
                                "Add the construction to the library and try again."
                    print warningMsg
                    ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warningMsg)
                    return
            else:
                # it is a full string
                if "CONSTRUCTION" in EPConstruction.upper():
                    added, EPConstruction = hb_EPObjectsAux.addEPObjectToLib(EPConstruction, overwrite = True)
                    
                    if not added:
                        msg = name + " is not added to the project library!"
                        ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, msg)
                        print msg
                        return
                elif "MATERIAL" in EPConstruction.upper():
                    msg = "Your connected EPConstruction_ is just a material and not a full construction. \n You have to pass it through an 'EnergyPlus Construction' component before connecting it here."
                    ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, msg)
                    print msg
                    return
                else:
                    msg = "Your connected EPConstruction_ is not a valid construction."
                    ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, msg)
                    print msg
                    return
            
            try:
                HBSurface.setEPConstruction(EPConstruction)
                print "HBSurface construction has been set to " + EPConstruction
            except:
                warningMsg = "You are using an old version of Honeybee_Honeybee! Update your files and try again."
                print warningMsg
                ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warningMsg)
                return                 
            
        # 1.4 assign RAD Material
        if RADMaterial!=None:
            # if it is just the name of the material make sure it is already defined
            if len(RADMaterial.split(" ")) == 1:
                # if the material is not in the library add it to the library
                if not hb_RADMaterialAUX.isMatrialExistInLibrary(RADMaterial):
                    warningMsg = "Can't find " + RADMaterial + " in RAD Material Library.\n" + \
                                "Add the material to the library and try again."
                    ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warningMsg)
                    return
                
                try:
                    HBSurface.setRADMaterial(RADMaterial)
                    print "HBSurface Radiance Material has been set to " + RADMaterial
                except Exception, e:
                    print e
                    warningMsg = "You are using an old version of Honeybee_Honeybee! Update your files and try again."
                    print warningMsg
                    ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warningMsg)
                    return
                
                addedToLib = True
            else:
                
                # try to add the material to the library
                addedToLib, HBSurface.RadMaterial = hb_RADMaterialAUX.analyseRadMaterials(RADMaterial, True)
                
            if addedToLib==False:
                warningMsg = "Failed to add " + RADMaterial + " to the Library."
                ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warningMsg)
                return
            
        HBSurfaces.append(HBSurface)
    
    # add to the hive
    hb_hive = sc.sticky["honeybee_Hive"]()
    HBSurface  = hb_hive.addToHoneybeeHive(HBSurfaces, ghenv.Component)
    
    return HBSurface
    
    
    

if _geometry != None:
    
    result= main(_geometry, srfName_, srfType_, EPBC_, _EPConstruction_, _RADMaterial_)
    
    if result!=-1:
        HBSurface = result
</item>
                    <item name="Description" type_name="gh_string" type_code="10">Create a Honeybee surface, which can be plugged into the "Run Daylight Sumilation" component or combined with other surfaces to make HBZones with the "createHBZones" component.
-
Provided by Honeybee 0.0.62</item>
                    <item name="EditorLocation" type_name="gh_drawing_point" type_code="30">
                      <X>1390</X>
                      <Y>67</Y>
                    </item>
                    <item name="EditorSize" type_name="gh_drawing_size" type_code="32">
                      <W>1169</W>
                      <H>812</H>
                    </item>
                    <item name="HideInput" type_name="gh_bool" type_code="1">true</item>
                    <item name="HideOutput" type_name="gh_bool" type_code="1">false</item>
                    <item name="IconOverride" type_name="gh_drawing_bitmap" type_code="37">
                      <bitmap length="794">iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOwAAADsABataJCQAAArxJREFUSEvNVWtIk1EYnpuXb6arVJTN0oQgo1RwI4WS8I9ZWoZNN2+L7lKpP0ItCNQsoqILWGo/igok7UerZXSTDDOisjIvBSX0o9uPhKjmFLWe3nffBzn7stWMeuBhh3Pe93nP955znin+NxQrlQqzNJ5U6IgtlZZo2HYlgMa3iXN5wVP4EMvXpUb2dx1PBp7nA0/z8LoxFamGUC5U7Yz6Q5g0GsHRXJUA9BUA97MxcCENA9Y04G4W0J2Ltw0pMGinDVNsiZjiHgzaIN9b57brMdKWCfTmYtCWDjtx4JJIHg82pzuLosOEui0x0AjKHsqdKUrII5ZozUrS4SMJ4EUBRq5nwH6Rdi0JjyevDV9dAfTkAg9NqMifw21rJSay4HjUlhtnA+/X42u7EXZuh4yoHO22NHy5kQG8W4v9G+dxkZOi5BgE+nuXNlUsADrNLu1wl5yDjmzcPLQIEWHq3ZKsC2orC6KBrhxZAXeIRyacLouHv4/qqKTpgjruoUcFnuSgZmusfIsI+w5umu9skVyyO+Tc2uI4LnBClByDQMG79EyZ3nnt5JLdIe5lo7k6Ebpgvz2SrAs8bxF/QdFPvoDwd89ApfKqqi+JAx57cAZ0ixp26BEgqGok2e/w8VIcOLXTAPRvwNDl5RO+4PHk2CH65YfWUrMYM6b7HZFkXVA4RfB2NJbTQT8j16TdDFLiRI+O1xwUgwfkSb15uEYHHKLx5RZtEyXlUZS5MPRVdz3ZM7noaNsq2K3LfhSnudFWMsM+C96cXYI1KRH9lMsv2Mup8gsEEK1mMr4PV8jMXq4WjY/86TMbHM+RsKNlJQqXRvKO2eCmcuLvIj4qzP/8sc0xwB2j85bwJWCbbiI7j9KqWThZDPUMlvAQ4VP74SR0Uuu02gD+kykSlyYPwbNC1Xu1QUIdjcPFqX8OheIbukQwObBaeUMAAAAASUVORK5CYII=</bitmap>
                    </item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">fe574e67-d933-4b3d-a466-41a259d71c7f</item>
                    <item name="Name" type_name="gh_string" type_code="10">Honeybee_createHBSrfs</item>
                    <item name="NickName" type_name="gh_string" type_code="10">createHBSrfs</item>
                  </items>
                  <chunks count="2">
                    <chunk name="Attributes">
                      <items count="2">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>384</X>
                          <Y>331</Y>
                          <W>200</W>
                          <H>124</H>
                        </item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>491</X>
                          <Y>393</Y>
                        </item>
                      </items>
                    </chunk>
                    <chunk name="ParameterData">
                      <items count="10">
                        <item name="InputCount" type_name="gh_int32" type_code="3">6</item>
                        <item name="InputId" index="0" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="1" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="2" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="3" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="4" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="5" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="OutputCount" type_name="gh_int32" type_code="3">2</item>
                        <item name="OutputId" index="0" type_name="gh_guid" type_code="9">3ede854e-c753-40eb-84cb-b48008f14fd4</item>
                        <item name="OutputId" index="1" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                      </items>
                      <chunks count="8">
                        <chunk name="InputParam" index="0">
                          <items count="11">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">List of Breps</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">d7bfbaa3-1ecb-477d-b571-2705fde03e40</item>
                            <item name="Name" type_name="gh_string" type_code="10">_geometry</item>
                            <item name="NickName" type_name="gh_string" type_code="10">_geometry</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="Source" index="0" type_name="gh_guid" type_code="9">cd44ae03-dea6-468a-82ea-529113a5833f</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">c37956f4-d39c-49c7-af71-1e87f8031b26</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>386</X>
                                  <Y>333</Y>
                                  <W>90</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>432.5</X>
                                  <Y>343</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="1">
                          <items count="10">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Optional name for surface</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">e81946d6-b6d0-4c7d-b20f-dec89483b0ed</item>
                            <item name="Name" type_name="gh_string" type_code="10">srfName_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">srfName_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">37261734-eec7-4f50-b6a8-b8d1f3c4396b</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>386</X>
                                  <Y>353</Y>
                                  <W>90</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>432.5</X>
                                  <Y>363</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="2">
                          <items count="11">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Optional input for surface type &gt;
0- 'WALL'
0.5- 'UndergroundWall'
1- 'ROOF'
1.5- 'UndergroundCeiling'
2- 'FLOOR'
2.25- 'UndergroundSlab'
2.5- 'SlabOnGrade'
2.75- 'ExposedFloor'
3- 'CEILING'
4- 'AIRWALL'
5- 'WINDOW'
6- 'SHADING'</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">38f14f1b-bf54-4e20-a481-d473f6cb1359</item>
                            <item name="Name" type_name="gh_string" type_code="10">srfType_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">srfType_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="Source" index="0" type_name="gh_guid" type_code="9">38853f51-9076-446d-b3dd-0fb0b0977a96</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">37261734-eec7-4f50-b6a8-b8d1f3c4396b</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>386</X>
                                  <Y>373</Y>
                                  <W>90</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>432.5</X>
                                  <Y>383</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="3">
                          <items count="10">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">'Ground', 'Adiabatic', 'Outdoors'</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">2c582acd-37e4-4922-b60f-dbe56d9d19d4</item>
                            <item name="Name" type_name="gh_string" type_code="10">EPBC_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">EPBC_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">37261734-eec7-4f50-b6a8-b8d1f3c4396b</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>386</X>
                                  <Y>393</Y>
                                  <W>90</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>432.5</X>
                                  <Y>403</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="4">
                          <items count="10">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Optional EnergyPlus construction</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">2065575f-eff5-4031-96b8-601064fcc589</item>
                            <item name="Name" type_name="gh_string" type_code="10">_EPConstruction_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">_EPConstruction_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">37261734-eec7-4f50-b6a8-b8d1f3c4396b</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>386</X>
                                  <Y>413</Y>
                                  <W>90</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>432.5</X>
                                  <Y>423</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="5">
                          <items count="10">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Optional Radiance Material</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">cfad5b69-c209-4823-b88c-ad13d6e8fef0</item>
                            <item name="Name" type_name="gh_string" type_code="10">_RADMaterial_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">_RADMaterial_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">37261734-eec7-4f50-b6a8-b8d1f3c4396b</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>386</X>
                                  <Y>433</Y>
                                  <W>90</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>432.5</X>
                                  <Y>443</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="0">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10">...</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">dd03fd4a-b856-478a-af9c-7ffa2ba61e53</item>
                            <item name="Name" type_name="gh_string" type_code="10">out</item>
                            <item name="NickName" type_name="gh_string" type_code="10">readMe!</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>506</X>
                                  <Y>333</Y>
                                  <W>76</W>
                                  <H>60</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>536</X>
                                  <Y>363</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="1">
                          <items count="7">
                            <item name="Description" type_name="gh_string" type_code="10">Honeybee zone as the result</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">bd800c62-36d6-4351-9daa-5cde178ed5e3</item>
                            <item name="Name" type_name="gh_string" type_code="10">HBSurface</item>
                            <item name="NickName" type_name="gh_string" type_code="10">HBSurface</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SimplifyData" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>506</X>
                                  <Y>393</Y>
                                  <W>76</W>
                                  <H>60</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>536</X>
                                  <Y>423</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                      </chunks>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="28">
              <items count="3">
                <item name="GUID" type_name="gh_guid" type_code="9">410755b1-224a-4c1e-a407-bf32fb45ea7e</item>
                <item name="Lib" type_name="gh_guid" type_code="9">16cf80bc-9018-cbdb-2238-976eb17fd30d</item>
                <item name="Name" type_name="gh_string" type_code="10">Honeybee_createHBSrfs</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="10">
                    <item name="CodeInput" type_name="gh_string" type_code="10">#
# Honeybee: A Plugin for Environmental Analysis (GPL) started by Mostapha Sadeghipour Roudsari
# 
# This file is part of Honeybee.
# 
# Copyright (c) 2013-2017, Mostapha Sadeghipour Roudsari &lt;mostapha@ladybug.tools&gt; 
# Honeybee is free software; you can redistribute it and/or modify 
# it under the terms of the GNU General Public License as published 
# by the Free Software Foundation; either version 3 of the License, 
# or (at your option) any later version. 
# 
# Honeybee is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of 
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Honeybee; If not, see &lt;http://www.gnu.org/licenses/&gt;.
# 
# @license GPL-3.0+ &lt;http://spdx.org/licenses/GPL-3.0+&gt;


"""
Create a Honeybee surface, which can be plugged into the "Run Daylight Sumilation" component or combined with other surfaces to make HBZones with the "createHBZones" component.
-
Provided by Honeybee 0.0.62

    Args:
        _geometry: List of Breps
        srfName_: Optional name for surface
        srfType_: Optional input for surface type &gt;
            0- 'WALL'
            0.5- 'UndergroundWall'
            1- 'ROOF'
            1.5- 'UndergroundCeiling'
            2- 'FLOOR'
            2.25- 'UndergroundSlab'
            2.5- 'SlabOnGrade'
            2.75- 'ExposedFloor'
            3- 'CEILING'
            4- 'AIRWALL'
            5- 'WINDOW'
            6- 'SHADING'
        EPBC_: 'Ground', 'Adiabatic', 'Outdoors'
        _EPConstruction_: Optional EnergyPlus construction
        _RADMaterial_: Optional Radiance Material
    Returns:
        readMe!:...
        HBZone: A Honeybee Surface, which can be plugged into the "Run Daylight Sumilation" component or combined with other surfaces to make HBZones with the "createHBZones" component.
"""

import rhinoscriptsyntax as rs
import Rhino as rc
import scriptcontext as sc
import os
import sys
import System
import Grasshopper.Kernel as gh
import uuid

ghenv.Component.Name = 'Honeybee_createHBSrfs'
ghenv.Component.NickName = 'createHBSrfs'
ghenv.Component.Message = 'VER 0.0.62\nJUL_28_2017'
ghenv.Component.IconDisplayMode = ghenv.Component.IconDisplayMode.application
ghenv.Component.Category = "Honeybee"
ghenv.Component.SubCategory = "00 | Honeybee"
#compatibleHBVersion = VER 0.0.57\nNOV_04_2016
#compatibleLBVersion = VER 0.0.59\nFEB_01_2015
try: ghenv.Component.AdditionalHelpFromDocStrings = "3"
except: pass


tolerance = sc.doc.ModelAbsoluteTolerance
import math


def main(geometry, srfName, srfType, EPBC, EPConstruction, RADMaterial):
    # import the classes
    if sc.sticky.has_key('honeybee_release'):

        try:
            if not sc.sticky['honeybee_release'].isCompatible(ghenv.Component): return -1
            if sc.sticky['honeybee_release'].isInputMissing(ghenv.Component): return -1
        except:
            warning = "You need a newer version of Honeybee to use this compoent." + \
            "Use updateHoneybee component to update userObjects.\n" + \
            "If you have already updated userObjects drag Honeybee_Honeybee component " + \
            "into canvas and try again."
            w = gh.GH_RuntimeMessageLevel.Warning
            ghenv.Component.AddRuntimeMessage(w, warning)
            return -1
            
        # don't customize this part
        hb_EPZone = sc.sticky["honeybee_EPZone"]
        hb_EPSrf = sc.sticky["honeybee_EPSurface"]
        hb_EPZoneSurface = sc.sticky["honeybee_EPZoneSurface"]
        hb_EPFenSurface = sc.sticky["honeybee_EPFenSurface"]
        hb_RADMaterialAUX = sc.sticky["honeybee_RADMaterialAUX"]
        hb_EPObjectsAux = sc.sticky["honeybee_EPObjectsAUX"]()
        
    else:
        print "You should first let Honeybee to fly..."
        w = gh.GH_RuntimeMessageLevel.Warning
        ghenv.Component.AddRuntimeMessage(w, "You should first let Honeybee to fly...")
        return
    
    # if the input is mesh, convert it to a surface
    try:
        # check if this is a mesh
        geometry.Faces[0].IsQuad
        # convert to brep
        geometry = rc.Geometry.Brep.CreateFromMesh(geometry, False)
    except:
        pass
    
    HBSurfaces = []
    originalSrfName = srfName
    
    for faceCount in range(geometry.Faces.Count):
        
        # 0. check if user input a name for this surface
        guid = str(uuid.uuid4())
        number = guid.split("-")[-1]
        
        if srfName != None:
            if originalSrfName == None: originalSrfName = srfName
            originalSrfName = originalSrfName.strip().replace(" ","_")
            if geometry.Faces.Count != 1:
                srfName = originalSrfName + "_" + `faceCount`
            else: srfName = originalSrfName
        else:
            # generate a random name
            # the name will be overwritten for energy simulation
            srfName = "".join(guid.split("-")[:-1])
        
        # 1. create initial surface
        HBSurface = hb_EPZoneSurface(geometry.Faces[faceCount].DuplicateFace(False), number, srfName)
        
        # If the user has set a construction as Air Wall, change the surface type to air wall.
        try:
            if EPConstruction.ToUpper() == "AIR WALL":
                if srfType == None or srfType == "4":
                    srfType = 4
                    infoMsg = "Setting the construction to Air Wall will also ensure that the surface has the air wall srfType_."
                    print infoMsg
                else:
                    infoMsg = "By manually setting the srfType_ to be something other than 4: Air Wall on this component and also setting the Air Wall construction, you are overriding the air mixing properties of the air wall and only using the air wall as a construction."
                    print infoMsg
        except: pass
        
        if srfType == 4 or srfType == 4.0 or srfType == "4" or srfType == "4.0":
            try:
                if EPConstruction.ToUpper() == "AIR WALL": pass
                else:
                    infoMsg = "Setting the srfType to 4 will also ensure that the surface has the air wall construction."
                    print infoMsg
            except:
                infoMsg = "Setting the srfType to 4 will also ensure that the surface has the air wall construction."
                print infoMsg
            EPConstruction = "AIR WALL"
        
        # 1.1 check for surface type
        if srfType!=None:
            try:
                # if user uses a number to input type
                try: surfaceType = int(srfType)
                except:
                    if float(srfType) == 0.5 or float(srfType) == 1.5 or float(srfType) == 2.25 or float(srfType) == 2.5 or float(srfType) == 2.75:
                        surfaceType = srfType
                    else: pass
                print "HBSurface Type has been set to " + HBSurface.srfType[float(srfType)]
                
                if surfaceType == 5.0:
                    warningMsg = "If you want to use this model for energy simulation, use addGlazing to add window to surfaces.\n" + \
                                 "It will be fine for Daylighting simulation though."
                    print warningMsg
                    ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Remark, warningMsg)
            except:
                # user uses text as an input (e.g.: wall)
                # convert it to a number if a valid input
                surfaceType = srfType.ToUpper()
                if surfaceType in HBSurface.srfType.keys():
                   surfaceType = HBSurface.srfType[surfaceType.ToUpper()]
                   print "HBSurface Type has been set to " + surfaceType.ToUpper()
            
            if surfaceType in HBSurface.srfType.keys():
                acceptableCombination = [[1,3], [3,1], [0,5], [5,0], [1,5], [5,1], [4,0], [4,1], [4,2], [4,3], [0,4], [1,4], [2,4], [3,4]]
                try:
                    if int(HBSurface.type) != surfaceType and [int(HBSurface.type), surfaceType] not in acceptableCombination:
                        warningMsg = "Normal direction of the surface is not expected for a " + HBSurface.srfType[surfaceType] + ". " + \
                                     "The surface is more likely a " + HBSurface.srfType[int(HBSurface.type)] + ".\n" + \
                                     "Honeybee won't overwrite the type so you may need to manually flip the surface."
                        print warningMsg
                    HBSurface.setType(surfaceType, isUserInput= True)
                except:
                    warningMsg = "You are using an old version of Honeybee_Honeybee! Update your files and try again."
                    print warningMsg
                    ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warningMsg)
                    return
            
        
        # 1.2 assign boundary condition
        if EPBC!= None:
            # only ground, adiabatic and outdoors is valid
            validBC = ['ground', 'adiabatic', 'outdoors']
            if EPBC.lower() in validBC:
                try:
                    HBSurface.setBC(EPBC, isUserInput= True)
                    
                    # change type of surface if BC is set to ground
                    if EPBC.lower()== "ground":
                        HBSurface.setType(int(HBSurface.type) + 0.5, isUserInput= True)
                    
                    
                    if EPBC.lower()== "ground" or EPBC.lower()== "adiabatic":
                        HBSurface.setSunExposure('NoSun')
                        HBSurface.setWindExposure('NoWind')
                    
                    print "HBSurface boundary condition has been set to " + EPBC.upper()
                except:
                    warningMsg = "You are using an old version of Honeybee_Honeybee! Update your files and try again."
                    print warningMsg
                    ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warningMsg)
                    return               
            else:
                print "HBSurface BOUNDARY CONDITION IS NOT VALID."
        
        # 1.3 assign construction for EnergyPlus
        if EPConstruction!=None:
            # if it is just the name of the material make sure it is already defined
            if len(EPConstruction.split("\n")) == 1:
                # if the material is not in the library add it to the library
                if not hb_EPObjectsAux.isEPConstruction(EPConstruction):
                    warningMsg = "Can't find " + EPConstruction + " in EP Construction Library.\n" + \
                                "Add the construction to the library and try again."
                    print warningMsg
                    ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warningMsg)
                    return
            else:
                # it is a full string
                if "CONSTRUCTION" in EPConstruction.upper():
                    added, EPConstruction = hb_EPObjectsAux.addEPObjectToLib(EPConstruction, overwrite = True)
                    
                    if not added:
                        msg = name + " is not added to the project library!"
                        ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, msg)
                        print msg
                        return
                elif "MATERIAL" in EPConstruction.upper():
                    msg = "Your connected EPConstruction_ is just a material and not a full construction. \n You have to pass it through an 'EnergyPlus Construction' component before connecting it here."
                    ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, msg)
                    print msg
                    return
                else:
                    msg = "Your connected EPConstruction_ is not a valid construction."
                    ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, msg)
                    print msg
                    return
            
            try:
                HBSurface.setEPConstruction(EPConstruction)
                print "HBSurface construction has been set to " + EPConstruction
            except:
                warningMsg = "You are using an old version of Honeybee_Honeybee! Update your files and try again."
                print warningMsg
                ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warningMsg)
                return                 
            
        # 1.4 assign RAD Material
        if RADMaterial!=None:
            # if it is just the name of the material make sure it is already defined
            if len(RADMaterial.split(" ")) == 1:
                # if the material is not in the library add it to the library
                if not hb_RADMaterialAUX.isMatrialExistInLibrary(RADMaterial):
                    warningMsg = "Can't find " + RADMaterial + " in RAD Material Library.\n" + \
                                "Add the material to the library and try again."
                    ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warningMsg)
                    return
                
                try:
                    HBSurface.setRADMaterial(RADMaterial)
                    print "HBSurface Radiance Material has been set to " + RADMaterial
                except Exception, e:
                    print e
                    warningMsg = "You are using an old version of Honeybee_Honeybee! Update your files and try again."
                    print warningMsg
                    ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warningMsg)
                    return
                
                addedToLib = True
            else:
                
                # try to add the material to the library
                addedToLib, HBSurface.RadMaterial = hb_RADMaterialAUX.analyseRadMaterials(RADMaterial, True)
                
            if addedToLib==False:
                warningMsg = "Failed to add " + RADMaterial + " to the Library."
                ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warningMsg)
                return
            
        HBSurfaces.append(HBSurface)
    
    # add to the hive
    hb_hive = sc.sticky["honeybee_Hive"]()
    HBSurface  = hb_hive.addToHoneybeeHive(HBSurfaces, ghenv.Component)
    
    return HBSurface
    
    
    

if _geometry != None:
    
    result= main(_geometry, srfName_, srfType_, EPBC_, _EPConstruction_, _RADMaterial_)
    
    if result!=-1:
        HBSurface = result
</item>
                    <item name="Description" type_name="gh_string" type_code="10">Create a Honeybee surface, which can be plugged into the "Run Daylight Sumilation" component or combined with other surfaces to make HBZones with the "createHBZones" component.
-
Provided by Honeybee 0.0.62</item>
                    <item name="EditorLocation" type_name="gh_drawing_point" type_code="30">
                      <X>1390</X>
                      <Y>67</Y>
                    </item>
                    <item name="EditorSize" type_name="gh_drawing_size" type_code="32">
                      <W>1169</W>
                      <H>812</H>
                    </item>
                    <item name="HideInput" type_name="gh_bool" type_code="1">true</item>
                    <item name="HideOutput" type_name="gh_bool" type_code="1">false</item>
                    <item name="IconOverride" type_name="gh_drawing_bitmap" type_code="37">
                      <bitmap length="794">iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOwAAADsABataJCQAAArxJREFUSEvNVWtIk1EYnpuXb6arVJTN0oQgo1RwI4WS8I9ZWoZNN2+L7lKpP0ItCNQsoqILWGo/igok7UerZXSTDDOisjIvBSX0o9uPhKjmFLWe3nffBzn7stWMeuBhh3Pe93nP955znin+NxQrlQqzNJ5U6IgtlZZo2HYlgMa3iXN5wVP4EMvXpUb2dx1PBp7nA0/z8LoxFamGUC5U7Yz6Q5g0GsHRXJUA9BUA97MxcCENA9Y04G4W0J2Ltw0pMGinDVNsiZjiHgzaIN9b57brMdKWCfTmYtCWDjtx4JJIHg82pzuLosOEui0x0AjKHsqdKUrII5ZozUrS4SMJ4EUBRq5nwH6Rdi0JjyevDV9dAfTkAg9NqMifw21rJSay4HjUlhtnA+/X42u7EXZuh4yoHO22NHy5kQG8W4v9G+dxkZOi5BgE+nuXNlUsADrNLu1wl5yDjmzcPLQIEWHq3ZKsC2orC6KBrhxZAXeIRyacLouHv4/qqKTpgjruoUcFnuSgZmusfIsI+w5umu9skVyyO+Tc2uI4LnBClByDQMG79EyZ3nnt5JLdIe5lo7k6Ebpgvz2SrAs8bxF/QdFPvoDwd89ApfKqqi+JAx57cAZ0ixp26BEgqGok2e/w8VIcOLXTAPRvwNDl5RO+4PHk2CH65YfWUrMYM6b7HZFkXVA4RfB2NJbTQT8j16TdDFLiRI+O1xwUgwfkSb15uEYHHKLx5RZtEyXlUZS5MPRVdz3ZM7noaNsq2K3LfhSnudFWMsM+C96cXYI1KRH9lMsv2Mup8gsEEK1mMr4PV8jMXq4WjY/86TMbHM+RsKNlJQqXRvKO2eCmcuLvIj4qzP/8sc0xwB2j85bwJWCbbiI7j9KqWThZDPUMlvAQ4VP74SR0Uuu02gD+kykSlyYPwbNC1Xu1QUIdjcPFqX8OheIbukQwObBaeUMAAAAASUVORK5CYII=</bitmap>
                    </item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">eac949fa-749e-444a-9103-71ea0df07385</item>
                    <item name="Name" type_name="gh_string" type_code="10">Honeybee_createHBSrfs</item>
                    <item name="NickName" type_name="gh_string" type_code="10">createHBSrfs</item>
                  </items>
                  <chunks count="2">
                    <chunk name="Attributes">
                      <items count="2">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>371</X>
                          <Y>793</Y>
                          <W>200</W>
                          <H>124</H>
                        </item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>478</X>
                          <Y>855</Y>
                        </item>
                      </items>
                    </chunk>
                    <chunk name="ParameterData">
                      <items count="10">
                        <item name="InputCount" type_name="gh_int32" type_code="3">6</item>
                        <item name="InputId" index="0" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="1" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="2" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="3" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="4" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="5" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="OutputCount" type_name="gh_int32" type_code="3">2</item>
                        <item name="OutputId" index="0" type_name="gh_guid" type_code="9">3ede854e-c753-40eb-84cb-b48008f14fd4</item>
                        <item name="OutputId" index="1" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                      </items>
                      <chunks count="8">
                        <chunk name="InputParam" index="0">
                          <items count="11">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">List of Breps</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">56b84afd-7c75-488a-855a-d244f38af575</item>
                            <item name="Name" type_name="gh_string" type_code="10">_geometry</item>
                            <item name="NickName" type_name="gh_string" type_code="10">_geometry</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="Source" index="0" type_name="gh_guid" type_code="9">bf26dc1f-9b71-438f-9dfc-1ae52be325a9</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">c37956f4-d39c-49c7-af71-1e87f8031b26</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>373</X>
                                  <Y>795</Y>
                                  <W>90</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>419.5</X>
                                  <Y>805</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="1">
                          <items count="10">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Optional name for surface</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">08967aeb-8607-4df7-9fcb-4ef225949d36</item>
                            <item name="Name" type_name="gh_string" type_code="10">srfName_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">srfName_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">37261734-eec7-4f50-b6a8-b8d1f3c4396b</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>373</X>
                                  <Y>815</Y>
                                  <W>90</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>419.5</X>
                                  <Y>825</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="2">
                          <items count="11">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Optional input for surface type &gt;
0- 'WALL'
0.5- 'UndergroundWall'
1- 'ROOF'
1.5- 'UndergroundCeiling'
2- 'FLOOR'
2.25- 'UndergroundSlab'
2.5- 'SlabOnGrade'
2.75- 'ExposedFloor'
3- 'CEILING'
4- 'AIRWALL'
5- 'WINDOW'
6- 'SHADING'</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">96053057-46b8-4ea0-a2c7-e517da2afc0c</item>
                            <item name="Name" type_name="gh_string" type_code="10">srfType_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">srfType_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="Source" index="0" type_name="gh_guid" type_code="9">adfe25f9-0952-40dd-95e2-71c4ca926118</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">37261734-eec7-4f50-b6a8-b8d1f3c4396b</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>373</X>
                                  <Y>835</Y>
                                  <W>90</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>419.5</X>
                                  <Y>845</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="3">
                          <items count="10">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">'Ground', 'Adiabatic', 'Outdoors'</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">8d373210-2c27-4a09-a34e-c4929eaddbe7</item>
                            <item name="Name" type_name="gh_string" type_code="10">EPBC_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">EPBC_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">37261734-eec7-4f50-b6a8-b8d1f3c4396b</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>373</X>
                                  <Y>855</Y>
                                  <W>90</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>419.5</X>
                                  <Y>865</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="4">
                          <items count="10">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Optional EnergyPlus construction</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">f6294921-735f-4037-a70a-f4af9edff66b</item>
                            <item name="Name" type_name="gh_string" type_code="10">_EPConstruction_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">_EPConstruction_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">37261734-eec7-4f50-b6a8-b8d1f3c4396b</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>373</X>
                                  <Y>875</Y>
                                  <W>90</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>419.5</X>
                                  <Y>885</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="5">
                          <items count="10">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Optional Radiance Material</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">1a6c8e90-8111-4d89-ba5d-4d933cacc629</item>
                            <item name="Name" type_name="gh_string" type_code="10">_RADMaterial_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">_RADMaterial_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">37261734-eec7-4f50-b6a8-b8d1f3c4396b</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>373</X>
                                  <Y>895</Y>
                                  <W>90</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>419.5</X>
                                  <Y>905</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="0">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10">...</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">42486b99-ed2d-456f-8648-286be7f1ca58</item>
                            <item name="Name" type_name="gh_string" type_code="10">out</item>
                            <item name="NickName" type_name="gh_string" type_code="10">readMe!</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>493</X>
                                  <Y>795</Y>
                                  <W>76</W>
                                  <H>60</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>523</X>
                                  <Y>825</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="1">
                          <items count="7">
                            <item name="Description" type_name="gh_string" type_code="10">Honeybee zone as the result</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">19443d75-b3da-46bd-bf57-eb35092daef6</item>
                            <item name="Name" type_name="gh_string" type_code="10">HBSurface</item>
                            <item name="NickName" type_name="gh_string" type_code="10">HBSurface</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SimplifyData" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>493</X>
                                  <Y>855</Y>
                                  <W>76</W>
                                  <H>60</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>523</X>
                                  <Y>885</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                      </chunks>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="29">
              <items count="3">
                <item name="GUID" type_name="gh_guid" type_code="9">410755b1-224a-4c1e-a407-bf32fb45ea7e</item>
                <item name="Lib" type_name="gh_guid" type_code="9">16cf80bc-9018-cbdb-2238-976eb17fd30d</item>
                <item name="Name" type_name="gh_string" type_code="10">Honeybee_createHBSrfs</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="10">
                    <item name="CodeInput" type_name="gh_string" type_code="10">#
# Honeybee: A Plugin for Environmental Analysis (GPL) started by Mostapha Sadeghipour Roudsari
# 
# This file is part of Honeybee.
# 
# Copyright (c) 2013-2017, Mostapha Sadeghipour Roudsari &lt;mostapha@ladybug.tools&gt; 
# Honeybee is free software; you can redistribute it and/or modify 
# it under the terms of the GNU General Public License as published 
# by the Free Software Foundation; either version 3 of the License, 
# or (at your option) any later version. 
# 
# Honeybee is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of 
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Honeybee; If not, see &lt;http://www.gnu.org/licenses/&gt;.
# 
# @license GPL-3.0+ &lt;http://spdx.org/licenses/GPL-3.0+&gt;


"""
Create a Honeybee surface, which can be plugged into the "Run Daylight Sumilation" component or combined with other surfaces to make HBZones with the "createHBZones" component.
-
Provided by Honeybee 0.0.62

    Args:
        _geometry: List of Breps
        srfName_: Optional name for surface
        srfType_: Optional input for surface type &gt;
            0- 'WALL'
            0.5- 'UndergroundWall'
            1- 'ROOF'
            1.5- 'UndergroundCeiling'
            2- 'FLOOR'
            2.25- 'UndergroundSlab'
            2.5- 'SlabOnGrade'
            2.75- 'ExposedFloor'
            3- 'CEILING'
            4- 'AIRWALL'
            5- 'WINDOW'
            6- 'SHADING'
        EPBC_: 'Ground', 'Adiabatic', 'Outdoors'
        _EPConstruction_: Optional EnergyPlus construction
        _RADMaterial_: Optional Radiance Material
    Returns:
        readMe!:...
        HBZone: A Honeybee Surface, which can be plugged into the "Run Daylight Sumilation" component or combined with other surfaces to make HBZones with the "createHBZones" component.
"""

import rhinoscriptsyntax as rs
import Rhino as rc
import scriptcontext as sc
import os
import sys
import System
import Grasshopper.Kernel as gh
import uuid

ghenv.Component.Name = 'Honeybee_createHBSrfs'
ghenv.Component.NickName = 'createHBSrfs'
ghenv.Component.Message = 'VER 0.0.62\nJUL_28_2017'
ghenv.Component.IconDisplayMode = ghenv.Component.IconDisplayMode.application
ghenv.Component.Category = "Honeybee"
ghenv.Component.SubCategory = "00 | Honeybee"
#compatibleHBVersion = VER 0.0.57\nNOV_04_2016
#compatibleLBVersion = VER 0.0.59\nFEB_01_2015
try: ghenv.Component.AdditionalHelpFromDocStrings = "3"
except: pass


tolerance = sc.doc.ModelAbsoluteTolerance
import math


def main(geometry, srfName, srfType, EPBC, EPConstruction, RADMaterial):
    # import the classes
    if sc.sticky.has_key('honeybee_release'):

        try:
            if not sc.sticky['honeybee_release'].isCompatible(ghenv.Component): return -1
            if sc.sticky['honeybee_release'].isInputMissing(ghenv.Component): return -1
        except:
            warning = "You need a newer version of Honeybee to use this compoent." + \
            "Use updateHoneybee component to update userObjects.\n" + \
            "If you have already updated userObjects drag Honeybee_Honeybee component " + \
            "into canvas and try again."
            w = gh.GH_RuntimeMessageLevel.Warning
            ghenv.Component.AddRuntimeMessage(w, warning)
            return -1
            
        # don't customize this part
        hb_EPZone = sc.sticky["honeybee_EPZone"]
        hb_EPSrf = sc.sticky["honeybee_EPSurface"]
        hb_EPZoneSurface = sc.sticky["honeybee_EPZoneSurface"]
        hb_EPFenSurface = sc.sticky["honeybee_EPFenSurface"]
        hb_RADMaterialAUX = sc.sticky["honeybee_RADMaterialAUX"]
        hb_EPObjectsAux = sc.sticky["honeybee_EPObjectsAUX"]()
        
    else:
        print "You should first let Honeybee to fly..."
        w = gh.GH_RuntimeMessageLevel.Warning
        ghenv.Component.AddRuntimeMessage(w, "You should first let Honeybee to fly...")
        return
    
    # if the input is mesh, convert it to a surface
    try:
        # check if this is a mesh
        geometry.Faces[0].IsQuad
        # convert to brep
        geometry = rc.Geometry.Brep.CreateFromMesh(geometry, False)
    except:
        pass
    
    HBSurfaces = []
    originalSrfName = srfName
    
    for faceCount in range(geometry.Faces.Count):
        
        # 0. check if user input a name for this surface
        guid = str(uuid.uuid4())
        number = guid.split("-")[-1]
        
        if srfName != None:
            if originalSrfName == None: originalSrfName = srfName
            originalSrfName = originalSrfName.strip().replace(" ","_")
            if geometry.Faces.Count != 1:
                srfName = originalSrfName + "_" + `faceCount`
            else: srfName = originalSrfName
        else:
            # generate a random name
            # the name will be overwritten for energy simulation
            srfName = "".join(guid.split("-")[:-1])
        
        # 1. create initial surface
        HBSurface = hb_EPZoneSurface(geometry.Faces[faceCount].DuplicateFace(False), number, srfName)
        
        # If the user has set a construction as Air Wall, change the surface type to air wall.
        try:
            if EPConstruction.ToUpper() == "AIR WALL":
                if srfType == None or srfType == "4":
                    srfType = 4
                    infoMsg = "Setting the construction to Air Wall will also ensure that the surface has the air wall srfType_."
                    print infoMsg
                else:
                    infoMsg = "By manually setting the srfType_ to be something other than 4: Air Wall on this component and also setting the Air Wall construction, you are overriding the air mixing properties of the air wall and only using the air wall as a construction."
                    print infoMsg
        except: pass
        
        if srfType == 4 or srfType == 4.0 or srfType == "4" or srfType == "4.0":
            try:
                if EPConstruction.ToUpper() == "AIR WALL": pass
                else:
                    infoMsg = "Setting the srfType to 4 will also ensure that the surface has the air wall construction."
                    print infoMsg
            except:
                infoMsg = "Setting the srfType to 4 will also ensure that the surface has the air wall construction."
                print infoMsg
            EPConstruction = "AIR WALL"
        
        # 1.1 check for surface type
        if srfType!=None:
            try:
                # if user uses a number to input type
                try: surfaceType = int(srfType)
                except:
                    if float(srfType) == 0.5 or float(srfType) == 1.5 or float(srfType) == 2.25 or float(srfType) == 2.5 or float(srfType) == 2.75:
                        surfaceType = srfType
                    else: pass
                print "HBSurface Type has been set to " + HBSurface.srfType[float(srfType)]
                
                if surfaceType == 5.0:
                    warningMsg = "If you want to use this model for energy simulation, use addGlazing to add window to surfaces.\n" + \
                                 "It will be fine for Daylighting simulation though."
                    print warningMsg
                    ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Remark, warningMsg)
            except:
                # user uses text as an input (e.g.: wall)
                # convert it to a number if a valid input
                surfaceType = srfType.ToUpper()
                if surfaceType in HBSurface.srfType.keys():
                   surfaceType = HBSurface.srfType[surfaceType.ToUpper()]
                   print "HBSurface Type has been set to " + surfaceType.ToUpper()
            
            if surfaceType in HBSurface.srfType.keys():
                acceptableCombination = [[1,3], [3,1], [0,5], [5,0], [1,5], [5,1], [4,0], [4,1], [4,2], [4,3], [0,4], [1,4], [2,4], [3,4]]
                try:
                    if int(HBSurface.type) != surfaceType and [int(HBSurface.type), surfaceType] not in acceptableCombination:
                        warningMsg = "Normal direction of the surface is not expected for a " + HBSurface.srfType[surfaceType] + ". " + \
                                     "The surface is more likely a " + HBSurface.srfType[int(HBSurface.type)] + ".\n" + \
                                     "Honeybee won't overwrite the type so you may need to manually flip the surface."
                        print warningMsg
                    HBSurface.setType(surfaceType, isUserInput= True)
                except:
                    warningMsg = "You are using an old version of Honeybee_Honeybee! Update your files and try again."
                    print warningMsg
                    ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warningMsg)
                    return
            
        
        # 1.2 assign boundary condition
        if EPBC!= None:
            # only ground, adiabatic and outdoors is valid
            validBC = ['ground', 'adiabatic', 'outdoors']
            if EPBC.lower() in validBC:
                try:
                    HBSurface.setBC(EPBC, isUserInput= True)
                    
                    # change type of surface if BC is set to ground
                    if EPBC.lower()== "ground":
                        HBSurface.setType(int(HBSurface.type) + 0.5, isUserInput= True)
                    
                    
                    if EPBC.lower()== "ground" or EPBC.lower()== "adiabatic":
                        HBSurface.setSunExposure('NoSun')
                        HBSurface.setWindExposure('NoWind')
                    
                    print "HBSurface boundary condition has been set to " + EPBC.upper()
                except:
                    warningMsg = "You are using an old version of Honeybee_Honeybee! Update your files and try again."
                    print warningMsg
                    ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warningMsg)
                    return               
            else:
                print "HBSurface BOUNDARY CONDITION IS NOT VALID."
        
        # 1.3 assign construction for EnergyPlus
        if EPConstruction!=None:
            # if it is just the name of the material make sure it is already defined
            if len(EPConstruction.split("\n")) == 1:
                # if the material is not in the library add it to the library
                if not hb_EPObjectsAux.isEPConstruction(EPConstruction):
                    warningMsg = "Can't find " + EPConstruction + " in EP Construction Library.\n" + \
                                "Add the construction to the library and try again."
                    print warningMsg
                    ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warningMsg)
                    return
            else:
                # it is a full string
                if "CONSTRUCTION" in EPConstruction.upper():
                    added, EPConstruction = hb_EPObjectsAux.addEPObjectToLib(EPConstruction, overwrite = True)
                    
                    if not added:
                        msg = name + " is not added to the project library!"
                        ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, msg)
                        print msg
                        return
                elif "MATERIAL" in EPConstruction.upper():
                    msg = "Your connected EPConstruction_ is just a material and not a full construction. \n You have to pass it through an 'EnergyPlus Construction' component before connecting it here."
                    ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, msg)
                    print msg
                    return
                else:
                    msg = "Your connected EPConstruction_ is not a valid construction."
                    ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, msg)
                    print msg
                    return
            
            try:
                HBSurface.setEPConstruction(EPConstruction)
                print "HBSurface construction has been set to " + EPConstruction
            except:
                warningMsg = "You are using an old version of Honeybee_Honeybee! Update your files and try again."
                print warningMsg
                ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warningMsg)
                return                 
            
        # 1.4 assign RAD Material
        if RADMaterial!=None:
            # if it is just the name of the material make sure it is already defined
            if len(RADMaterial.split(" ")) == 1:
                # if the material is not in the library add it to the library
                if not hb_RADMaterialAUX.isMatrialExistInLibrary(RADMaterial):
                    warningMsg = "Can't find " + RADMaterial + " in RAD Material Library.\n" + \
                                "Add the material to the library and try again."
                    ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warningMsg)
                    return
                
                try:
                    HBSurface.setRADMaterial(RADMaterial)
                    print "HBSurface Radiance Material has been set to " + RADMaterial
                except Exception, e:
                    print e
                    warningMsg = "You are using an old version of Honeybee_Honeybee! Update your files and try again."
                    print warningMsg
                    ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warningMsg)
                    return
                
                addedToLib = True
            else:
                
                # try to add the material to the library
                addedToLib, HBSurface.RadMaterial = hb_RADMaterialAUX.analyseRadMaterials(RADMaterial, True)
                
            if addedToLib==False:
                warningMsg = "Failed to add " + RADMaterial + " to the Library."
                ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warningMsg)
                return
            
        HBSurfaces.append(HBSurface)
    
    # add to the hive
    hb_hive = sc.sticky["honeybee_Hive"]()
    HBSurface  = hb_hive.addToHoneybeeHive(HBSurfaces, ghenv.Component)
    
    return HBSurface
    
    
    

if _geometry != None:
    
    result= main(_geometry, srfName_, srfType_, EPBC_, _EPConstruction_, _RADMaterial_)
    
    if result!=-1:
        HBSurface = result
</item>
                    <item name="Description" type_name="gh_string" type_code="10">Create a Honeybee surface, which can be plugged into the "Run Daylight Sumilation" component or combined with other surfaces to make HBZones with the "createHBZones" component.
-
Provided by Honeybee 0.0.62</item>
                    <item name="EditorLocation" type_name="gh_drawing_point" type_code="30">
                      <X>1390</X>
                      <Y>67</Y>
                    </item>
                    <item name="EditorSize" type_name="gh_drawing_size" type_code="32">
                      <W>1169</W>
                      <H>812</H>
                    </item>
                    <item name="HideInput" type_name="gh_bool" type_code="1">true</item>
                    <item name="HideOutput" type_name="gh_bool" type_code="1">false</item>
                    <item name="IconOverride" type_name="gh_drawing_bitmap" type_code="37">
                      <bitmap length="794">iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOwAAADsABataJCQAAArxJREFUSEvNVWtIk1EYnpuXb6arVJTN0oQgo1RwI4WS8I9ZWoZNN2+L7lKpP0ItCNQsoqILWGo/igok7UerZXSTDDOisjIvBSX0o9uPhKjmFLWe3nffBzn7stWMeuBhh3Pe93nP955znin+NxQrlQqzNJ5U6IgtlZZo2HYlgMa3iXN5wVP4EMvXpUb2dx1PBp7nA0/z8LoxFamGUC5U7Yz6Q5g0GsHRXJUA9BUA97MxcCENA9Y04G4W0J2Ltw0pMGinDVNsiZjiHgzaIN9b57brMdKWCfTmYtCWDjtx4JJIHg82pzuLosOEui0x0AjKHsqdKUrII5ZozUrS4SMJ4EUBRq5nwH6Rdi0JjyevDV9dAfTkAg9NqMifw21rJSay4HjUlhtnA+/X42u7EXZuh4yoHO22NHy5kQG8W4v9G+dxkZOi5BgE+nuXNlUsADrNLu1wl5yDjmzcPLQIEWHq3ZKsC2orC6KBrhxZAXeIRyacLouHv4/qqKTpgjruoUcFnuSgZmusfIsI+w5umu9skVyyO+Tc2uI4LnBClByDQMG79EyZ3nnt5JLdIe5lo7k6Ebpgvz2SrAs8bxF/QdFPvoDwd89ApfKqqi+JAx57cAZ0ixp26BEgqGok2e/w8VIcOLXTAPRvwNDl5RO+4PHk2CH65YfWUrMYM6b7HZFkXVA4RfB2NJbTQT8j16TdDFLiRI+O1xwUgwfkSb15uEYHHKLx5RZtEyXlUZS5MPRVdz3ZM7noaNsq2K3LfhSnudFWMsM+C96cXYI1KRH9lMsv2Mup8gsEEK1mMr4PV8jMXq4WjY/86TMbHM+RsKNlJQqXRvKO2eCmcuLvIj4qzP/8sc0xwB2j85bwJWCbbiI7j9KqWThZDPUMlvAQ4VP74SR0Uuu02gD+kykSlyYPwbNC1Xu1QUIdjcPFqX8OheIbukQwObBaeUMAAAAASUVORK5CYII=</bitmap>
                    </item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">d932f61e-533c-468c-8cb9-9d14c2660774</item>
                    <item name="Name" type_name="gh_string" type_code="10">Honeybee_createHBSrfs</item>
                    <item name="NickName" type_name="gh_string" type_code="10">createHBSrfs</item>
                  </items>
                  <chunks count="2">
                    <chunk name="Attributes">
                      <items count="2">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>368</X>
                          <Y>981</Y>
                          <W>200</W>
                          <H>124</H>
                        </item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>475</X>
                          <Y>1043</Y>
                        </item>
                      </items>
                    </chunk>
                    <chunk name="ParameterData">
                      <items count="10">
                        <item name="InputCount" type_name="gh_int32" type_code="3">6</item>
                        <item name="InputId" index="0" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="1" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="2" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="3" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="4" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="5" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="OutputCount" type_name="gh_int32" type_code="3">2</item>
                        <item name="OutputId" index="0" type_name="gh_guid" type_code="9">3ede854e-c753-40eb-84cb-b48008f14fd4</item>
                        <item name="OutputId" index="1" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                      </items>
                      <chunks count="8">
                        <chunk name="InputParam" index="0">
                          <items count="11">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">List of Breps</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">bdc1d524-2b48-4b69-88a8-a59474134b1b</item>
                            <item name="Name" type_name="gh_string" type_code="10">_geometry</item>
                            <item name="NickName" type_name="gh_string" type_code="10">_geometry</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="Source" index="0" type_name="gh_guid" type_code="9">43ab3e6c-3d9d-46ce-b70e-a8c64d567a15</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">c37956f4-d39c-49c7-af71-1e87f8031b26</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>370</X>
                                  <Y>983</Y>
                                  <W>90</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>416.5</X>
                                  <Y>993</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="1">
                          <items count="10">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Optional name for surface</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">526d4050-6ac3-4f55-b4cc-3163d9617dda</item>
                            <item name="Name" type_name="gh_string" type_code="10">srfName_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">srfName_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">37261734-eec7-4f50-b6a8-b8d1f3c4396b</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>370</X>
                                  <Y>1003</Y>
                                  <W>90</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>416.5</X>
                                  <Y>1013</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="2">
                          <items count="11">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Optional input for surface type &gt;
0- 'WALL'
0.5- 'UndergroundWall'
1- 'ROOF'
1.5- 'UndergroundCeiling'
2- 'FLOOR'
2.25- 'UndergroundSlab'
2.5- 'SlabOnGrade'
2.75- 'ExposedFloor'
3- 'CEILING'
4- 'AIRWALL'
5- 'WINDOW'
6- 'SHADING'</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">487bb090-6cc3-4fe4-8ae1-0341a5c8bb57</item>
                            <item name="Name" type_name="gh_string" type_code="10">srfType_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">srfType_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="Source" index="0" type_name="gh_guid" type_code="9">012ddc91-6be9-4017-82f0-1c6b23c1175d</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">37261734-eec7-4f50-b6a8-b8d1f3c4396b</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>370</X>
                                  <Y>1023</Y>
                                  <W>90</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>416.5</X>
                                  <Y>1033</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="3">
                          <items count="10">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">'Ground', 'Adiabatic', 'Outdoors'</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">aa724aed-6865-4ce9-9a77-3199b035a17b</item>
                            <item name="Name" type_name="gh_string" type_code="10">EPBC_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">EPBC_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">37261734-eec7-4f50-b6a8-b8d1f3c4396b</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>370</X>
                                  <Y>1043</Y>
                                  <W>90</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>416.5</X>
                                  <Y>1053</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="4">
                          <items count="10">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Optional EnergyPlus construction</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">a998a94f-e09f-4046-b193-06fd1e564499</item>
                            <item name="Name" type_name="gh_string" type_code="10">_EPConstruction_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">_EPConstruction_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">37261734-eec7-4f50-b6a8-b8d1f3c4396b</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>370</X>
                                  <Y>1063</Y>
                                  <W>90</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>416.5</X>
                                  <Y>1073</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="5">
                          <items count="10">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Optional Radiance Material</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">c5682cb7-da7e-4f8a-88ab-10d90054be08</item>
                            <item name="Name" type_name="gh_string" type_code="10">_RADMaterial_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">_RADMaterial_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">37261734-eec7-4f50-b6a8-b8d1f3c4396b</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>370</X>
                                  <Y>1083</Y>
                                  <W>90</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>416.5</X>
                                  <Y>1093</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="0">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10">...</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">59450e3e-a4b8-4a19-8023-6ed249f3aad1</item>
                            <item name="Name" type_name="gh_string" type_code="10">out</item>
                            <item name="NickName" type_name="gh_string" type_code="10">readMe!</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>490</X>
                                  <Y>983</Y>
                                  <W>76</W>
                                  <H>60</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>520</X>
                                  <Y>1013</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="1">
                          <items count="7">
                            <item name="Description" type_name="gh_string" type_code="10">Honeybee zone as the result</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">2a4ee528-5eb5-43e0-85f1-202e5a0fdcf1</item>
                            <item name="Name" type_name="gh_string" type_code="10">HBSurface</item>
                            <item name="NickName" type_name="gh_string" type_code="10">HBSurface</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SimplifyData" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>490</X>
                                  <Y>1043</Y>
                                  <W>76</W>
                                  <H>60</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>520</X>
                                  <Y>1073</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                      </chunks>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="30">
              <items count="3">
                <item name="GUID" type_name="gh_guid" type_code="9">410755b1-224a-4c1e-a407-bf32fb45ea7e</item>
                <item name="Lib" type_name="gh_guid" type_code="9">16cf80bc-9018-cbdb-2238-976eb17fd30d</item>
                <item name="Name" type_name="gh_string" type_code="10">Honeybee_createHBSrfs</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="10">
                    <item name="CodeInput" type_name="gh_string" type_code="10">#
# Honeybee: A Plugin for Environmental Analysis (GPL) started by Mostapha Sadeghipour Roudsari
# 
# This file is part of Honeybee.
# 
# Copyright (c) 2013-2017, Mostapha Sadeghipour Roudsari &lt;mostapha@ladybug.tools&gt; 
# Honeybee is free software; you can redistribute it and/or modify 
# it under the terms of the GNU General Public License as published 
# by the Free Software Foundation; either version 3 of the License, 
# or (at your option) any later version. 
# 
# Honeybee is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of 
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Honeybee; If not, see &lt;http://www.gnu.org/licenses/&gt;.
# 
# @license GPL-3.0+ &lt;http://spdx.org/licenses/GPL-3.0+&gt;


"""
Create a Honeybee surface, which can be plugged into the "Run Daylight Sumilation" component or combined with other surfaces to make HBZones with the "createHBZones" component.
-
Provided by Honeybee 0.0.62

    Args:
        _geometry: List of Breps
        srfName_: Optional name for surface
        srfType_: Optional input for surface type &gt;
            0- 'WALL'
            0.5- 'UndergroundWall'
            1- 'ROOF'
            1.5- 'UndergroundCeiling'
            2- 'FLOOR'
            2.25- 'UndergroundSlab'
            2.5- 'SlabOnGrade'
            2.75- 'ExposedFloor'
            3- 'CEILING'
            4- 'AIRWALL'
            5- 'WINDOW'
            6- 'SHADING'
        EPBC_: 'Ground', 'Adiabatic', 'Outdoors'
        _EPConstruction_: Optional EnergyPlus construction
        _RADMaterial_: Optional Radiance Material
    Returns:
        readMe!:...
        HBZone: A Honeybee Surface, which can be plugged into the "Run Daylight Sumilation" component or combined with other surfaces to make HBZones with the "createHBZones" component.
"""

import rhinoscriptsyntax as rs
import Rhino as rc
import scriptcontext as sc
import os
import sys
import System
import Grasshopper.Kernel as gh
import uuid

ghenv.Component.Name = 'Honeybee_createHBSrfs'
ghenv.Component.NickName = 'createHBSrfs'
ghenv.Component.Message = 'VER 0.0.62\nJUL_28_2017'
ghenv.Component.IconDisplayMode = ghenv.Component.IconDisplayMode.application
ghenv.Component.Category = "Honeybee"
ghenv.Component.SubCategory = "00 | Honeybee"
#compatibleHBVersion = VER 0.0.57\nNOV_04_2016
#compatibleLBVersion = VER 0.0.59\nFEB_01_2015
try: ghenv.Component.AdditionalHelpFromDocStrings = "3"
except: pass


tolerance = sc.doc.ModelAbsoluteTolerance
import math


def main(geometry, srfName, srfType, EPBC, EPConstruction, RADMaterial):
    # import the classes
    if sc.sticky.has_key('honeybee_release'):

        try:
            if not sc.sticky['honeybee_release'].isCompatible(ghenv.Component): return -1
            if sc.sticky['honeybee_release'].isInputMissing(ghenv.Component): return -1
        except:
            warning = "You need a newer version of Honeybee to use this compoent." + \
            "Use updateHoneybee component to update userObjects.\n" + \
            "If you have already updated userObjects drag Honeybee_Honeybee component " + \
            "into canvas and try again."
            w = gh.GH_RuntimeMessageLevel.Warning
            ghenv.Component.AddRuntimeMessage(w, warning)
            return -1
            
        # don't customize this part
        hb_EPZone = sc.sticky["honeybee_EPZone"]
        hb_EPSrf = sc.sticky["honeybee_EPSurface"]
        hb_EPZoneSurface = sc.sticky["honeybee_EPZoneSurface"]
        hb_EPFenSurface = sc.sticky["honeybee_EPFenSurface"]
        hb_RADMaterialAUX = sc.sticky["honeybee_RADMaterialAUX"]
        hb_EPObjectsAux = sc.sticky["honeybee_EPObjectsAUX"]()
        
    else:
        print "You should first let Honeybee to fly..."
        w = gh.GH_RuntimeMessageLevel.Warning
        ghenv.Component.AddRuntimeMessage(w, "You should first let Honeybee to fly...")
        return
    
    # if the input is mesh, convert it to a surface
    try:
        # check if this is a mesh
        geometry.Faces[0].IsQuad
        # convert to brep
        geometry = rc.Geometry.Brep.CreateFromMesh(geometry, False)
    except:
        pass
    
    HBSurfaces = []
    originalSrfName = srfName
    
    for faceCount in range(geometry.Faces.Count):
        
        # 0. check if user input a name for this surface
        guid = str(uuid.uuid4())
        number = guid.split("-")[-1]
        
        if srfName != None:
            if originalSrfName == None: originalSrfName = srfName
            originalSrfName = originalSrfName.strip().replace(" ","_")
            if geometry.Faces.Count != 1:
                srfName = originalSrfName + "_" + `faceCount`
            else: srfName = originalSrfName
        else:
            # generate a random name
            # the name will be overwritten for energy simulation
            srfName = "".join(guid.split("-")[:-1])
        
        # 1. create initial surface
        HBSurface = hb_EPZoneSurface(geometry.Faces[faceCount].DuplicateFace(False), number, srfName)
        
        # If the user has set a construction as Air Wall, change the surface type to air wall.
        try:
            if EPConstruction.ToUpper() == "AIR WALL":
                if srfType == None or srfType == "4":
                    srfType = 4
                    infoMsg = "Setting the construction to Air Wall will also ensure that the surface has the air wall srfType_."
                    print infoMsg
                else:
                    infoMsg = "By manually setting the srfType_ to be something other than 4: Air Wall on this component and also setting the Air Wall construction, you are overriding the air mixing properties of the air wall and only using the air wall as a construction."
                    print infoMsg
        except: pass
        
        if srfType == 4 or srfType == 4.0 or srfType == "4" or srfType == "4.0":
            try:
                if EPConstruction.ToUpper() == "AIR WALL": pass
                else:
                    infoMsg = "Setting the srfType to 4 will also ensure that the surface has the air wall construction."
                    print infoMsg
            except:
                infoMsg = "Setting the srfType to 4 will also ensure that the surface has the air wall construction."
                print infoMsg
            EPConstruction = "AIR WALL"
        
        # 1.1 check for surface type
        if srfType!=None:
            try:
                # if user uses a number to input type
                try: surfaceType = int(srfType)
                except:
                    if float(srfType) == 0.5 or float(srfType) == 1.5 or float(srfType) == 2.25 or float(srfType) == 2.5 or float(srfType) == 2.75:
                        surfaceType = srfType
                    else: pass
                print "HBSurface Type has been set to " + HBSurface.srfType[float(srfType)]
                
                if surfaceType == 5.0:
                    warningMsg = "If you want to use this model for energy simulation, use addGlazing to add window to surfaces.\n" + \
                                 "It will be fine for Daylighting simulation though."
                    print warningMsg
                    ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Remark, warningMsg)
            except:
                # user uses text as an input (e.g.: wall)
                # convert it to a number if a valid input
                surfaceType = srfType.ToUpper()
                if surfaceType in HBSurface.srfType.keys():
                   surfaceType = HBSurface.srfType[surfaceType.ToUpper()]
                   print "HBSurface Type has been set to " + surfaceType.ToUpper()
            
            if surfaceType in HBSurface.srfType.keys():
                acceptableCombination = [[1,3], [3,1], [0,5], [5,0], [1,5], [5,1], [4,0], [4,1], [4,2], [4,3], [0,4], [1,4], [2,4], [3,4]]
                try:
                    if int(HBSurface.type) != surfaceType and [int(HBSurface.type), surfaceType] not in acceptableCombination:
                        warningMsg = "Normal direction of the surface is not expected for a " + HBSurface.srfType[surfaceType] + ". " + \
                                     "The surface is more likely a " + HBSurface.srfType[int(HBSurface.type)] + ".\n" + \
                                     "Honeybee won't overwrite the type so you may need to manually flip the surface."
                        print warningMsg
                    HBSurface.setType(surfaceType, isUserInput= True)
                except:
                    warningMsg = "You are using an old version of Honeybee_Honeybee! Update your files and try again."
                    print warningMsg
                    ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warningMsg)
                    return
            
        
        # 1.2 assign boundary condition
        if EPBC!= None:
            # only ground, adiabatic and outdoors is valid
            validBC = ['ground', 'adiabatic', 'outdoors']
            if EPBC.lower() in validBC:
                try:
                    HBSurface.setBC(EPBC, isUserInput= True)
                    
                    # change type of surface if BC is set to ground
                    if EPBC.lower()== "ground":
                        HBSurface.setType(int(HBSurface.type) + 0.5, isUserInput= True)
                    
                    
                    if EPBC.lower()== "ground" or EPBC.lower()== "adiabatic":
                        HBSurface.setSunExposure('NoSun')
                        HBSurface.setWindExposure('NoWind')
                    
                    print "HBSurface boundary condition has been set to " + EPBC.upper()
                except:
                    warningMsg = "You are using an old version of Honeybee_Honeybee! Update your files and try again."
                    print warningMsg
                    ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warningMsg)
                    return               
            else:
                print "HBSurface BOUNDARY CONDITION IS NOT VALID."
        
        # 1.3 assign construction for EnergyPlus
        if EPConstruction!=None:
            # if it is just the name of the material make sure it is already defined
            if len(EPConstruction.split("\n")) == 1:
                # if the material is not in the library add it to the library
                if not hb_EPObjectsAux.isEPConstruction(EPConstruction):
                    warningMsg = "Can't find " + EPConstruction + " in EP Construction Library.\n" + \
                                "Add the construction to the library and try again."
                    print warningMsg
                    ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warningMsg)
                    return
            else:
                # it is a full string
                if "CONSTRUCTION" in EPConstruction.upper():
                    added, EPConstruction = hb_EPObjectsAux.addEPObjectToLib(EPConstruction, overwrite = True)
                    
                    if not added:
                        msg = name + " is not added to the project library!"
                        ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, msg)
                        print msg
                        return
                elif "MATERIAL" in EPConstruction.upper():
                    msg = "Your connected EPConstruction_ is just a material and not a full construction. \n You have to pass it through an 'EnergyPlus Construction' component before connecting it here."
                    ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, msg)
                    print msg
                    return
                else:
                    msg = "Your connected EPConstruction_ is not a valid construction."
                    ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, msg)
                    print msg
                    return
            
            try:
                HBSurface.setEPConstruction(EPConstruction)
                print "HBSurface construction has been set to " + EPConstruction
            except:
                warningMsg = "You are using an old version of Honeybee_Honeybee! Update your files and try again."
                print warningMsg
                ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warningMsg)
                return                 
            
        # 1.4 assign RAD Material
        if RADMaterial!=None:
            # if it is just the name of the material make sure it is already defined
            if len(RADMaterial.split(" ")) == 1:
                # if the material is not in the library add it to the library
                if not hb_RADMaterialAUX.isMatrialExistInLibrary(RADMaterial):
                    warningMsg = "Can't find " + RADMaterial + " in RAD Material Library.\n" + \
                                "Add the material to the library and try again."
                    ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warningMsg)
                    return
                
                try:
                    HBSurface.setRADMaterial(RADMaterial)
                    print "HBSurface Radiance Material has been set to " + RADMaterial
                except Exception, e:
                    print e
                    warningMsg = "You are using an old version of Honeybee_Honeybee! Update your files and try again."
                    print warningMsg
                    ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warningMsg)
                    return
                
                addedToLib = True
            else:
                
                # try to add the material to the library
                addedToLib, HBSurface.RadMaterial = hb_RADMaterialAUX.analyseRadMaterials(RADMaterial, True)
                
            if addedToLib==False:
                warningMsg = "Failed to add " + RADMaterial + " to the Library."
                ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warningMsg)
                return
            
        HBSurfaces.append(HBSurface)
    
    # add to the hive
    hb_hive = sc.sticky["honeybee_Hive"]()
    HBSurface  = hb_hive.addToHoneybeeHive(HBSurfaces, ghenv.Component)
    
    return HBSurface
    
    
    

if _geometry != None:
    
    result= main(_geometry, srfName_, srfType_, EPBC_, _EPConstruction_, _RADMaterial_)
    
    if result!=-1:
        HBSurface = result
</item>
                    <item name="Description" type_name="gh_string" type_code="10">Create a Honeybee surface, which can be plugged into the "Run Daylight Sumilation" component or combined with other surfaces to make HBZones with the "createHBZones" component.
-
Provided by Honeybee 0.0.62</item>
                    <item name="EditorLocation" type_name="gh_drawing_point" type_code="30">
                      <X>1390</X>
                      <Y>67</Y>
                    </item>
                    <item name="EditorSize" type_name="gh_drawing_size" type_code="32">
                      <W>1169</W>
                      <H>812</H>
                    </item>
                    <item name="HideInput" type_name="gh_bool" type_code="1">true</item>
                    <item name="HideOutput" type_name="gh_bool" type_code="1">false</item>
                    <item name="IconOverride" type_name="gh_drawing_bitmap" type_code="37">
                      <bitmap length="794">iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOwAAADsABataJCQAAArxJREFUSEvNVWtIk1EYnpuXb6arVJTN0oQgo1RwI4WS8I9ZWoZNN2+L7lKpP0ItCNQsoqILWGo/igok7UerZXSTDDOisjIvBSX0o9uPhKjmFLWe3nffBzn7stWMeuBhh3Pe93nP955znin+NxQrlQqzNJ5U6IgtlZZo2HYlgMa3iXN5wVP4EMvXpUb2dx1PBp7nA0/z8LoxFamGUC5U7Yz6Q5g0GsHRXJUA9BUA97MxcCENA9Y04G4W0J2Ltw0pMGinDVNsiZjiHgzaIN9b57brMdKWCfTmYtCWDjtx4JJIHg82pzuLosOEui0x0AjKHsqdKUrII5ZozUrS4SMJ4EUBRq5nwH6Rdi0JjyevDV9dAfTkAg9NqMifw21rJSay4HjUlhtnA+/X42u7EXZuh4yoHO22NHy5kQG8W4v9G+dxkZOi5BgE+nuXNlUsADrNLu1wl5yDjmzcPLQIEWHq3ZKsC2orC6KBrhxZAXeIRyacLouHv4/qqKTpgjruoUcFnuSgZmusfIsI+w5umu9skVyyO+Tc2uI4LnBClByDQMG79EyZ3nnt5JLdIe5lo7k6Ebpgvz2SrAs8bxF/QdFPvoDwd89ApfKqqi+JAx57cAZ0ixp26BEgqGok2e/w8VIcOLXTAPRvwNDl5RO+4PHk2CH65YfWUrMYM6b7HZFkXVA4RfB2NJbTQT8j16TdDFLiRI+O1xwUgwfkSb15uEYHHKLx5RZtEyXlUZS5MPRVdz3ZM7noaNsq2K3LfhSnudFWMsM+C96cXYI1KRH9lMsv2Mup8gsEEK1mMr4PV8jMXq4WjY/86TMbHM+RsKNlJQqXRvKO2eCmcuLvIj4qzP/8sc0xwB2j85bwJWCbbiI7j9KqWThZDPUMlvAQ4VP74SR0Uuu02gD+kykSlyYPwbNC1Xu1QUIdjcPFqX8OheIbukQwObBaeUMAAAAASUVORK5CYII=</bitmap>
                    </item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">2e397198-bc66-4695-8358-84459a607a91</item>
                    <item name="Name" type_name="gh_string" type_code="10">Honeybee_createHBSrfs</item>
                    <item name="NickName" type_name="gh_string" type_code="10">createHBSrfs</item>
                  </items>
                  <chunks count="2">
                    <chunk name="Attributes">
                      <items count="2">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>366</X>
                          <Y>1164</Y>
                          <W>200</W>
                          <H>124</H>
                        </item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>473</X>
                          <Y>1226</Y>
                        </item>
                      </items>
                    </chunk>
                    <chunk name="ParameterData">
                      <items count="10">
                        <item name="InputCount" type_name="gh_int32" type_code="3">6</item>
                        <item name="InputId" index="0" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="1" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="2" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="3" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="4" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="5" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="OutputCount" type_name="gh_int32" type_code="3">2</item>
                        <item name="OutputId" index="0" type_name="gh_guid" type_code="9">3ede854e-c753-40eb-84cb-b48008f14fd4</item>
                        <item name="OutputId" index="1" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                      </items>
                      <chunks count="8">
                        <chunk name="InputParam" index="0">
                          <items count="11">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">List of Breps</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">39143a7c-d273-4327-895c-0f8dbdab476c</item>
                            <item name="Name" type_name="gh_string" type_code="10">_geometry</item>
                            <item name="NickName" type_name="gh_string" type_code="10">_geometry</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="Source" index="0" type_name="gh_guid" type_code="9">68989fa6-3118-480a-9b13-7fa2a16c2b6a</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">c37956f4-d39c-49c7-af71-1e87f8031b26</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>368</X>
                                  <Y>1166</Y>
                                  <W>90</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>414.5</X>
                                  <Y>1176</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="1">
                          <items count="10">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Optional name for surface</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">01376954-5b9c-4a49-b433-c1b0e7a83307</item>
                            <item name="Name" type_name="gh_string" type_code="10">srfName_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">srfName_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">37261734-eec7-4f50-b6a8-b8d1f3c4396b</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>368</X>
                                  <Y>1186</Y>
                                  <W>90</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>414.5</X>
                                  <Y>1196</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="2">
                          <items count="11">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Optional input for surface type &gt;
0- 'WALL'
0.5- 'UndergroundWall'
1- 'ROOF'
1.5- 'UndergroundCeiling'
2- 'FLOOR'
2.25- 'UndergroundSlab'
2.5- 'SlabOnGrade'
2.75- 'ExposedFloor'
3- 'CEILING'
4- 'AIRWALL'
5- 'WINDOW'
6- 'SHADING'</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">deef8a6f-0677-4248-99eb-15c961c9a064</item>
                            <item name="Name" type_name="gh_string" type_code="10">srfType_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">srfType_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="Source" index="0" type_name="gh_guid" type_code="9">35258783-6f16-479b-8048-9472d15e2f85</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">37261734-eec7-4f50-b6a8-b8d1f3c4396b</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>368</X>
                                  <Y>1206</Y>
                                  <W>90</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>414.5</X>
                                  <Y>1216</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="3">
                          <items count="10">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">'Ground', 'Adiabatic', 'Outdoors'</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">4d37a2b7-03f1-46c6-82d9-690f0000c263</item>
                            <item name="Name" type_name="gh_string" type_code="10">EPBC_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">EPBC_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">37261734-eec7-4f50-b6a8-b8d1f3c4396b</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>368</X>
                                  <Y>1226</Y>
                                  <W>90</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>414.5</X>
                                  <Y>1236</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="4">
                          <items count="10">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Optional EnergyPlus construction</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">353069cd-71d7-4a40-a6c0-64e2417f5009</item>
                            <item name="Name" type_name="gh_string" type_code="10">_EPConstruction_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">_EPConstruction_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">37261734-eec7-4f50-b6a8-b8d1f3c4396b</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>368</X>
                                  <Y>1246</Y>
                                  <W>90</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>414.5</X>
                                  <Y>1256</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="5">
                          <items count="10">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Optional Radiance Material</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">b3163f75-b6c0-4bc9-9f02-781be330608e</item>
                            <item name="Name" type_name="gh_string" type_code="10">_RADMaterial_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">_RADMaterial_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">37261734-eec7-4f50-b6a8-b8d1f3c4396b</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>368</X>
                                  <Y>1266</Y>
                                  <W>90</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>414.5</X>
                                  <Y>1276</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="0">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10">...</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">798bb7a3-0a23-4817-b132-4dd1d1fc1541</item>
                            <item name="Name" type_name="gh_string" type_code="10">out</item>
                            <item name="NickName" type_name="gh_string" type_code="10">readMe!</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>488</X>
                                  <Y>1166</Y>
                                  <W>76</W>
                                  <H>60</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>518</X>
                                  <Y>1196</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="1">
                          <items count="7">
                            <item name="Description" type_name="gh_string" type_code="10">Honeybee zone as the result</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">0fe5789e-f610-4b87-94b0-92d4e8c547e8</item>
                            <item name="Name" type_name="gh_string" type_code="10">HBSurface</item>
                            <item name="NickName" type_name="gh_string" type_code="10">HBSurface</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SimplifyData" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>488</X>
                                  <Y>1226</Y>
                                  <W>76</W>
                                  <H>60</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>518</X>
                                  <Y>1256</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                      </chunks>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="31">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">59e0b89a-e487-49f8-bab8-b5bab16be14c</item>
                <item name="Name" type_name="gh_string" type_code="10">Panel</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="8">
                    <item name="Description" type_name="gh_string" type_code="10">A panel for custom notes and text values</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">38853f51-9076-446d-b3dd-0fb0b0977a96</item>
                    <item name="Name" type_name="gh_string" type_code="10">Panel</item>
                    <item name="NickName" type_name="gh_string" type_code="10"></item>
                    <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                    <item name="ScrollRatio" type_name="gh_double" type_code="6">0</item>
                    <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                    <item name="UserText" type_name="gh_string" type_code="10">0</item>
                  </items>
                  <chunks count="2">
                    <chunk name="Attributes">
                      <items count="5">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>301</X>
                          <Y>373</Y>
                          <W>50</W>
                          <H>20</H>
                        </item>
                        <item name="MarginLeft" type_name="gh_int32" type_code="3">0</item>
                        <item name="MarginRight" type_name="gh_int32" type_code="3">0</item>
                        <item name="MarginTop" type_name="gh_int32" type_code="3">0</item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>301.57</X>
                          <Y>373.0353</Y>
                        </item>
                      </items>
                    </chunk>
                    <chunk name="PanelProperties">
                      <items count="6">
                        <item name="Colour" type_name="gh_drawing_color" type_code="36">
                          <ARGB>255;255;250;90</ARGB>
                        </item>
                        <item name="DrawIndices" type_name="gh_bool" type_code="1">true</item>
                        <item name="DrawPaths" type_name="gh_bool" type_code="1">true</item>
                        <item name="Multiline" type_name="gh_bool" type_code="1">true</item>
                        <item name="Stream" type_name="gh_bool" type_code="1">false</item>
                        <item name="Wrap" type_name="gh_bool" type_code="1">true</item>
                      </items>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="32">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">59e0b89a-e487-49f8-bab8-b5bab16be14c</item>
                <item name="Name" type_name="gh_string" type_code="10">Panel</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="8">
                    <item name="Description" type_name="gh_string" type_code="10">A panel for custom notes and text values</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">8a3e4f0a-9e91-4ded-a02b-7b7dba9aa035</item>
                    <item name="Name" type_name="gh_string" type_code="10">Panel</item>
                    <item name="NickName" type_name="gh_string" type_code="10"></item>
                    <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                    <item name="ScrollRatio" type_name="gh_double" type_code="6">0</item>
                    <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                    <item name="UserText" type_name="gh_string" type_code="10">0</item>
                  </items>
                  <chunks count="2">
                    <chunk name="Attributes">
                      <items count="5">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>307</X>
                          <Y>603</Y>
                          <W>50</W>
                          <H>20</H>
                        </item>
                        <item name="MarginLeft" type_name="gh_int32" type_code="3">0</item>
                        <item name="MarginRight" type_name="gh_int32" type_code="3">0</item>
                        <item name="MarginTop" type_name="gh_int32" type_code="3">0</item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>307.5336</X>
                          <Y>603.3541</Y>
                        </item>
                      </items>
                    </chunk>
                    <chunk name="PanelProperties">
                      <items count="6">
                        <item name="Colour" type_name="gh_drawing_color" type_code="36">
                          <ARGB>255;255;250;90</ARGB>
                        </item>
                        <item name="DrawIndices" type_name="gh_bool" type_code="1">true</item>
                        <item name="DrawPaths" type_name="gh_bool" type_code="1">true</item>
                        <item name="Multiline" type_name="gh_bool" type_code="1">true</item>
                        <item name="Stream" type_name="gh_bool" type_code="1">false</item>
                        <item name="Wrap" type_name="gh_bool" type_code="1">true</item>
                      </items>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="33">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">59e0b89a-e487-49f8-bab8-b5bab16be14c</item>
                <item name="Name" type_name="gh_string" type_code="10">Panel</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="8">
                    <item name="Description" type_name="gh_string" type_code="10">A panel for custom notes and text values</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">adfe25f9-0952-40dd-95e2-71c4ca926118</item>
                    <item name="Name" type_name="gh_string" type_code="10">Panel</item>
                    <item name="NickName" type_name="gh_string" type_code="10"></item>
                    <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                    <item name="ScrollRatio" type_name="gh_double" type_code="6">0</item>
                    <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                    <item name="UserText" type_name="gh_string" type_code="10">0</item>
                  </items>
                  <chunks count="2">
                    <chunk name="Attributes">
                      <items count="5">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>293</X>
                          <Y>835</Y>
                          <W>50</W>
                          <H>20</H>
                        </item>
                        <item name="MarginLeft" type_name="gh_int32" type_code="3">0</item>
                        <item name="MarginRight" type_name="gh_int32" type_code="3">0</item>
                        <item name="MarginTop" type_name="gh_int32" type_code="3">0</item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>293.6117</X>
                          <Y>835.0104</Y>
                        </item>
                      </items>
                    </chunk>
                    <chunk name="PanelProperties">
                      <items count="6">
                        <item name="Colour" type_name="gh_drawing_color" type_code="36">
                          <ARGB>255;255;250;90</ARGB>
                        </item>
                        <item name="DrawIndices" type_name="gh_bool" type_code="1">true</item>
                        <item name="DrawPaths" type_name="gh_bool" type_code="1">true</item>
                        <item name="Multiline" type_name="gh_bool" type_code="1">true</item>
                        <item name="Stream" type_name="gh_bool" type_code="1">false</item>
                        <item name="Wrap" type_name="gh_bool" type_code="1">true</item>
                      </items>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="34">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">59e0b89a-e487-49f8-bab8-b5bab16be14c</item>
                <item name="Name" type_name="gh_string" type_code="10">Panel</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="8">
                    <item name="Description" type_name="gh_string" type_code="10">A panel for custom notes and text values</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">012ddc91-6be9-4017-82f0-1c6b23c1175d</item>
                    <item name="Name" type_name="gh_string" type_code="10">Panel</item>
                    <item name="NickName" type_name="gh_string" type_code="10"></item>
                    <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                    <item name="ScrollRatio" type_name="gh_double" type_code="6">0</item>
                    <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                    <item name="UserText" type_name="gh_string" type_code="10">3</item>
                  </items>
                  <chunks count="2">
                    <chunk name="Attributes">
                      <items count="5">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>280</X>
                          <Y>1023</Y>
                          <W>50</W>
                          <H>20</H>
                        </item>
                        <item name="MarginLeft" type_name="gh_int32" type_code="3">0</item>
                        <item name="MarginRight" type_name="gh_int32" type_code="3">0</item>
                        <item name="MarginTop" type_name="gh_int32" type_code="3">0</item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>280.7528</X>
                          <Y>1023.087</Y>
                        </item>
                      </items>
                    </chunk>
                    <chunk name="PanelProperties">
                      <items count="6">
                        <item name="Colour" type_name="gh_drawing_color" type_code="36">
                          <ARGB>255;255;250;90</ARGB>
                        </item>
                        <item name="DrawIndices" type_name="gh_bool" type_code="1">true</item>
                        <item name="DrawPaths" type_name="gh_bool" type_code="1">true</item>
                        <item name="Multiline" type_name="gh_bool" type_code="1">true</item>
                        <item name="Stream" type_name="gh_bool" type_code="1">false</item>
                        <item name="Wrap" type_name="gh_bool" type_code="1">true</item>
                      </items>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="35">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">59e0b89a-e487-49f8-bab8-b5bab16be14c</item>
                <item name="Name" type_name="gh_string" type_code="10">Panel</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="8">
                    <item name="Description" type_name="gh_string" type_code="10">A panel for custom notes and text values</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">35258783-6f16-479b-8048-9472d15e2f85</item>
                    <item name="Name" type_name="gh_string" type_code="10">Panel</item>
                    <item name="NickName" type_name="gh_string" type_code="10"></item>
                    <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                    <item name="ScrollRatio" type_name="gh_double" type_code="6">0</item>
                    <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                    <item name="UserText" type_name="gh_string" type_code="10">2</item>
                  </items>
                  <chunks count="2">
                    <chunk name="Attributes">
                      <items count="5">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>283</X>
                          <Y>1206</Y>
                          <W>50</W>
                          <H>20</H>
                        </item>
                        <item name="MarginLeft" type_name="gh_int32" type_code="3">0</item>
                        <item name="MarginRight" type_name="gh_int32" type_code="3">0</item>
                        <item name="MarginTop" type_name="gh_int32" type_code="3">0</item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>283.8764</X>
                          <Y>1206.415</Y>
                        </item>
                      </items>
                    </chunk>
                    <chunk name="PanelProperties">
                      <items count="6">
                        <item name="Colour" type_name="gh_drawing_color" type_code="36">
                          <ARGB>255;255;250;90</ARGB>
                        </item>
                        <item name="DrawIndices" type_name="gh_bool" type_code="1">true</item>
                        <item name="DrawPaths" type_name="gh_bool" type_code="1">true</item>
                        <item name="Multiline" type_name="gh_bool" type_code="1">true</item>
                        <item name="Stream" type_name="gh_bool" type_code="1">false</item>
                        <item name="Wrap" type_name="gh_bool" type_code="1">true</item>
                      </items>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="36">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">919e146f-30ae-4aae-be34-4d72f555e7da</item>
                <item name="Name" type_name="gh_string" type_code="10">Brep</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="6">
                    <item name="Description" type_name="gh_string" type_code="10">Contains a collection of Breps (Boundary REPresentations)</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">6b82635b-6677-4636-9fc6-607d4d9a2a25</item>
                    <item name="Name" type_name="gh_string" type_code="10">Brep</item>
                    <item name="NickName" type_name="gh_string" type_code="10">Brep</item>
                    <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                    <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                  </items>
                  <chunks count="2">
                    <chunk name="Attributes">
                      <items count="2">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>594</X>
                          <Y>431</Y>
                          <W>50</W>
                          <H>24</H>
                        </item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>619.8367</X>
                          <Y>443.0305</Y>
                        </item>
                      </items>
                    </chunk>
                    <chunk name="PersistentData">
                      <items count="1">
                        <item name="Count" type_name="gh_int32" type_code="3">1</item>
                      </items>
                      <chunks count="1">
                        <chunk name="Branch" index="0">
                          <items count="2">
                            <item name="Count" type_name="gh_int32" type_code="3">3</item>
                            <item name="Path" type_name="gh_string" type_code="10">{0}</item>
                          </items>
                          <chunks count="3">
                            <chunk name="Item" index="0">
                              <items count="1">
                                <item name="RefID" type_name="gh_guid" type_code="9">d6833ad0-7347-4af0-9abf-3e59a7314547</item>
                              </items>
                            </chunk>
                            <chunk name="Item" index="1">
                              <items count="1">
                                <item name="RefID" type_name="gh_guid" type_code="9">ffd127fd-9f00-4b01-9d30-54dc697b300e</item>
                              </items>
                            </chunk>
                            <chunk name="Item" index="2">
                              <items count="1">
                                <item name="RefID" type_name="gh_guid" type_code="9">baf8da67-0169-42b4-91a1-491d78c5bbb8</item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                      </chunks>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="37">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">919e146f-30ae-4aae-be34-4d72f555e7da</item>
                <item name="Name" type_name="gh_string" type_code="10">Brep</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="6">
                    <item name="Description" type_name="gh_string" type_code="10">Contains a collection of Breps (Boundary REPresentations)</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">2d62d641-f8c5-42dd-bbc3-2ba93c2fe969</item>
                    <item name="Name" type_name="gh_string" type_code="10">Brep</item>
                    <item name="NickName" type_name="gh_string" type_code="10">Brep</item>
                    <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                    <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                  </items>
                  <chunks count="2">
                    <chunk name="Attributes">
                      <items count="2">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>594</X>
                          <Y>661</Y>
                          <W>50</W>
                          <H>24</H>
                        </item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>619.8466</X>
                          <Y>673.4403</Y>
                        </item>
                      </items>
                    </chunk>
                    <chunk name="PersistentData">
                      <items count="1">
                        <item name="Count" type_name="gh_int32" type_code="3">1</item>
                      </items>
                      <chunks count="1">
                        <chunk name="Branch" index="0">
                          <items count="2">
                            <item name="Count" type_name="gh_int32" type_code="3">1</item>
                            <item name="Path" type_name="gh_string" type_code="10">{0}</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Item" index="0">
                              <items count="1">
                                <item name="RefID" type_name="gh_guid" type_code="9">3f2d4da6-8586-430e-ae84-db6edcccafa7</item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                      </chunks>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="38">
              <items count="3">
                <item name="GUID" type_name="gh_guid" type_code="9">410755b1-224a-4c1e-a407-bf32fb45ea7e</item>
                <item name="Lib" type_name="gh_guid" type_code="9">16cf80bc-9018-cbdb-2238-976eb17fd30d</item>
                <item name="Name" type_name="gh_string" type_code="10">Honeybee_addHBGlz</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="10">
                    <item name="CodeInput" type_name="gh_string" type_code="10">#
# Honeybee: A Plugin for Environmental Analysis (GPL) started by Mostapha Sadeghipour Roudsari
# 
# This file is part of Honeybee.
# 
# Copyright (c) 2013-2017, Mostapha Sadeghipour Roudsari &lt;mostapha@ladybug.tools&gt; 
# Honeybee is free software; you can redistribute it and/or modify 
# it under the terms of the GNU General Public License as published 
# by the Free Software Foundation; either version 3 of the License, 
# or (at your option) any later version. 
# 
# Honeybee is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of 
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Honeybee; If not, see &lt;http://www.gnu.org/licenses/&gt;.
# 
# @license GPL-3.0+ &lt;http://spdx.org/licenses/GPL-3.0+&gt;


"""
Use this component to add a custom glazing surface to a HBSurface or HBZone.

-
Provided by Honeybee 0.0.62

    Args:
        _HBObj: A HBZone or HBSurface to which you would like to add a customized glazing surface.
        _childSurfaces: A surface or list of surfaces that represent the custom window(s) that you would like to add.  Note that these surfaces should be co-planar to the connected HBSurface or one of the surfaces of the connected HBZones.
        childSurfacesName_: An optional list of names for child surfaces. If names are provided the length of names should be the same as _childSurfaces.
        EPConstructions_: An optional list of EnergyPlus constructions to set the material construction of the window added to the HBSurface or HBZone.  This can be either the name of a window construction from the OpenStudio library (coming out of the 'Honeybee_Call from EP Construction Library' component) or a custom window construction you created from the 'Honeybee_EnergyPlus Construction' component. The list should match with childSurfaces list. In case the list doesn't match the first construction will be used for all surfaces.
        RADMaterials_: An optional Radiance material to set the material of the window added to the HBSurface or HBZone.  This can be either the name of a window material from the default Radaince library (coming out of the 'Honeybee_Call from Radiance Library' component) or a custom window material you created from any of the Radiance material components (like the 'Honeybee_Radiance Glass Material' component). The list should match with childSurfaces list. In case the list doesn't match the first material will be used for all surfaces.
    Returns:
        readMe!:...
        HBObjWGLZ: The Honeybee surface or zone with assigned glazing (in case of success).
"""

import rhinoscriptsyntax as rs
import Rhino as rc
import scriptcontext as sc
import os
import sys
import System
import Grasshopper.Kernel as gh
import uuid

ghenv.Component.Name = 'Honeybee_addHBGlz'
ghenv.Component.NickName = 'addHBGlz'
ghenv.Component.Message = 'VER 0.0.62\nJUL_28_2017'
ghenv.Component.IconDisplayMode = ghenv.Component.IconDisplayMode.application
ghenv.Component.Category = "Honeybee"
ghenv.Component.SubCategory = "00 | Honeybee"
#compatibleHBVersion = VER 0.0.57\nNOV_04_2016
#compatibleLBVersion = VER 0.0.59\nFEB_01_2015
try: ghenv.Component.AdditionalHelpFromDocStrings = "3"
except: pass

def main(HBObject, childSurfaces, childSurfacesName, EPConstructions, RADMaterials, tolerance):

    def addPotentialChildSurface(HBSurface):
        
        glzCount = 0
        for srfCount, srf in enumerate(childSurfaces):
            # check if the surface is located on the base surface
            if HBSurface.isPossibleChild(srf, tolerance):
                # if yes then create the child surface
                guid = str(uuid.uuid4())
                try:
                    name = childSurfacesName[srfCount]
                except:
                   name = HBSurface.name + "_glz_" + str(glzCount) + "_" + "".join(guid.split("-")[:-1])

                number = guid.split("-")[-1]
                glzCount += 1
                HBFenSrf = hb_EPFenSurface(srf, number, name, HBSurface, 5)
                
                # check normal direction
                if not rc.Geometry.Vector3d.VectorAngle(HBFenSrf.normalVector, HBFenSrf.parent.normalVector)&lt;sc.doc.ModelAngleToleranceRadians:
                    HBFenSrf.geometry.Flip()
                    HBFenSrf.normalVector.Reverse()
                
                if len(EPConstructions)!=0:
                    
                    try:
                        EPConstruction = EPConstructions[srfCount]
                    except:
                        EPConstruction = EPConstructions[0]
                    
                    if EPConstruction == None: continue
                        
                    # if it is just the name of the material make sure it is already defined
                    if len(EPConstruction.split("\n")) == 1:
                        # if the material is not in the library add it to the library
                        if not hb_EPObjectsAux.isEPConstruction(EPConstruction):
                            warningMsg = "Can't find " + EPConstruction + " in EP Construction Library.\n" + \
                                        "Add the construction to the library and try again."
                            ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warningMsg)
                            return 
                    else:
                        # it is a full string.
                        if EPConstruction.startswith('WindowMaterial:'):
                            warningMsg = "Your window construction, " + EPConstruction.split('\n')[1].split(',')[0] + ", is a window material and not a full window construction.\n" + \
                                        "Pass this window material through a 'Honeybee_EnergyPlus Construction' component cand connect the construction to this one."
                            ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warningMsg)
                            return 
                        added, EPConstruction = hb_EPObjectsAux.addEPObjectToLib(EPConstruction, overwrite = True)
                        
                        if not added:
                            msg = EPConstruction + " is not added to the project library!"
                            ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, msg)
                            print msg
                            return 
                    
                    try:
                        HBFenSrf.setEPConstruction(EPConstruction)
                    except:
                        warningMsg = "You are using an old version of Honeybee_Honeybee! Update your files and try again."
                        print warningMsg
                        ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warningMsg)
                        return -1
                    
                
                
                if len(RADMaterials)!= 0:
                    
                    try:
                        RADMaterial = RADMaterials[srfCount]
                    except:
                        RADMaterial = RADMaterials[0]
                    
                    if RADMaterial == None: continue
                    
                    if len(RADMaterial.strip().split(" ")) == 1:
                        if not hb_RADMaterialAUX.isMatrialExistInLibrary(RADMaterial):
                            warningMsg = "Can't find " + RADMaterial + " in RAD Material Library.\n" + \
                                "Add the material to the library and try again."
                            ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warningMsg)
                            return
                    
                    addedToLib, HBFenSrf.RadMaterial = hb_RADMaterialAUX.analyseRadMaterials(RADMaterial, True)
                    materialType = hb_RADMaterialAUX.getRADMaterialType(HBFenSrf.RadMaterial)
                    if materialType == 'plastic':
                        warningMsg = HBFenSrf.RadMaterial + " is not a typical glass material. Are you sure you selected the right material?"
                        ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warningMsg)
                        return
    
                # add it to the base surface
                HBSurface.addChildSrf(HBFenSrf)
                HBSurface.calculatePunchedSurface()


    # import the classes
    if sc.sticky.has_key('honeybee_release'):
        try:
            if not sc.sticky['honeybee_release'].isCompatible(ghenv.Component): return -1
            if sc.sticky['honeybee_release'].isInputMissing(ghenv.Component): return -1
        except:
            warning = "You need a newer version of Honeybee to use this compoent." + \
            "Use updateHoneybee component to update userObjects.\n" + \
            "If you have already updated userObjects drag Honeybee_Honeybee component " + \
            "into canvas and try again."
            w = gh.GH_RuntimeMessageLevel.Warning
            ghenv.Component.AddRuntimeMessage(w, warning)
            return -1
            
        # don't customize this part
        hb_EPZone = sc.sticky["honeybee_EPZone"]
        hb_EPSrf = sc.sticky["honeybee_EPSurface"]
        hb_EPZoneSurface = sc.sticky["honeybee_EPZoneSurface"]
        hb_EPFenSurface = sc.sticky["honeybee_EPFenSurface"]
        hb_EPObjectsAux = sc.sticky["honeybee_EPObjectsAUX"]()
        hb_RADMaterialAUX = sc.sticky["honeybee_RADMaterialAUX"]
        
        # if any of child surfaces is mesh, convert them to a surface
        cleanChildSurfaces = []
        for srf in childSurfaces:
            try:
                # check if this is a mesh
                srf.Faces[0].IsQuad
                # convert to brep
                srf = rc.Geometry.Brep.CreateFromMesh(srf, False)
            except:
                pass
            
            # collect surfaces
            cleanChildSurfaces.append(srf)
        
        # check number of faces and names
        if len(childSurfacesName)!= 0:
            if len(childSurfacesName)!=len(childSurfaces):
                nameCount = len(childSurfacesName)
                srfCount = len(childSurfaces)
                raise Exception("Length of _childSurfaces [%s] should match length of childSurfacesName [%s]"%(srfCount, nameCount))
        
        # call the surface from the hive
        hb_hive = sc.sticky["honeybee_Hive"]()
        try:
            HBObject = hb_hive.callFromHoneybeeHive([HBObject])[0]
        except:
            raise TypeError("Wrong input type for _HBObj. Connect a Honeybee Surface or a HoneybeeZone to HBObject input")

        # check if the object is a zone or a surface
        if HBObject.objectType == "HBZone":
            # add window for each surface
            for HBSurface in HBObject.surfaces:
                addPotentialChildSurface(HBSurface)
        else:
            # add window to the HBSurface
            addPotentialChildSurface(HBObject)
        
        # add to the hive
        HBObject  = hb_hive.addToHoneybeeHive([HBObject], ghenv.Component)
        
        return HBObject
        
    else:
        print "You should first let Honeybee fly..."
        w = gh.GH_RuntimeMessageLevel.Warning
        ghenv.Component.AddRuntimeMessage(w, "You should first let Honeybee fly...")
        return -1

if _HBObj!=None and len(_childSurfaces) and _childSurfaces[0]!=None:
    
    # if tolerance_==None:
    tolerance_ = sc.doc.ModelAbsoluteTolerance
        
    results = main(_HBObj, _childSurfaces, childSurfacesName_, EPConstructions_, RADMaterials_, tolerance_)
    
    if results != -1:
        HBObjWGLZ = results</item>
                    <item name="Description" type_name="gh_string" type_code="10">Use this component to add a custom glazing surface to a HBSurface or HBZone.
-
Provided by Honeybee 0.0.62</item>
                    <item name="EditorLocation" type_name="gh_drawing_point" type_code="30">
                      <X>61</X>
                      <Y>92</Y>
                    </item>
                    <item name="EditorSize" type_name="gh_drawing_size" type_code="32">
                      <W>1528</W>
                      <H>926</H>
                    </item>
                    <item name="HideInput" type_name="gh_bool" type_code="1">true</item>
                    <item name="HideOutput" type_name="gh_bool" type_code="1">true</item>
                    <item name="IconOverride" type_name="gh_drawing_bitmap" type_code="37">
                      <bitmap length="1313">iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOwQAADsEBuJFr7QAABMNJREFUSEu9VWtQlGUUfteFhXVxKS4Zl7gOoVgMgqaDCwqSJHEN47awu8hNGO1CyKWUFYEyMCKDuCXQlOmMDSag1hhIzjBkgor6o/rRjGWFpGISKqPwdN7v+0CYmCZr6sw8855n3/d7zrfnnO+87P+yWEKdylS+00qtKCK/nkNtYVJkKpft5Hsc1paKrbS+JfFae2vzPFrfk3iFer7Jq7TyZzlPIkxbi7ebGjkbbcfzUzx/SwpyBIcx4bGbOattx6e5weN65rMugq8NdsTrye7XpvayI1xRTOdTIl1BgUGaraI0maXKtLS3OgC4mg6cSQDOJ4o4R/6g5HOcnbE3xS9IPj/H+WgWqnO8bjhYK/k/F+0hC5PXPt2xYgJ9G4AvYoC+aKArCOgJBb5cL+LE2vt+zzriwbRKvJv2+sIw2RVLLxgPfajTXUrtu5K8YM0V6V7AJQPO1AYi0McO+vRQhAYvRsByJwT5uyNZH4zAp5wEHhXuC50hRPA54hIDEPW0H7rLfIHLqYhf48BT1ChKi9b6ZhoFGMnE/iTKn7serBtgDUNgdZfB6n8Ga74p+hxNV2fzz+msZhcOJCmA6+kweDndk8tlNZI2Y9ZqRWGH0esevtVi0OgERU4T2Ff0UOcdsCPjBFrbxySf0Hl7Nj9LZ5+vQkeGGvglFUbd40OONubbJHnGVGbyso9j/SbwfQq+LnKAqW43WO8kWNvI30PPBOZtPYRTOzyAH3XYEGjPU/S+qC5aY1XWEuBKGjrSFoAFbgEboLeaS2wunKazEeVoM8wXOjFutVCDJlFatL2VGRTg13QcTlWBrcr5RwEOGVTAcBo2R7mNWSjluyVtxmwtFflHeQ2+ScL5EhcoNtWBnXyAFFE6ZYYGHH9xIXWRHiW6RVfsbcyLJXnGqGerjLk+k/hBj5O5j2DecyVikecSmwu8BrmfoM/oTgF0iPK3m/0lk9W/k/0EMJSGo5mWYMEvg/U/QACezlAjDmp5m2YgRiMEaBalyWQyVlO7xZtabCOOZVKR1xWAXaSHOqgVZ7Zj++/0263ZnLfsBTobU4k2nVKoQUG8x4i1pWmZJC/UIO8Yr8F3WvQXO4PF7wE7SMIt9DG1jNKH9pOIVhLcS288xT+gYE3DYIfpbGgl2rOsKAupKEx0v2ZraVYqyQvWUM1TdEmPgZoAaGhUaFa4IjY+EHHaYGiWOwtI0IUgMnqlxF2QnLYeIUFLoFnmAo2/B8410EwijehVQopaRGnRGt7eRAEG4jF5nIZdbyQNMBp0XTTQ+NA78YwI7vPBNs3XEOeDjw/FMNz9LIomcOKfi6w0k79hLPCd5AHGOsJxuzNCwK3OcAF/xad8Dv4sH9nFWs/hR61mtKm1hSL/CK/BqTjh0L8BBhPwQpjzqFopr5DkBWttyVsK3MgELiaJoLnO/9E07yefXygzOb9ouM/X03F0+ZB/Jxv81iPN+21Ktj95rSMOlK/Edq2ngMaXfND8ylJsk/iHBX7Yk/Pk9P5HhX4oT10s+KWGRdhXtAzbkz1Rttkb/PolzX2itGj6BSp5o8tCJe9dHrnZzsqswtHGbNcUd7NTlj1sYVo9xV3tVKU08xu4L5PJGt3tVPyKFPYIfNBpCf+1MfYHvContdB/4OwAAAAASUVORK5CYII=</bitmap>
                    </item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">597d8105-4c1b-4397-8244-c4c6da10847c</item>
                    <item name="Name" type_name="gh_string" type_code="10">Honeybee_addHBGlz</item>
                    <item name="NickName" type_name="gh_string" type_code="10">addHBGlz</item>
                  </items>
                  <chunks count="2">
                    <chunk name="Attributes">
                      <items count="2">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>657</X>
                          <Y>411</Y>
                          <W>225</W>
                          <H>104</H>
                        </item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>794</X>
                          <Y>463</Y>
                        </item>
                      </items>
                    </chunk>
                    <chunk name="ParameterData">
                      <items count="8">
                        <item name="InputCount" type_name="gh_int32" type_code="3">5</item>
                        <item name="InputId" index="0" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="1" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="2" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="3" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="4" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="OutputCount" type_name="gh_int32" type_code="3">1</item>
                        <item name="OutputId" index="0" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                      </items>
                      <chunks count="6">
                        <chunk name="InputParam" index="0">
                          <items count="11">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">A HBZone or HBSurface to which you would like to add a customized glazing surface.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">3cfa25d0-0ea9-467d-bf0a-1246e90bdee6</item>
                            <item name="Name" type_name="gh_string" type_code="10">_HBObj</item>
                            <item name="NickName" type_name="gh_string" type_code="10">_HBObj</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="Source" index="0" type_name="gh_guid" type_code="9">bd800c62-36d6-4351-9daa-5cde178ed5e3</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">c37956f4-d39c-49c7-af71-1e87f8031b26</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>659</X>
                                  <Y>413</Y>
                                  <W>120</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>728.5</X>
                                  <Y>423</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="1">
                          <items count="13">
                            <item name="Access" type_name="gh_int32" type_code="3">1</item>
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">A surface or list of surfaces that represent the custom window(s) that you would like to add.  Note that these surfaces should be co-planar to the connected HBSurface or one of the surfaces of the connected HBZones.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">94bc9f61-54cc-4369-aaa9-bf37075116bf</item>
                            <item name="Mapping" type_name="gh_int32" type_code="3">1</item>
                            <item name="Name" type_name="gh_string" type_code="10">_childSurfaces</item>
                            <item name="NickName" type_name="gh_string" type_code="10">_childSurfaces</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">1</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="Source" index="0" type_name="gh_guid" type_code="9">6b82635b-6677-4636-9fc6-607d4d9a2a25</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">c37956f4-d39c-49c7-af71-1e87f8031b26</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>659</X>
                                  <Y>433</Y>
                                  <W>120</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>728.5</X>
                                  <Y>443</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="2">
                          <items count="12">
                            <item name="Access" type_name="gh_int32" type_code="3">1</item>
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">An optional list of names for child surfaces. If names are provided the length of names should be the same as _childSurfaces.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">1603c25c-ead2-4d02-91c5-bbeee1a97ead</item>
                            <item name="Mapping" type_name="gh_int32" type_code="3">1</item>
                            <item name="Name" type_name="gh_string" type_code="10">childSurfacesName_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">childSurfacesName_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">1</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">37261734-eec7-4f50-b6a8-b8d1f3c4396b</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>659</X>
                                  <Y>453</Y>
                                  <W>120</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>728.5</X>
                                  <Y>463</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="3">
                          <items count="11">
                            <item name="Access" type_name="gh_int32" type_code="3">1</item>
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">An optional list of EnergyPlus constructions to set the material construction of the window added to the HBSurface or HBZone.  This can be either the name of a window construction from the OpenStudio library (coming out of the 'Honeybee_Call from EP Construction Library' component) or a custom window construction you created from the 'Honeybee_EnergyPlus Construction' component. The list should match with childSurfaces list. In case the list doesn't match the first construction will be used for all surfaces.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">def003cb-22be-4343-b945-e719ac5dac88</item>
                            <item name="Name" type_name="gh_string" type_code="10">EPConstructions_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">EPConstructions_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">1</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">37261734-eec7-4f50-b6a8-b8d1f3c4396b</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>659</X>
                                  <Y>473</Y>
                                  <W>120</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>728.5</X>
                                  <Y>483</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="4">
                          <items count="11">
                            <item name="Access" type_name="gh_int32" type_code="3">1</item>
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">An optional Radiance material to set the material of the window added to the HBSurface or HBZone.  This can be either the name of a window material from the default Radaince library (coming out of the 'Honeybee_Call from Radiance Library' component) or a custom window material you created from any of the Radiance material components (like the 'Honeybee_Radiance Glass Material' component). The list should match with childSurfaces list. In case the list doesn't match the first material will be used for all surfaces.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">fd1fdc9b-474e-4100-b246-58211ed544ae</item>
                            <item name="Name" type_name="gh_string" type_code="10">RADMaterials_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">RADMaterials_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">1</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">37261734-eec7-4f50-b6a8-b8d1f3c4396b</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>659</X>
                                  <Y>493</Y>
                                  <W>120</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>728.5</X>
                                  <Y>503</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="0">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10">The Honeybee surface or zone with assigned glazing (in case of success).</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">8d0f6241-0c9b-46d1-a441-fac2f579a8d7</item>
                            <item name="Name" type_name="gh_string" type_code="10">HBObjWGLZ</item>
                            <item name="NickName" type_name="gh_string" type_code="10">HBObjWGLZ</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>809</X>
                                  <Y>413</Y>
                                  <W>71</W>
                                  <H>100</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>844.5</X>
                                  <Y>463</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                      </chunks>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="39">
              <items count="3">
                <item name="GUID" type_name="gh_guid" type_code="9">410755b1-224a-4c1e-a407-bf32fb45ea7e</item>
                <item name="Lib" type_name="gh_guid" type_code="9">16cf80bc-9018-cbdb-2238-976eb17fd30d</item>
                <item name="Name" type_name="gh_string" type_code="10">Honeybee_addHBGlz</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="10">
                    <item name="CodeInput" type_name="gh_string" type_code="10">#
# Honeybee: A Plugin for Environmental Analysis (GPL) started by Mostapha Sadeghipour Roudsari
# 
# This file is part of Honeybee.
# 
# Copyright (c) 2013-2017, Mostapha Sadeghipour Roudsari &lt;mostapha@ladybug.tools&gt; 
# Honeybee is free software; you can redistribute it and/or modify 
# it under the terms of the GNU General Public License as published 
# by the Free Software Foundation; either version 3 of the License, 
# or (at your option) any later version. 
# 
# Honeybee is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of 
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Honeybee; If not, see &lt;http://www.gnu.org/licenses/&gt;.
# 
# @license GPL-3.0+ &lt;http://spdx.org/licenses/GPL-3.0+&gt;


"""
Use this component to add a custom glazing surface to a HBSurface or HBZone.

-
Provided by Honeybee 0.0.62

    Args:
        _HBObj: A HBZone or HBSurface to which you would like to add a customized glazing surface.
        _childSurfaces: A surface or list of surfaces that represent the custom window(s) that you would like to add.  Note that these surfaces should be co-planar to the connected HBSurface or one of the surfaces of the connected HBZones.
        childSurfacesName_: An optional list of names for child surfaces. If names are provided the length of names should be the same as _childSurfaces.
        EPConstructions_: An optional list of EnergyPlus constructions to set the material construction of the window added to the HBSurface or HBZone.  This can be either the name of a window construction from the OpenStudio library (coming out of the 'Honeybee_Call from EP Construction Library' component) or a custom window construction you created from the 'Honeybee_EnergyPlus Construction' component. The list should match with childSurfaces list. In case the list doesn't match the first construction will be used for all surfaces.
        RADMaterials_: An optional Radiance material to set the material of the window added to the HBSurface or HBZone.  This can be either the name of a window material from the default Radaince library (coming out of the 'Honeybee_Call from Radiance Library' component) or a custom window material you created from any of the Radiance material components (like the 'Honeybee_Radiance Glass Material' component). The list should match with childSurfaces list. In case the list doesn't match the first material will be used for all surfaces.
    Returns:
        readMe!:...
        HBObjWGLZ: The Honeybee surface or zone with assigned glazing (in case of success).
"""

import rhinoscriptsyntax as rs
import Rhino as rc
import scriptcontext as sc
import os
import sys
import System
import Grasshopper.Kernel as gh
import uuid

ghenv.Component.Name = 'Honeybee_addHBGlz'
ghenv.Component.NickName = 'addHBGlz'
ghenv.Component.Message = 'VER 0.0.62\nJUL_28_2017'
ghenv.Component.IconDisplayMode = ghenv.Component.IconDisplayMode.application
ghenv.Component.Category = "Honeybee"
ghenv.Component.SubCategory = "00 | Honeybee"
#compatibleHBVersion = VER 0.0.57\nNOV_04_2016
#compatibleLBVersion = VER 0.0.59\nFEB_01_2015
try: ghenv.Component.AdditionalHelpFromDocStrings = "3"
except: pass

def main(HBObject, childSurfaces, childSurfacesName, EPConstructions, RADMaterials, tolerance):

    def addPotentialChildSurface(HBSurface):
        
        glzCount = 0
        for srfCount, srf in enumerate(childSurfaces):
            # check if the surface is located on the base surface
            if HBSurface.isPossibleChild(srf, tolerance):
                # if yes then create the child surface
                guid = str(uuid.uuid4())
                try:
                    name = childSurfacesName[srfCount]
                except:
                   name = HBSurface.name + "_glz_" + str(glzCount) + "_" + "".join(guid.split("-")[:-1])

                number = guid.split("-")[-1]
                glzCount += 1
                HBFenSrf = hb_EPFenSurface(srf, number, name, HBSurface, 5)
                
                # check normal direction
                if not rc.Geometry.Vector3d.VectorAngle(HBFenSrf.normalVector, HBFenSrf.parent.normalVector)&lt;sc.doc.ModelAngleToleranceRadians:
                    HBFenSrf.geometry.Flip()
                    HBFenSrf.normalVector.Reverse()
                
                if len(EPConstructions)!=0:
                    
                    try:
                        EPConstruction = EPConstructions[srfCount]
                    except:
                        EPConstruction = EPConstructions[0]
                    
                    if EPConstruction == None: continue
                        
                    # if it is just the name of the material make sure it is already defined
                    if len(EPConstruction.split("\n")) == 1:
                        # if the material is not in the library add it to the library
                        if not hb_EPObjectsAux.isEPConstruction(EPConstruction):
                            warningMsg = "Can't find " + EPConstruction + " in EP Construction Library.\n" + \
                                        "Add the construction to the library and try again."
                            ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warningMsg)
                            return 
                    else:
                        # it is a full string.
                        if EPConstruction.startswith('WindowMaterial:'):
                            warningMsg = "Your window construction, " + EPConstruction.split('\n')[1].split(',')[0] + ", is a window material and not a full window construction.\n" + \
                                        "Pass this window material through a 'Honeybee_EnergyPlus Construction' component cand connect the construction to this one."
                            ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warningMsg)
                            return 
                        added, EPConstruction = hb_EPObjectsAux.addEPObjectToLib(EPConstruction, overwrite = True)
                        
                        if not added:
                            msg = EPConstruction + " is not added to the project library!"
                            ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, msg)
                            print msg
                            return 
                    
                    try:
                        HBFenSrf.setEPConstruction(EPConstruction)
                    except:
                        warningMsg = "You are using an old version of Honeybee_Honeybee! Update your files and try again."
                        print warningMsg
                        ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warningMsg)
                        return -1
                    
                
                
                if len(RADMaterials)!= 0:
                    
                    try:
                        RADMaterial = RADMaterials[srfCount]
                    except:
                        RADMaterial = RADMaterials[0]
                    
                    if RADMaterial == None: continue
                    
                    if len(RADMaterial.strip().split(" ")) == 1:
                        if not hb_RADMaterialAUX.isMatrialExistInLibrary(RADMaterial):
                            warningMsg = "Can't find " + RADMaterial + " in RAD Material Library.\n" + \
                                "Add the material to the library and try again."
                            ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warningMsg)
                            return
                    
                    addedToLib, HBFenSrf.RadMaterial = hb_RADMaterialAUX.analyseRadMaterials(RADMaterial, True)
                    materialType = hb_RADMaterialAUX.getRADMaterialType(HBFenSrf.RadMaterial)
                    if materialType == 'plastic':
                        warningMsg = HBFenSrf.RadMaterial + " is not a typical glass material. Are you sure you selected the right material?"
                        ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warningMsg)
                        return
    
                # add it to the base surface
                HBSurface.addChildSrf(HBFenSrf)
                HBSurface.calculatePunchedSurface()


    # import the classes
    if sc.sticky.has_key('honeybee_release'):
        try:
            if not sc.sticky['honeybee_release'].isCompatible(ghenv.Component): return -1
            if sc.sticky['honeybee_release'].isInputMissing(ghenv.Component): return -1
        except:
            warning = "You need a newer version of Honeybee to use this compoent." + \
            "Use updateHoneybee component to update userObjects.\n" + \
            "If you have already updated userObjects drag Honeybee_Honeybee component " + \
            "into canvas and try again."
            w = gh.GH_RuntimeMessageLevel.Warning
            ghenv.Component.AddRuntimeMessage(w, warning)
            return -1
            
        # don't customize this part
        hb_EPZone = sc.sticky["honeybee_EPZone"]
        hb_EPSrf = sc.sticky["honeybee_EPSurface"]
        hb_EPZoneSurface = sc.sticky["honeybee_EPZoneSurface"]
        hb_EPFenSurface = sc.sticky["honeybee_EPFenSurface"]
        hb_EPObjectsAux = sc.sticky["honeybee_EPObjectsAUX"]()
        hb_RADMaterialAUX = sc.sticky["honeybee_RADMaterialAUX"]
        
        # if any of child surfaces is mesh, convert them to a surface
        cleanChildSurfaces = []
        for srf in childSurfaces:
            try:
                # check if this is a mesh
                srf.Faces[0].IsQuad
                # convert to brep
                srf = rc.Geometry.Brep.CreateFromMesh(srf, False)
            except:
                pass
            
            # collect surfaces
            cleanChildSurfaces.append(srf)
        
        # check number of faces and names
        if len(childSurfacesName)!= 0:
            if len(childSurfacesName)!=len(childSurfaces):
                nameCount = len(childSurfacesName)
                srfCount = len(childSurfaces)
                raise Exception("Length of _childSurfaces [%s] should match length of childSurfacesName [%s]"%(srfCount, nameCount))
        
        # call the surface from the hive
        hb_hive = sc.sticky["honeybee_Hive"]()
        try:
            HBObject = hb_hive.callFromHoneybeeHive([HBObject])[0]
        except:
            raise TypeError("Wrong input type for _HBObj. Connect a Honeybee Surface or a HoneybeeZone to HBObject input")

        # check if the object is a zone or a surface
        if HBObject.objectType == "HBZone":
            # add window for each surface
            for HBSurface in HBObject.surfaces:
                addPotentialChildSurface(HBSurface)
        else:
            # add window to the HBSurface
            addPotentialChildSurface(HBObject)
        
        # add to the hive
        HBObject  = hb_hive.addToHoneybeeHive([HBObject], ghenv.Component)
        
        return HBObject
        
    else:
        print "You should first let Honeybee fly..."
        w = gh.GH_RuntimeMessageLevel.Warning
        ghenv.Component.AddRuntimeMessage(w, "You should first let Honeybee fly...")
        return -1

if _HBObj!=None and len(_childSurfaces) and _childSurfaces[0]!=None:
    
    # if tolerance_==None:
    tolerance_ = sc.doc.ModelAbsoluteTolerance
        
    results = main(_HBObj, _childSurfaces, childSurfacesName_, EPConstructions_, RADMaterials_, tolerance_)
    
    if results != -1:
        HBObjWGLZ = results</item>
                    <item name="Description" type_name="gh_string" type_code="10">Use this component to add a custom glazing surface to a HBSurface or HBZone.
-
Provided by Honeybee 0.0.62</item>
                    <item name="EditorLocation" type_name="gh_drawing_point" type_code="30">
                      <X>61</X>
                      <Y>92</Y>
                    </item>
                    <item name="EditorSize" type_name="gh_drawing_size" type_code="32">
                      <W>1528</W>
                      <H>926</H>
                    </item>
                    <item name="HideInput" type_name="gh_bool" type_code="1">true</item>
                    <item name="HideOutput" type_name="gh_bool" type_code="1">true</item>
                    <item name="IconOverride" type_name="gh_drawing_bitmap" type_code="37">
                      <bitmap length="1313">iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOwAAADsABataJCQAABMNJREFUSEu9VWtQlGUUfteFhXVxKS4Zl7gOoVgMgqaDCwqSJHEN47awu8hNGO1CyKWUFYEyMCKDuCXQlOmMDSag1hhIzjBkgor6o/rRjGWFpGISKqPwdN7v+0CYmCZr6sw8855n3/d7zrfnnO+87P+yWEKdylS+00qtKCK/nkNtYVJkKpft5Hsc1paKrbS+JfFae2vzPFrfk3iFer7Jq7TyZzlPIkxbi7ebGjkbbcfzUzx/SwpyBIcx4bGbOattx6e5weN65rMugq8NdsTrye7XpvayI1xRTOdTIl1BgUGaraI0maXKtLS3OgC4mg6cSQDOJ4o4R/6g5HOcnbE3xS9IPj/H+WgWqnO8bjhYK/k/F+0hC5PXPt2xYgJ9G4AvYoC+aKArCOgJBb5cL+LE2vt+zzriwbRKvJv2+sIw2RVLLxgPfajTXUrtu5K8YM0V6V7AJQPO1AYi0McO+vRQhAYvRsByJwT5uyNZH4zAp5wEHhXuC50hRPA54hIDEPW0H7rLfIHLqYhf48BT1ChKi9b6ZhoFGMnE/iTKn7serBtgDUNgdZfB6n8Ga74p+hxNV2fzz+msZhcOJCmA6+kweDndk8tlNZI2Y9ZqRWGH0esevtVi0OgERU4T2Ff0UOcdsCPjBFrbxySf0Hl7Nj9LZ5+vQkeGGvglFUbd40OONubbJHnGVGbyso9j/SbwfQq+LnKAqW43WO8kWNvI30PPBOZtPYRTOzyAH3XYEGjPU/S+qC5aY1XWEuBKGjrSFoAFbgEboLeaS2wunKazEeVoM8wXOjFutVCDJlFatL2VGRTg13QcTlWBrcr5RwEOGVTAcBo2R7mNWSjluyVtxmwtFflHeQ2+ScL5EhcoNtWBnXyAFFE6ZYYGHH9xIXWRHiW6RVfsbcyLJXnGqGerjLk+k/hBj5O5j2DecyVikecSmwu8BrmfoM/oTgF0iPK3m/0lk9W/k/0EMJSGo5mWYMEvg/U/QACezlAjDmp5m2YgRiMEaBalyWQyVlO7xZtabCOOZVKR1xWAXaSHOqgVZ7Zj++/0263ZnLfsBTobU4k2nVKoQUG8x4i1pWmZJC/UIO8Yr8F3WvQXO4PF7wE7SMIt9DG1jNKH9pOIVhLcS288xT+gYE3DYIfpbGgl2rOsKAupKEx0v2ZraVYqyQvWUM1TdEmPgZoAaGhUaFa4IjY+EHHaYGiWOwtI0IUgMnqlxF2QnLYeIUFLoFnmAo2/B8410EwijehVQopaRGnRGt7eRAEG4jF5nIZdbyQNMBp0XTTQ+NA78YwI7vPBNs3XEOeDjw/FMNz9LIomcOKfi6w0k79hLPCd5AHGOsJxuzNCwK3OcAF/xad8Dv4sH9nFWs/hR61mtKm1hSL/CK/BqTjh0L8BBhPwQpjzqFopr5DkBWttyVsK3MgELiaJoLnO/9E07yefXygzOb9ouM/X03F0+ZB/Jxv81iPN+21Ktj95rSMOlK/Edq2ngMaXfND8ylJsk/iHBX7Yk/Pk9P5HhX4oT10s+KWGRdhXtAzbkz1Rttkb/PolzX2itGj6BSp5o8tCJe9dHrnZzsqswtHGbNcUd7NTlj1sYVo9xV3tVKU08xu4L5PJGt3tVPyKFPYIfNBpCf+1MfYHvContdB/4OwAAAAASUVORK5CYII=</bitmap>
                    </item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">17b7dfef-971c-49d0-abc3-ba1258f35647</item>
                    <item name="Name" type_name="gh_string" type_code="10">Honeybee_addHBGlz</item>
                    <item name="NickName" type_name="gh_string" type_code="10">addHBGlz</item>
                  </items>
                  <chunks count="2">
                    <chunk name="Attributes">
                      <items count="2">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>661</X>
                          <Y>641</Y>
                          <W>225</W>
                          <H>104</H>
                        </item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>798</X>
                          <Y>693</Y>
                        </item>
                      </items>
                    </chunk>
                    <chunk name="ParameterData">
                      <items count="8">
                        <item name="InputCount" type_name="gh_int32" type_code="3">5</item>
                        <item name="InputId" index="0" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="1" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="2" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="3" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="4" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="OutputCount" type_name="gh_int32" type_code="3">1</item>
                        <item name="OutputId" index="0" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                      </items>
                      <chunks count="6">
                        <chunk name="InputParam" index="0">
                          <items count="11">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">A HBZone or HBSurface to which you would like to add a customized glazing surface.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">6de3b5a9-310a-4fff-9501-a98d0171df84</item>
                            <item name="Name" type_name="gh_string" type_code="10">_HBObj</item>
                            <item name="NickName" type_name="gh_string" type_code="10">_HBObj</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="Source" index="0" type_name="gh_guid" type_code="9">bf8a8917-531e-48de-bd69-394af8f07f64</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">c37956f4-d39c-49c7-af71-1e87f8031b26</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>663</X>
                                  <Y>643</Y>
                                  <W>120</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>732.5</X>
                                  <Y>653</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="1">
                          <items count="13">
                            <item name="Access" type_name="gh_int32" type_code="3">1</item>
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">A surface or list of surfaces that represent the custom window(s) that you would like to add.  Note that these surfaces should be co-planar to the connected HBSurface or one of the surfaces of the connected HBZones.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">fe98bb48-2a21-45bf-882c-bade4a36207d</item>
                            <item name="Mapping" type_name="gh_int32" type_code="3">1</item>
                            <item name="Name" type_name="gh_string" type_code="10">_childSurfaces</item>
                            <item name="NickName" type_name="gh_string" type_code="10">_childSurfaces</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">1</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="Source" index="0" type_name="gh_guid" type_code="9">2d62d641-f8c5-42dd-bbc3-2ba93c2fe969</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">c37956f4-d39c-49c7-af71-1e87f8031b26</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>663</X>
                                  <Y>663</Y>
                                  <W>120</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>732.5</X>
                                  <Y>673</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="2">
                          <items count="12">
                            <item name="Access" type_name="gh_int32" type_code="3">1</item>
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">An optional list of names for child surfaces. If names are provided the length of names should be the same as _childSurfaces.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">54149685-7e69-4d8c-a2a4-ad5e75cebf8b</item>
                            <item name="Mapping" type_name="gh_int32" type_code="3">1</item>
                            <item name="Name" type_name="gh_string" type_code="10">childSurfacesName_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">childSurfacesName_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">1</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">37261734-eec7-4f50-b6a8-b8d1f3c4396b</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>663</X>
                                  <Y>683</Y>
                                  <W>120</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>732.5</X>
                                  <Y>693</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="3">
                          <items count="11">
                            <item name="Access" type_name="gh_int32" type_code="3">1</item>
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">An optional list of EnergyPlus constructions to set the material construction of the window added to the HBSurface or HBZone.  This can be either the name of a window construction from the OpenStudio library (coming out of the 'Honeybee_Call from EP Construction Library' component) or a custom window construction you created from the 'Honeybee_EnergyPlus Construction' component. The list should match with childSurfaces list. In case the list doesn't match the first construction will be used for all surfaces.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">d7520533-9bbb-42ae-bcd6-a1ef5b278da8</item>
                            <item name="Name" type_name="gh_string" type_code="10">EPConstructions_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">EPConstructions_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">1</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">37261734-eec7-4f50-b6a8-b8d1f3c4396b</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>663</X>
                                  <Y>703</Y>
                                  <W>120</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>732.5</X>
                                  <Y>713</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="4">
                          <items count="11">
                            <item name="Access" type_name="gh_int32" type_code="3">1</item>
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">An optional Radiance material to set the material of the window added to the HBSurface or HBZone.  This can be either the name of a window material from the default Radaince library (coming out of the 'Honeybee_Call from Radiance Library' component) or a custom window material you created from any of the Radiance material components (like the 'Honeybee_Radiance Glass Material' component). The list should match with childSurfaces list. In case the list doesn't match the first material will be used for all surfaces.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">8088463d-0600-4838-8033-1083076811db</item>
                            <item name="Name" type_name="gh_string" type_code="10">RADMaterials_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">RADMaterials_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">1</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">37261734-eec7-4f50-b6a8-b8d1f3c4396b</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>663</X>
                                  <Y>723</Y>
                                  <W>120</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>732.5</X>
                                  <Y>733</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="0">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10">The Honeybee surface or zone with assigned glazing (in case of success).</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">9da0c9f6-52f2-4251-982e-5ffd72111336</item>
                            <item name="Name" type_name="gh_string" type_code="10">HBObjWGLZ</item>
                            <item name="NickName" type_name="gh_string" type_code="10">HBObjWGLZ</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>813</X>
                                  <Y>643</Y>
                                  <W>71</W>
                                  <H>100</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>848.5</X>
                                  <Y>693</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                      </chunks>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="40">
              <items count="3">
                <item name="GUID" type_name="gh_guid" type_code="9">410755b1-224a-4c1e-a407-bf32fb45ea7e</item>
                <item name="Lib" type_name="gh_guid" type_code="9">16cf80bc-9018-cbdb-2238-976eb17fd30d</item>
                <item name="Name" type_name="gh_string" type_code="10">Honeybee_createHBZones</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="10">
                    <item name="CodeInput" type_name="gh_string" type_code="10">#
# Honeybee: A Plugin for Environmental Analysis (GPL) started by Mostapha Sadeghipour Roudsari
# 
# This file is part of Honeybee.
# 
# Copyright (c) 2013-2017, Mostapha Sadeghipour Roudsari &lt;mostapha@ladybug.tools&gt; 
# Honeybee is free software; you can redistribute it and/or modify 
# it under the terms of the GNU General Public License as published 
# by the Free Software Foundation; either version 3 of the License, 
# or (at your option) any later version. 
# 
# Honeybee is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of 
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Honeybee; If not, see &lt;http://www.gnu.org/licenses/&gt;.
# 
# @license GPL-3.0+ &lt;http://spdx.org/licenses/GPL-3.0+&gt;


"""
    Create an HBZone from HB Surfaces
    
-
Provided by Honeybee 0.0.62

    Args:
        _name_: The name of the zone as a string
        zoneProgram_: Optional input for the program of this zone
        isConditioned_: True/False value. This value will be applied to the ouput zone to either condition them with an Ideal Air Loads System (True) or not condition them at all (False). If no value is connected here, all zones will be conditioned with an Ideal Air Loads System by default.
        _HBSurfaces: A list of Honeybee Surfaces
    Returns:
        readMe!:...
        HBZone: Honeybee zone as the result
"""

import rhinoscriptsyntax as rs
import Rhino as rc
import scriptcontext as sc
import os
import sys
import System
import Grasshopper.Kernel as gh
import uuid
import math

ghenv.Component.Name = 'Honeybee_createHBZones'
ghenv.Component.NickName = 'createHBZones'
ghenv.Component.Message = 'VER 0.0.62\nJUL_28_2017'
ghenv.Component.IconDisplayMode = ghenv.Component.IconDisplayMode.application
ghenv.Component.Category = "Honeybee"
ghenv.Component.SubCategory = "00 | Honeybee"
#compatibleHBVersion = VER 0.0.56\nNOV_04_2016
#compatibleLBVersion = VER 0.0.59\nFEB_01_2015
try: ghenv.Component.AdditionalHelpFromDocStrings = "3"
except: pass


tolerance = sc.doc.ModelAbsoluteTolerance

def main(zoneName,  HBZoneProgram, HBSurfaces, isConditioned):
    # import the classes
    if sc.sticky.has_key('honeybee_release'):

        try:
            if not sc.sticky['honeybee_release'].isCompatible(ghenv.Component): return -1
            if sc.sticky['honeybee_release'].isInputMissing(ghenv.Component): return -1
        except:
            warning = "You need a newer version of Honeybee to use this compoent." + \
            "Use updateHoneybee component to update userObjects.\n" + \
            "If you have already updated userObjects drag Honeybee_Honeybee component " + \
            "into canvas and try again."
            w = gh.GH_RuntimeMessageLevel.Warning
            ghenv.Component.AddRuntimeMessage(w, warning)
            return
            
        # don't customize this part
        hb_EPZone = sc.sticky["honeybee_EPZone"]
        hb_EPSrf = sc.sticky["honeybee_EPSurface"]
        hb_EPZoneSurface = sc.sticky["honeybee_EPSurface"]
        
    else:
        print "You should first let Honeybee to fly..."
        w = gh.GH_RuntimeMessageLevel.Warning
        ghenv.Component.AddRuntimeMessage(w, "You should first let Honeybee to fly...")
        return
    
    
    # call the surface from the hive
    hb_hive = sc.sticky["honeybee_Hive"]()
    
    HBSurfaces = hb_hive.callFromHoneybeeHive(HBSurfaces)
    
    # bldg program
    try: bldgProgram, zoneProgram = HBZoneProgram.split("::")
    except: bldgProgram, zoneProgram = 'Office', 'OpenOffice'
    
    # initiate the zone
    zoneID = str(uuid.uuid4())
    
    # default for isConditioned is True
    if isConditioned== None: isConditioned = True
    
    HBZone = hb_EPZone(None, zoneID, zoneName.strip().replace(" ","_"), (bldgProgram, zoneProgram), isConditioned)
    
    for hbSrf in HBSurfaces:
        HBZone.addSrf(hbSrf)
        if hbSrf.shdCntrlZoneInstructs != []:
            HBZone.daylightCntrlFract = 1
            HBZone.illumSetPt = hbSrf.shdCntrlZoneInstructs[0]
            HBZone.GlareDiscomIndex = hbSrf.shdCntrlZoneInstructs[1]
            HBZone.glareView = hbSrf.shdCntrlZoneInstructs[2]
    
    # create the zone from the surfaces
    HBZone.createZoneFromSurfaces()
    
    if not HBZone.isClosed:
        message = "All of your HBSrfs must make a closed volume."
        print message
        w = gh.GH_RuntimeMessageLevel.Warning
        ghenv.Component.AddRuntimeMessage(w, message)
    
    HBZone  = hb_hive.addToHoneybeeHive([HBZone], ghenv.Component)
    
    return HBZone 

if _name != None and _HBSurfaces and _HBSurfaces[0]!=None:
    
    result= main(_name, zoneProgram_, _HBSurfaces, isConditioned_)
    
    HBZone = result
</item>
                    <item name="Description" type_name="gh_string" type_code="10">    Create an HBZone from HB Surfaces
-
Provided by Honeybee 0.0.62</item>
                    <item name="EditorLocation" type_name="gh_drawing_point" type_code="30">
                      <X>1811</X>
                      <Y>84</Y>
                    </item>
                    <item name="EditorSize" type_name="gh_drawing_size" type_code="32">
                      <W>866</W>
                      <H>898</H>
                    </item>
                    <item name="HideInput" type_name="gh_bool" type_code="1">true</item>
                    <item name="HideOutput" type_name="gh_bool" type_code="1">false</item>
                    <item name="IconOverride" type_name="gh_drawing_bitmap" type_code="37">
                      <bitmap length="1200">iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOwQAADsEBuJFr7QAABFJJREFUSEvNlH1MlXUUx3+3m/I6IBMQXxiOnIC8ycs1dMpLV0ivQAiivF1IGmIqNXUqhorDzKlBbQWYxBakU+NFJcRRutTMRWRmmBlZOc2yrSYqgrj6dJ57qalhq/QPv9t3e/b8fud7zvM9zznqQcNy4Xrr4/1FoLvT4CM1y0KoX21gtLvNcXk3wXp0b7ARNmZFj6T3QBJ8lQmnM+BoCgUJo5GzD4RDtIv/B8VxYW5XO6ufgDOZ/HZoJtd2myy8eVCSdWZxrnYqiUHOPXK3zBry7xDm7DDox3cKQ+HzNDiRRs9eEd47g+4mK7Xn63tM0D4bTmXQuu5xHB1tuyXWaJUYGDHC9s154+DC03Ayjb598VwVoT+F76R2duPdeCliDlycS+3yUM22TmGiJngnKgNGO5ET60ldUTh8nQUfpdAtlgwkbqGc/X44Gc6aaXkxgrlxnoSOcdGSVFslb4FOryvZJZe+3RZL9tRRpEtjD2ycZEl0Y38C3WLTX8JiUU+zVC69aa+IwmwcRUbMSD4pj+KQ0PVRmwF7UrohcyxczoOe+ZTnB+DpaodZApEG82UGvWKH1g/NPtpSKYj3wmOILaW5fta4n3Opfi4IvU5X0a95Gyo35/nT05LE1hQX+GEWfWeyKc32ZdaU4SwyecFx8VoSFc0eQ9IkDzZm+dB32izNNrIlbRh8mkGFJBCtv1skWFe3OpyLb0Wi9CEYfN3oLHIC8vmuIZ7Jvo/w1EQPUiNHEObtzNmGBLiWzsEchcOosahhwdIzE43FBhzt9a/0a96Gku2FIfRt9UWtqkOVXcI2Jo+lJje66qdAVz7z5SuSI6TS6wv5/nUfkqJl2IxFqG3gXbAMWg3UrzHgZK8fsAeVVYuDubB+BCp6Meo8qA7htCpifezgXAYvLwhk/Tx/OPYkTo5DUWs6UJ1ypw3sgqWI/RG8uWT8XS0qq10RyvmSYajEVVbxpl7Uri4iJ4r/XyShFbDlebFiZwg20SbUCbmz8xfUx5JgUiw0GdheGIZer6vs17wFOlXSIP5drx6H8jejjkqwJlB1jey5RvhsGjteCLMMEy3hjMlZgHpfzrVCavrw8guDD6Nplql2cRxU2q96GyrX5vhKUxezY4UPytYLteSIVAgxUY/JopvJS/I7rjX7wJ5w7ONmoo6JeOJr2Do407ElQmILqPgHi6YJT70hPnNJVkVjIGY/hYpcSkREgEzrHGuCbEnwXhQPBcaim76Q4iAlMxEtMc+wY0kID+t150Un1aJ4F0QOtRn8a3tFDFzNof1VP1ameEsP0nlbelQtFXI4hQVGd67sNkBvPicrY/BwteuT2AF30N2wSVvFXftmwBWZUhmymqXjKX9WvuZkukz7PC43m8g2et6Uu1uFekvUf4SDsHX+dPmLvsmiXJZgySKx8KdcVso0y1mb0E27eK+YMMHHpS158nDLipga6npK3mnr/b5jlXCT9fGBgFJ/AF6Pynb7/hnZAAAAAElFTkSuQmCC</bitmap>
                    </item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">c30904df-5736-4b48-b4bb-87a0a012d47d</item>
                    <item name="Name" type_name="gh_string" type_code="10">Honeybee_createHBZones</item>
                    <item name="NickName" type_name="gh_string" type_code="10">createHBZones</item>
                  </items>
                  <chunks count="2">
                    <chunk name="Attributes">
                      <items count="2">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>2001</X>
                          <Y>984</Y>
                          <W>179</W>
                          <H>84</H>
                        </item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>2113</X>
                          <Y>1026</Y>
                        </item>
                      </items>
                    </chunk>
                    <chunk name="ParameterData">
                      <items count="8">
                        <item name="InputCount" type_name="gh_int32" type_code="3">4</item>
                        <item name="InputId" index="0" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="1" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="2" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="3" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="OutputCount" type_name="gh_int32" type_code="3">2</item>
                        <item name="OutputId" index="0" type_name="gh_guid" type_code="9">3ede854e-c753-40eb-84cb-b48008f14fd4</item>
                        <item name="OutputId" index="1" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                      </items>
                      <chunks count="6">
                        <chunk name="InputParam" index="0">
                          <items count="11">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">The name of the zone as a string</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">203e02dc-827b-4794-8f09-796da9bb2976</item>
                            <item name="Name" type_name="gh_string" type_code="10">_name</item>
                            <item name="NickName" type_name="gh_string" type_code="10">_name</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="Source" index="0" type_name="gh_guid" type_code="9">a0efc5bf-d0c0-4f43-886f-31be7ea50f46</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">37261734-eec7-4f50-b6a8-b8d1f3c4396b</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>2003</X>
                                  <Y>986</Y>
                                  <W>95</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>2060</X>
                                  <Y>996</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="1">
                          <items count="11">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Optional input for the program of this zone</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">8499b103-cd37-4caf-827b-97adcb0e038e</item>
                            <item name="Name" type_name="gh_string" type_code="10">zoneProgram_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">zoneProgram_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="Source" index="0" type_name="gh_guid" type_code="9">ac50dba3-51cd-4ad6-9d4c-e55aabc9107f</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">37261734-eec7-4f50-b6a8-b8d1f3c4396b</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>2003</X>
                                  <Y>1006</Y>
                                  <W>95</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>2060</X>
                                  <Y>1016</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="2">
                          <items count="21">
                            <item name="Access" type_name="gh_int32" type_code="3">1</item>
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">A list of Honeybee Surfaces</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">78d8ae00-6ccd-4d5b-93a1-fc9f037c8feb</item>
                            <item name="Mapping" type_name="gh_int32" type_code="3">1</item>
                            <item name="Name" type_name="gh_string" type_code="10">_HBSurfaces</item>
                            <item name="NickName" type_name="gh_string" type_code="10">_HBSurfaces</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">1</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="Source" index="0" type_name="gh_guid" type_code="9">8d0f6241-0c9b-46d1-a441-fac2f579a8d7</item>
                            <item name="Source" index="1" type_name="gh_guid" type_code="9">9da0c9f6-52f2-4251-982e-5ffd72111336</item>
                            <item name="Source" index="2" type_name="gh_guid" type_code="9">19443d75-b3da-46bd-bf57-eb35092daef6</item>
                            <item name="Source" index="3" type_name="gh_guid" type_code="9">2a4ee528-5eb5-43e0-85f1-202e5a0fdcf1</item>
                            <item name="Source" index="4" type_name="gh_guid" type_code="9">0fe5789e-f610-4b87-94b0-92d4e8c547e8</item>
                            <item name="Source" index="5" type_name="gh_guid" type_code="9">3d329af2-f346-4256-ae1c-03f160986d2b</item>
                            <item name="Source" index="6" type_name="gh_guid" type_code="9">83391e91-4af1-4aa9-b298-7a13346407dc</item>
                            <item name="Source" index="7" type_name="gh_guid" type_code="9">1617c6be-8391-408d-ab4b-998a5ae500e0</item>
                            <item name="Source" index="8" type_name="gh_guid" type_code="9">eb79e439-b683-4e31-84b1-53dcf8e6e30b</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">9</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">2ceb0405-fdfe-403d-a4d6-8786da45fb9d</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>2003</X>
                                  <Y>1026</Y>
                                  <W>95</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>2060</X>
                                  <Y>1036</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="3">
                          <items count="11">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">True/False value. This value will be applied to the ouput zone to either condition them with an Ideal Air Loads System (True) or not condition them at all (False). If no value is connected here, all zones will be conditioned with an Ideal Air Loads System by default.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">9787060d-3022-44b7-ab62-5e5dde909d12</item>
                            <item name="Name" type_name="gh_string" type_code="10">isConditioned_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">isConditioned_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="Source" index="0" type_name="gh_guid" type_code="9">072bc692-1834-4f14-821b-7b5b11a19474</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">d60527f5-b5af-4ef6-8970-5f96fe412559</item>
                          </items>
                          <chunks count="2">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>2003</X>
                                  <Y>1046</Y>
                                  <W>95</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>2060</X>
                                  <Y>1056</Y>
                                </item>
                              </items>
                            </chunk>
                            <chunk name="PersistentData">
                              <items count="1">
                                <item name="Count" type_name="gh_int32" type_code="3">1</item>
                              </items>
                              <chunks count="1">
                                <chunk name="Branch" index="0">
                                  <items count="2">
                                    <item name="Count" type_name="gh_int32" type_code="3">1</item>
                                    <item name="Path" type_name="gh_string" type_code="10">{0}</item>
                                  </items>
                                  <chunks count="1">
                                    <chunk name="Item" index="0">
                                      <items count="2">
                                        <item name="boolean" type_name="gh_bool" type_code="1">true</item>
                                        <item name="TypeName" type_name="gh_string" type_code="10">Grasshopper.Kernel.Types.GH_Boolean</item>
                                      </items>
                                    </chunk>
                                  </chunks>
                                </chunk>
                              </chunks>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="0">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10">...</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">efa0948b-68d5-41f2-bdb4-35d988fd81ca</item>
                            <item name="Name" type_name="gh_string" type_code="10">out</item>
                            <item name="NickName" type_name="gh_string" type_code="10">readMe!</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>2128</X>
                                  <Y>986</Y>
                                  <W>50</W>
                                  <H>40</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>2153</X>
                                  <Y>1006</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="1">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10">Honeybee zone as the result</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">47324697-c25f-4352-b7b1-fb5c598e7432</item>
                            <item name="Name" type_name="gh_string" type_code="10">HBZone</item>
                            <item name="NickName" type_name="gh_string" type_code="10">HBZone</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>2128</X>
                                  <Y>1026</Y>
                                  <W>50</W>
                                  <H>40</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>2153</X>
                                  <Y>1046</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                      </chunks>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="41">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">59e0b89a-e487-49f8-bab8-b5bab16be14c</item>
                <item name="Name" type_name="gh_string" type_code="10">Panel</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="8">
                    <item name="Description" type_name="gh_string" type_code="10">A panel for custom notes and text values</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">a0efc5bf-d0c0-4f43-886f-31be7ea50f46</item>
                    <item name="Name" type_name="gh_string" type_code="10">Panel</item>
                    <item name="NickName" type_name="gh_string" type_code="10"></item>
                    <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                    <item name="ScrollRatio" type_name="gh_double" type_code="6">0</item>
                    <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                    <item name="UserText" type_name="gh_string" type_code="10">naman_room</item>
                  </items>
                  <chunks count="2">
                    <chunk name="Attributes">
                      <items count="5">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>1881</X>
                          <Y>984</Y>
                          <W>83</W>
                          <H>20</H>
                        </item>
                        <item name="MarginLeft" type_name="gh_int32" type_code="3">0</item>
                        <item name="MarginRight" type_name="gh_int32" type_code="3">0</item>
                        <item name="MarginTop" type_name="gh_int32" type_code="3">0</item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>1881.896</X>
                          <Y>984.8353</Y>
                        </item>
                      </items>
                    </chunk>
                    <chunk name="PanelProperties">
                      <items count="6">
                        <item name="Colour" type_name="gh_drawing_color" type_code="36">
                          <ARGB>255;255;250;90</ARGB>
                        </item>
                        <item name="DrawIndices" type_name="gh_bool" type_code="1">true</item>
                        <item name="DrawPaths" type_name="gh_bool" type_code="1">true</item>
                        <item name="Multiline" type_name="gh_bool" type_code="1">true</item>
                        <item name="Stream" type_name="gh_bool" type_code="1">false</item>
                        <item name="Wrap" type_name="gh_bool" type_code="1">true</item>
                      </items>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="42">
              <items count="3">
                <item name="GUID" type_name="gh_guid" type_code="9">410755b1-224a-4c1e-a407-bf32fb45ea7e</item>
                <item name="Lib" type_name="gh_guid" type_code="9">16cf80bc-9018-cbdb-2238-976eb17fd30d</item>
                <item name="Name" type_name="gh_string" type_code="10">Honeybee_ListZonePrograms</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="11">
                    <item name="CodeInput" type_name="gh_string" type_code="10">#
# Honeybee: A Plugin for Environmental Analysis (GPL) started by Mostapha Sadeghipour Roudsari
# 
# This file is part of Honeybee.
# 
# Copyright (c) 2013-2017, Mostapha Sadeghipour Roudsari &lt;mostapha@ladybug.tools&gt; 
# Honeybee is free software; you can redistribute it and/or modify 
# it under the terms of the GNU General Public License as published 
# by the Free Software Foundation; either version 3 of the License, 
# or (at your option) any later version. 
# 
# Honeybee is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of 
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Honeybee; If not, see &lt;http://www.gnu.org/licenses/&gt;.
# 
# @license GPL-3.0+ &lt;http://spdx.org/licenses/GPL-3.0+&gt;


"""
Find list of spaces for each space based on program
-
Provided by Honeybee 0.0.61

    Args:
        _bldgProgram: An index number for 
    Returns:
        bldgProgram:
        zonePrograms: Honeybee zones in case of success
"""

ghenv.Component.Name = "Honeybee_ListZonePrograms"
ghenv.Component.NickName = 'ListZonePrograms'
ghenv.Component.Message = 'VER 0.0.61\nFEB_05_2017'
ghenv.Component.IconDisplayMode = ghenv.Component.IconDisplayMode.application
ghenv.Component.Category = "Honeybee"
ghenv.Component.SubCategory = "05 | Energy | Building Program"
#compatibleHBVersion = VER 0.0.56\nFEB_01_2015
#compatibleLBVersion = VER 0.0.59\nFEB_01_2015
try: ghenv.Component.AdditionalHelpFromDocStrings = "1"
except: pass


import scriptcontext as sc
import Grasshopper.Kernel as gh

path = gh.Data.GH_Path(0)

ghenv.Component.Params.Output[0].Name = "zonePrograms"
ghenv.Component.Params.Output[0].NickName = "zonePrograms"

def main(bldgProgram):
    # check for Honeybee
    if not sc.sticky.has_key('honeybee_release'):
        print "You should first let Honeybee to fly..."
        w = gh.GH_RuntimeMessageLevel.Warning
        ghenv.Component.AddRuntimeMessage(w, "You should first let Honeybee to fly...")
        return -1

    try:
        if not sc.sticky['honeybee_release'].isCompatible(ghenv.Component): return -1
        if sc.sticky['honeybee_release'].isInputMissing(ghenv.Component): return -1
    except:
        warning = "You need a newer version of Honeybee to use this compoent." + \
        " Use updateHoneybee component to update userObjects.\n" + \
        "If you have already updated userObjects drag Honeybee_Honeybee component " + \
        "into canvas and try again."
        w = gh.GH_RuntimeMessageLevel.Warning
        ghenv.Component.AddRuntimeMessage(w, warning)
        return -1
    
    BuildingPrograms = sc.sticky["honeybee_BuildingProgramsLib"]()
    bldgProgramDict = BuildingPrograms.bldgPrograms
    zonesProgramDict = BuildingPrograms.zonePrograms
    
    bldgProgramName = bldgProgramDict[bldgProgram%13]
    zonePrograms = zonesProgramDict[bldgProgramName].values()
    
    return bldgProgramName, zonePrograms


if _bldgProgram!=None:
    results = main(_bldgProgram)
    
    if results!=-1:
        bldgProgram, zonePrograms = results
        
        bldgAndZonP = range(len(zonePrograms))
        for pCount, zoneProgram in enumerate(zonePrograms):
            bldgAndZonP[pCount] = "::".join([bldgProgram , zoneProgram])
            
        ghenv.Component.Params.Output[0].Name = bldgProgram + "ZonePrograms"
        ghenv.Component.Params.Output[0].NickName = bldgProgram + "ZonePrograms"
        
        #for programCount, program in enumerate(zonePrograms):
        #    ghenv.Component.Params.Output[0].AddVolatileData(path, programCount + 1, program)
        
        # not the best solution but the normal solution was missing the first item for some reason
        line  = bldgProgram + "ZonePrograms = bldgAndZonP"
        exec(line)</item>
                    <item name="Description" type_name="gh_string" type_code="10">Find list of spaces for each space based on program
-
Provided by Honeybee 0.0.61</item>
                    <item name="EditorLocation" type_name="gh_drawing_point" type_code="30">
                      <X>-64</X>
                      <Y>219</Y>
                    </item>
                    <item name="EditorSize" type_name="gh_drawing_size" type_code="32">
                      <W>1292</W>
                      <H>812</H>
                    </item>
                    <item name="Hidden" type_name="gh_bool" type_code="1">true</item>
                    <item name="HideInput" type_name="gh_bool" type_code="1">true</item>
                    <item name="HideOutput" type_name="gh_bool" type_code="1">true</item>
                    <item name="IconOverride" type_name="gh_drawing_bitmap" type_code="37">
                      <bitmap length="1285">iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOvAAADrwBlbxySQAABKdJREFUSEvdlXtQVHUUx8/dhV12YV+ArIsuCwsLCBihskiSjLg0LtRAgAQRPXUaIc189PSBwhgxNdnUyKNRgZ1KHSxDQlFmRSVFICKxAqKMHkNDA8hqmhiczu/eJXQ0yz/rzHzm9z33nvs993funXvhfxPZxHtasbhIznFvkq4mKn1FLq9wAO+SrhJz3E4xwAOk84k7jrJ4qQzH/ULwC50/ntTq8VOtH56fYcQWWr/RBWCVlw6p7oPo+MRxs8V6lHQMf+W/jKJnFKorGDgbxw0hiIZQnjFqyGs6fooaUV1Nic12fgAREzIeY/lBQskMbhsSgJfypJoh9A/DoZlBN8GaHPL2ZYa257ZXdn9PDb4jKo53YUJmziAdX8Mb3SZKM+QKRGM4OvQmvEBccjJKsAZf0Ziorjzt+cLRXjI/Moj4Na39xMbdB1DtPW2Izlt5t1tEWZY7NQiMwAkaywQZ/uFnwmv6YF6zxufo2VDd3rzi4mHyxhMOxGOjiG1jiCxvv4y4qbxmYkZg0EmqM/Ou18XL9Lb8QOuIDrhjgeB6hvQo0R8ALof9QfQ5adZgp9YYU63UxvYA+AwDaHt8g60NYnlon8jVNOAbsfScp5+ZjYzVWoi/olDpKR6MS1f+kvyEqtnf7NZnipYOW7JU3UlPKpv0MS79ITHSkRXLfDpTkuXNwQb4McQEI9mpoo74WO5MWCj8FDELfs1IgtYUq7Qj8i531mCdYC1E8aqVWtpsPG02hjA7Yfqf8kk9md+Ldnsoa5ArWFPI5aJ1a9d60ijn4+WRu/HKBQGm7zRnTfbvMbIGTwnuQpRmpmvoZCxeuxSFYxej8PdRYZ3k+vyqQ8hZLYPpyZx57Kow3DSisuxsbzoZR8x1wrY8qefdIo8m5jhhejJfgFVV/Cs91UAuh+XhIVx9QiTXGOQLbcG+8GXqYq42ysg1hM6EzjlB0Er5h0Fe0GwyiLoWLlI2pSS61xklcDpICV1Lol2PJpld6wPc4VSkDvqM3lwL2YYL7kI8S7SDckEdSGY10yvYDTD9NCjm1wCn7wTQnQXO3w6qhfRpkPdRbRIAZwe9Tz1IPToApG0gkjWDYVotgKyHk0gGQXTjR7HcNcyCXjscqC7oQPWGFlRvPIOawrO0thKUb2pDr7LfUJaQz7a/Gix+DujNQ6jLQvj4IYSDxJGHEey5CLZUBI10q2DNwsVtvcScM6gp+RZVLzYRxwVesE9pOq4p7kW5dctVuuIeyI34GZofR9iXPsWeNITGRxBet7CbeJv35oPjCqRz77+oebUXVesb/xbWQHbfanZxGmSaBuAEfVHff/BGDtMuti1iNWW8tzNKJbOt6E0jYKPQbG7nx6Mp7BJGRWNjOTsvW+wcUaLBAV1P01hyEBoINqpaGtNnyxDKkljNW7yzM0pdAsyoyN+PypUfoWLFXvTILSV2oHLVAVQst6HHo+WoXHMI3eJoLKxBgt4Bn5BpEd3ttgSEd5YgVCQjvJGIUBCPoJSWCNZCLCXYr3Efp9Ju5WTq10hXEtUi9fTNnFS+nfQuGuVucPPYQHoeSMUloHVnD5L/vfKGXrItpG1EPZFF/OcD4E+JeOTK9drbdwAAAABJRU5ErkJggg==</bitmap>
                    </item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">404f2227-6a4b-4904-9662-a3d13665acb6</item>
                    <item name="Name" type_name="gh_string" type_code="10">Honeybee_ListZonePrograms</item>
                    <item name="NickName" type_name="gh_string" type_code="10">ListZonePrograms</item>
                  </items>
                  <chunks count="2">
                    <chunk name="Attributes">
                      <items count="2">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>1087</X>
                          <Y>954</Y>
                          <W>278</W>
                          <H>28</H>
                        </item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>1179</X>
                          <Y>968</Y>
                        </item>
                      </items>
                    </chunk>
                    <chunk name="ParameterData">
                      <items count="4">
                        <item name="InputCount" type_name="gh_int32" type_code="3">1</item>
                        <item name="InputId" index="0" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="OutputCount" type_name="gh_int32" type_code="3">1</item>
                        <item name="OutputId" index="0" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                      </items>
                      <chunks count="2">
                        <chunk name="InputParam" index="0">
                          <items count="11">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">An index number for </item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">23e83c11-6d60-40c9-908b-81352aed8449</item>
                            <item name="Name" type_name="gh_string" type_code="10">_bldgProgram</item>
                            <item name="NickName" type_name="gh_string" type_code="10">_bldgProgram</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="Source" index="0" type_name="gh_guid" type_code="9">2c5926ed-f491-4e51-a18c-851290e7e6d5</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">48d01794-d3d8-4aef-990e-127168822244</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>1089</X>
                                  <Y>956</Y>
                                  <W>75</W>
                                  <H>24</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>1128</X>
                                  <Y>968</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="0">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10">Honeybee zones in case of success</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">54c661bd-f415-4c7d-bcb0-ea7b57822844</item>
                            <item name="Name" type_name="gh_string" type_code="10">MidriseApartmentZonePrograms</item>
                            <item name="NickName" type_name="gh_string" type_code="10">MidriseApartmentZonePrograms</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>1194</X>
                                  <Y>956</Y>
                                  <W>169</W>
                                  <H>24</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>1278.5</X>
                                  <Y>968</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                      </chunks>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="43">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">00027467-0d24-4fa7-b178-8dc0ac5f42ec</item>
                <item name="Name" type_name="gh_string" type_code="10">Honeybee_bldgPrograms</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="9">
                    <item name="Description" type_name="gh_string" type_code="10">Provides a list of available building programs from the template</item>
                    <item name="IconOverride" type_name="gh_drawing_bitmap" type_code="37">
                      <bitmap length="683">iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOvAAADrwBlbxySQAAAk1JREFUSEutls+LaWEYxw+JhQ1iyv/AGis1+R2DDAv8BWZFXbe7tCMbi1lY2FhQFkg2FlJTYzPJgiiZBkNJdF3TpIzrPtfz3sa5d0a3meOoT8457+nzfd/nfd9zDrX/cfl8/heBQPBjfwxMUCgUoFKp3qHVakvUXnzlcDh+ttttmEwm/zAejz+ERqOB9XoNm83mwHw+B7Va/YsSCoXTwWAAj4+P8PDwwAjsLUp7vR4ZEf4XCgVyneJwOLunpye4v79nzGvA32U7BOAJNvb7fYjFYoz47wjwwm63g06nA6FQ6N08fAQUYc1R+ko+n8c5+BOw3W6h0WiAz+eD4XD4abBjGPIWpVJJl+jm5gb0ev3RGn8GdKBrNBqRcpEAXGI4pLOzM1ZAV7fbpQOen58hl8uxSqvVogNWqxVkMpmjvWECuprNJh2wXC4hnU6TRtzRp4AOdN3d3dEBi8UCUqkUawHoqtfrdMBsNoNkMslaALpwJR0CptMpXF9fk0Y2QFe1WqUDcDcmEglWqVQqdADuxng8frQ3TEBXuVymA7B2kUgEZDIZmf1TQAe6stksHXB7ewvhcBikUinUarWTQAe6cKIPAaVSCQKBAEgkEigWiyeBDnRFo1E6ANet3+8HkUjECujCUZAAHo/3PRgMgtfrBbPZzApOp5OAbgz4JpfLX2w2G3g8HnC73XB5eQkul4vctP8gALvdDhcXF4D3WK1WsFgsRGQymcBoNILBYCCPaZ1OB+fn5+RFIxaLX9CNJeLuD77uYfzZ8hZ0oZOiKO5vTbZjMjrdMKMAAAAASUVORK5CYII=</bitmap>
                    </item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">2c5926ed-f491-4e51-a18c-851290e7e6d5</item>
                    <item name="ListCount" type_name="gh_int32" type_code="3">13</item>
                    <item name="ListMode" type_name="gh_int32" type_code="3">1</item>
                    <item name="Name" type_name="gh_string" type_code="10">Honeybee_bldgPrograms</item>
                    <item name="NickName" type_name="gh_string" type_code="10">bldgPrograms</item>
                    <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                    <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                  </items>
                  <chunks count="14">
                    <chunk name="ListItem" index="0">
                      <items count="3">
                        <item name="Expression" type_name="gh_string" type_code="10">0</item>
                        <item name="Name" type_name="gh_string" type_code="10">Office</item>
                        <item name="Selected" type_name="gh_bool" type_code="1">false</item>
                      </items>
                    </chunk>
                    <chunk name="ListItem" index="1">
                      <items count="3">
                        <item name="Expression" type_name="gh_string" type_code="10">1</item>
                        <item name="Name" type_name="gh_string" type_code="10">Retail</item>
                        <item name="Selected" type_name="gh_bool" type_code="1">false</item>
                      </items>
                    </chunk>
                    <chunk name="ListItem" index="2">
                      <items count="3">
                        <item name="Expression" type_name="gh_string" type_code="10">2</item>
                        <item name="Name" type_name="gh_string" type_code="10">MidriseApartment</item>
                        <item name="Selected" type_name="gh_bool" type_code="1">true</item>
                      </items>
                    </chunk>
                    <chunk name="ListItem" index="3">
                      <items count="3">
                        <item name="Expression" type_name="gh_string" type_code="10">3</item>
                        <item name="Name" type_name="gh_string" type_code="10">PrimarySchool</item>
                        <item name="Selected" type_name="gh_bool" type_code="1">false</item>
                      </items>
                    </chunk>
                    <chunk name="ListItem" index="4">
                      <items count="3">
                        <item name="Expression" type_name="gh_string" type_code="10">4</item>
                        <item name="Name" type_name="gh_string" type_code="10">SecondarySchool</item>
                        <item name="Selected" type_name="gh_bool" type_code="1">false</item>
                      </items>
                    </chunk>
                    <chunk name="ListItem" index="5">
                      <items count="3">
                        <item name="Expression" type_name="gh_string" type_code="10">5</item>
                        <item name="Name" type_name="gh_string" type_code="10">SmallHotel</item>
                        <item name="Selected" type_name="gh_bool" type_code="1">false</item>
                      </items>
                    </chunk>
                    <chunk name="ListItem" index="6">
                      <items count="3">
                        <item name="Expression" type_name="gh_string" type_code="10">6</item>
                        <item name="Name" type_name="gh_string" type_code="10">LargeHotel</item>
                        <item name="Selected" type_name="gh_bool" type_code="1">false</item>
                      </items>
                    </chunk>
                    <chunk name="ListItem" index="7">
                      <items count="3">
                        <item name="Expression" type_name="gh_string" type_code="10">7</item>
                        <item name="Name" type_name="gh_string" type_code="10">Hospital</item>
                        <item name="Selected" type_name="gh_bool" type_code="1">false</item>
                      </items>
                    </chunk>
                    <chunk name="ListItem" index="8">
                      <items count="3">
                        <item name="Expression" type_name="gh_string" type_code="10">8</item>
                        <item name="Name" type_name="gh_string" type_code="10">Outpatient</item>
                        <item name="Selected" type_name="gh_bool" type_code="1">false</item>
                      </items>
                    </chunk>
                    <chunk name="ListItem" index="9">
                      <items count="3">
                        <item name="Expression" type_name="gh_string" type_code="10">9</item>
                        <item name="Name" type_name="gh_string" type_code="10">Warehouse</item>
                        <item name="Selected" type_name="gh_bool" type_code="1">false</item>
                      </items>
                    </chunk>
                    <chunk name="ListItem" index="10">
                      <items count="3">
                        <item name="Expression" type_name="gh_string" type_code="10">10</item>
                        <item name="Name" type_name="gh_string" type_code="10">SuperMarket</item>
                        <item name="Selected" type_name="gh_bool" type_code="1">false</item>
                      </items>
                    </chunk>
                    <chunk name="ListItem" index="11">
                      <items count="3">
                        <item name="Expression" type_name="gh_string" type_code="10">11</item>
                        <item name="Name" type_name="gh_string" type_code="10">FullServiceRestaurant</item>
                        <item name="Selected" type_name="gh_bool" type_code="1">false</item>
                      </items>
                    </chunk>
                    <chunk name="ListItem" index="12">
                      <items count="3">
                        <item name="Expression" type_name="gh_string" type_code="10">12</item>
                        <item name="Name" type_name="gh_string" type_code="10">QuickServiceRestaurant</item>
                        <item name="Selected" type_name="gh_bool" type_code="1">false</item>
                      </items>
                    </chunk>
                    <chunk name="Attributes">
                      <items count="2">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>827</X>
                          <Y>957</Y>
                          <W>233</W>
                          <H>22</H>
                        </item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>910</X>
                          <Y>957</Y>
                        </item>
                      </items>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="44">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">59daf374-bc21-4a5e-8282-5504fb7ae9ae</item>
                <item name="Name" type_name="gh_string" type_code="10">List Item</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="5">
                    <item name="BaseOutputIndex" type_name="gh_int32" type_code="3">0</item>
                    <item name="Description" type_name="gh_string" type_code="10">Retrieve a specific item from a list.</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">f1d5990d-045e-43aa-a169-d615dd473e79</item>
                    <item name="Name" type_name="gh_string" type_code="10">List Item</item>
                    <item name="NickName" type_name="gh_string" type_code="10">Item</item>
                  </items>
                  <chunks count="2">
                    <chunk name="Attributes">
                      <items count="2">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>1429</X>
                          <Y>952</Y>
                          <W>64</W>
                          <H>64</H>
                        </item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>1463</X>
                          <Y>984</Y>
                        </item>
                      </items>
                    </chunk>
                    <chunk name="ParameterData">
                      <items count="6">
                        <item name="InputCount" type_name="gh_int32" type_code="3">3</item>
                        <item name="InputId" index="0" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                        <item name="InputId" index="1" type_name="gh_guid" type_code="9">2e3ab970-8545-46bb-836c-1c11e5610bce</item>
                        <item name="InputId" index="2" type_name="gh_guid" type_code="9">cb95db89-6165-43b6-9c41-5702bc5bf137</item>
                        <item name="OutputCount" type_name="gh_int32" type_code="3">1</item>
                        <item name="OutputId" index="0" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                      </items>
                      <chunks count="4">
                        <chunk name="InputParam" index="0">
                          <items count="8">
                            <item name="Access" type_name="gh_int32" type_code="3">1</item>
                            <item name="Description" type_name="gh_string" type_code="10">Base list</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">3b8e22d4-4d17-4c91-a743-2e4674ed4150</item>
                            <item name="Name" type_name="gh_string" type_code="10">List</item>
                            <item name="NickName" type_name="gh_string" type_code="10">L</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="Source" index="0" type_name="gh_guid" type_code="9">54c661bd-f415-4c7d-bcb0-ea7b57822844</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>1431</X>
                                  <Y>954</Y>
                                  <W>17</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>1441</X>
                                  <Y>964</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="1">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10">Item index</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">3a28e03d-57ee-49ec-b78f-e8c104ea4b25</item>
                            <item name="Name" type_name="gh_string" type_code="10">Index</item>
                            <item name="NickName" type_name="gh_string" type_code="10">i</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="2">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>1431</X>
                                  <Y>974</Y>
                                  <W>17</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>1441</X>
                                  <Y>984</Y>
                                </item>
                              </items>
                            </chunk>
                            <chunk name="PersistentData">
                              <items count="1">
                                <item name="Count" type_name="gh_int32" type_code="3">1</item>
                              </items>
                              <chunks count="1">
                                <chunk name="Branch" index="0">
                                  <items count="2">
                                    <item name="Count" type_name="gh_int32" type_code="3">1</item>
                                    <item name="Path" type_name="gh_string" type_code="10">{0}</item>
                                  </items>
                                  <chunks count="1">
                                    <chunk name="Item" index="0">
                                      <items count="1">
                                        <item name="number" type_name="gh_int32" type_code="3">0</item>
                                      </items>
                                    </chunk>
                                  </chunks>
                                </chunk>
                              </chunks>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="2">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10">Wrap index to list bounds</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">0bcccba7-1e07-424f-8b26-dfab8cbe9e05</item>
                            <item name="Name" type_name="gh_string" type_code="10">Wrap</item>
                            <item name="NickName" type_name="gh_string" type_code="10">W</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="2">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>1431</X>
                                  <Y>994</Y>
                                  <W>17</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>1441</X>
                                  <Y>1004</Y>
                                </item>
                              </items>
                            </chunk>
                            <chunk name="PersistentData">
                              <items count="1">
                                <item name="Count" type_name="gh_int32" type_code="3">1</item>
                              </items>
                              <chunks count="1">
                                <chunk name="Branch" index="0">
                                  <items count="2">
                                    <item name="Count" type_name="gh_int32" type_code="3">1</item>
                                    <item name="Path" type_name="gh_string" type_code="10">{0}</item>
                                  </items>
                                  <chunks count="1">
                                    <chunk name="Item" index="0">
                                      <items count="1">
                                        <item name="boolean" type_name="gh_bool" type_code="1">true</item>
                                      </items>
                                    </chunk>
                                  </chunks>
                                </chunk>
                              </chunks>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="0">
                          <items count="7">
                            <item name="Description" type_name="gh_string" type_code="10">Item at {i'}</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">ac50dba3-51cd-4ad6-9d4c-e55aabc9107f</item>
                            <item name="Mutable" type_name="gh_bool" type_code="1">false</item>
                            <item name="Name" type_name="gh_string" type_code="10">Item</item>
                            <item name="NickName" type_name="gh_string" type_code="10">i</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>1478</X>
                                  <Y>954</Y>
                                  <W>13</W>
                                  <H>60</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>1484.5</X>
                                  <Y>984</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                      </chunks>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="45">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">06953bda-1d37-4d58-9b38-4b3c74e54c8f</item>
                <item name="Name" type_name="gh_string" type_code="10">File Path</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="8">
                    <item name="Description" type_name="gh_string" type_code="10">Contains a collection of file paths</item>
                    <item name="ExpireOnFileEvent" type_name="gh_bool" type_code="1">false</item>
                    <item name="FileFilter" type_name="gh_string" type_code="10">All files|*.*</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">e78b871f-3584-48c5-8630-75519e5a840d</item>
                    <item name="Name" type_name="gh_string" type_code="10">File Path</item>
                    <item name="NickName" type_name="gh_string" type_code="10">Path</item>
                    <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                    <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                  </items>
                  <chunks count="2">
                    <chunk name="Attributes">
                      <items count="2">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>2954</X>
                          <Y>957</Y>
                          <W>50</W>
                          <H>24</H>
                        </item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>2979.767</X>
                          <Y>969.6705</Y>
                        </item>
                      </items>
                    </chunk>
                    <chunk name="PersistentData">
                      <items count="1">
                        <item name="Count" type_name="gh_int32" type_code="3">1</item>
                      </items>
                      <chunks count="1">
                        <chunk name="Branch" index="0">
                          <items count="2">
                            <item name="Count" type_name="gh_int32" type_code="3">1</item>
                            <item name="Path" type_name="gh_string" type_code="10">{0}</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Item" index="0">
                              <items count="2">
                                <item name="null_string" type_name="gh_bool" type_code="1">false</item>
                                <item name="string" type_name="gh_string" type_code="10">C:\Users\naman\Desktop\USA_PA_Philadelphia.Intl.AP.724080_TMY3.epw</item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                      </chunks>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="46">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">2e78987b-9dfb-42a2-8b76-3923ac8bd91a</item>
                <item name="Name" type_name="gh_string" type_code="10">Boolean Toggle</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="7">
                    <item name="Description" type_name="gh_string" type_code="10">Boolean (true/false) toggle</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">072bc692-1834-4f14-821b-7b5b11a19474</item>
                    <item name="Name" type_name="gh_string" type_code="10">Boolean Toggle</item>
                    <item name="NickName" type_name="gh_string" type_code="10">Toggle</item>
                    <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                    <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                    <item name="ToggleValue" type_name="gh_bool" type_code="1">false</item>
                  </items>
                  <chunks count="1">
                    <chunk name="Attributes">
                      <items count="1">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>1872</X>
                          <Y>1045</Y>
                          <W>104</W>
                          <H>22</H>
                        </item>
                      </items>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="47">
              <items count="3">
                <item name="GUID" type_name="gh_guid" type_code="9">410755b1-224a-4c1e-a407-bf32fb45ea7e</item>
                <item name="Lib" type_name="gh_guid" type_code="9">16cf80bc-9018-cbdb-2238-976eb17fd30d</item>
                <item name="Name" type_name="gh_string" type_code="10">Ladybug_Import epw</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="11">
                    <item name="CodeInput" type_name="gh_string" type_code="10"># import .epw file data
#
# Ladybug: A Plugin for Environmental Analysis (GPL) started by Mostapha Sadeghipour Roudsari
# 
# This file is part of Ladybug.
# 
# Copyright (c) 2013-2017, Mostapha Sadeghipour Roudsari &lt;mostapha@ladybug.tools&gt; 
# Ladybug is free software; you can redistribute it and/or modify 
# it under the terms of the GNU General Public License as published 
# by the Free Software Foundation; either version 3 of the License, 
# or (at your option) any later version. 
# 
# Ladybug is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of 
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ladybug; If not, see &lt;http://www.gnu.org/licenses/&gt;.
# 
# @license GPL-3.0+ &lt;http://spdx.org/licenses/GPL-3.0+&gt;


"""
Use this component to import lists of weather data into Grasshopper from a standard .epw file.
For detailed information about the structure of an epw file, you may want to read the
"Weather Converter Program" section in "Auxiliary EnergyPlus Programs" document.
All descriptions of importaed data are borrowed from this document.
The document is available online at this address:
http://bigladdersoftware.com/epx/docs/8-3/auxiliary-programs/energyplus-weather-file-epw-data-dictionary.html
-
Provided by Ladybug 0.0.65
    
    Args:
        _epwFile: An .epw file path on your system as a string.
        
    Returns:
        readMe!: ...
        latitude: The latitude of the weather file location.
        location: A list of text summarizing the location data in the weather file (use this to construct the sun path).
        dryBulbTemperature: "This is the houlry dry bulb temperature, in C. Note that this is a full numeric field (i.e. 23.6) and not an integer representation with tenths. Valid values range from 70 C to 70 C. Missing value for this field is 99.9."
        dewPointTemperature: "This is the hourly dew point temperature, in C. Note that this is a full numeric field (i.e. 23.6) and not an integer representation with tenths. Valid values range from 70 C to 70 C. Missing value for this field is 99.9."
        relativeHumidity: "This is the hourly Relative Humidity in percent. Valid values range from 0% to 110%. Missing value for this field is 999."
        windSpeed: "This is the hourly wind speed in m/sec. Values can range from 0 to 40. Missing value is 999."
        windDirection: "This is the hourly Wind Direction in degrees where the convention is that North=0.0, East=90.0, South=180.0, West=270.0. (If wind is calm for the given hour, the direction equals zero.) Values can range from 0 to 360. Missing value is 999."
        directNormalRadiation: "This is the hourly Direct Normal Radiation in Wh/m2. (Amount of solar radiation in Wh/m2 received directly from the solar disk on a surface perpendicular to the sun's rays, during the number of minutes preceding the time indicated.) If the field is missing ( 9999) or invalid (&lt;0), it is set to 0. Counts of such missing values are totaled and presented at the end of the runperiod."
        diffuseHorizontalRadiation: "This is the hourly Diffuse Horizontal Radiation in Wh/m2. (Amount of solar radiation in Wh/m2 received from the sky (excluding the solar disk) on a horizontal surface during the number of minutes preceding the time indicated.) If the field is missing ( 9999) or invalid (&lt;0), it is set to 0. Counts of such missing values are totaled and presented at the end of the runperiod."
        globalHorizontalRadiation: "This is the hourly Global Horizontal Radiation in Wh/m2. (Total amount of direct and diffuse solar radiation in Wh/m2 received on a horizontal surface during the number of minutes preceding the time indicated.) It is not currently used in EnergyPlus calculations. It should have a minimum value of 0; missing value for this field is 9999."
        directNormalIlluminance: "This is the hourly Direct Normal Illuminance in lux. (Average amount of illuminance in hundreds of lux received directly from the solar disk on a surface perpendicular to the sun's rays, during the number of minutes preceding the time indicated.) It is not currently used in EnergyPlus calculations. It should have a minimum value of 0; missing value for this field is 999999 and will be considered missing of &gt;= 999900."
        diffuseHorizontalIlluminance: "This is the hourly Diffuse Horizontal Illuminance in lux. (Average amount of illuminance in hundreds of lux received from the sky (excluding the solar disk) on a horizontal surface during the number of minutes preceding the time indicated.) It is not currently used in EnergyPlus calculations. It should have a minimum value of 0; missing value for this field is 999999 and will be considered missing of &gt;= 999900."
        globalHorizontalIlluminance: "This is the hourly Global Horizontal Illuminance in lux. (Average total amount of direct and diffuse illuminance in hundreds of lux received on a horizontal surface during the number of minutes preceding the time indicated.) It is not currently used in EnergyPlus calculations. It should have a minimum value of 0; missing value for this field is 999999 and will be considered missing of &gt;= 999900."
        totalSkyCover: "This is the fraction for total sky cover (tenths of coverage). (i.e. 1 is 1/10 covered. 10 is total coverage). (Amount of sky dome in tenths covered by clouds or obscuring phenomena at the hour indicated at the time indicated.) Minimum value is 0; maximum value is 10; missing value is 99."
        liquidPrecipitationDepth: "The amount of liquid precipitation(mm) observed at the indicated hour for the period indicated in the liquid precipitation quantity field. If this value is not missing, then it is used and overrides the precipitation flag as rainfall.  Conversely, if the precipitation flag shows rain and this field is missing or zero, it is set to 1.5 (mm)."
        barometricPressure: "This is the hourly weather station pressure in Pa. Valid values range from 31,000 to 120,000... Missing value for this field is 999999."
        modelYear: The year from which the hourly data has been extracted. EPW files are synthesized from real recorded data from different years in a given climate. This is done to ensure that, for each month, the selected data is statistically representative of the average monthly conditions over the 18+ years of recording the data. Different EPW files will be synthesized from different years depeding on whether they are TMY (Typical Meteorological Year), TMY2, TMY3, AMY (Actual Meteorological Year) or other.
"""
ghenv.Component.Name = "Ladybug_Import epw"
ghenv.Component.NickName = 'importEPW'
ghenv.Component.Message = 'VER 0.0.65\nJUL_28_2017'
ghenv.Component.IconDisplayMode = ghenv.Component.IconDisplayMode.application
ghenv.Component.Category = "Ladybug"
ghenv.Component.SubCategory = "0 | Ladybug"
#compatibleLBVersion = VER 0.0.59\nJUN_07_2015
try: ghenv.Component.AdditionalHelpFromDocStrings = "2"
except: pass


import scriptcontext as sc
import os
from clr import AddReference
AddReference('Grasshopper')
import Grasshopper.Kernel as gh

def main(_epw_file):
    # import the classes
    if sc.sticky.has_key('ladybug_release'):
        try:
            if not sc.sticky['ladybug_release'].isCompatible(ghenv.Component): return -1
            if sc.sticky['ladybug_release'].isInputMissing(ghenv.Component): return -1
        except:
            warning = "You need a newer version of Ladybug to use this compoent." + \
            "Use updateLadybug component to update userObjects.\n" + \
            "If you have already updated userObjects drag Ladybug_Ladybug component " + \
            "into canvas and try again."
            w = gh.GH_RuntimeMessageLevel.Warning
            ghenv.Component.AddRuntimeMessage(w, warning)
            return -1
        lb_preparation = sc.sticky["ladybug_Preparation"]()
        
        if not os.path.isfile(_epw_file):
            warningM = "Failed to find the file: " + str(_epw_file)
            print warningM
            w = gh.GH_RuntimeMessageLevel.Warning
            ghenv.Component.AddRuntimeMessage(w, warningM)
            return -1
        
        locationData = lb_preparation.epwLocation(_epw_file)
        weatherData = lb_preparation.epwDataReader(_epw_file, locationData[0])
        
        return locationData, weatherData
    
    else:
        warningM = "First please let the Ladybug fly..."
        print warningM
        w = gh.GH_RuntimeMessageLevel.Warning
        ghenv.Component.AddRuntimeMessage(w, warningM)
        return -1
    

result = main(_epwFile)
if result!= -1:
    location, locName, latitude = result[0][-1], result[0][0], result[0][1]
    dryBulbTemperature, dewPointTemperature, relativeHumidity, windSpeed, windDirection, directNormalRadiation, diffuseHorizontalRadiation, globalHorizontalRadiation, directNormalIlluminance, diffuseHorizontalIlluminance, globalHorizontalIlluminance, totalSkyCover, horizontalInfraredRadiation, barometricPressure, modelYear = result[1][:]
    print 'Hourly weather data for ' + locName + ' is imported successfully!'
</item>
                    <item name="Description" type_name="gh_string" type_code="10">Use this component to import lists of weather data into Grasshopper from a standard .epw file.
For detailed information about the structure of an epw file, you may want to read the
"Weather Converter Program" section in "Auxiliary EnergyPlus Programs" document.
All descriptions of importaed data are borrowed from this document.
The document is available online at this address:
http://bigladdersoftware.com/epx/docs/8-3/auxiliary-programs/energyplus-weather-file-epw-data-dictionary.html
-
Provided by Ladybug 0.0.65</item>
                    <item name="EditorLocation" type_name="gh_drawing_point" type_code="30">
                      <X>151</X>
                      <Y>58</Y>
                    </item>
                    <item name="EditorSize" type_name="gh_drawing_size" type_code="32">
                      <W>1328</W>
                      <H>989</H>
                    </item>
                    <item name="Hidden" type_name="gh_bool" type_code="1">true</item>
                    <item name="HideInput" type_name="gh_bool" type_code="1">true</item>
                    <item name="HideOutput" type_name="gh_bool" type_code="1">false</item>
                    <item name="IconOverride" type_name="gh_drawing_bitmap" type_code="37">
                      <bitmap length="1242">iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOwgAADsIBFShKgAAABHxJREFUSEvtlVtMXFUUho+Jb5WWy1zODMPMnLm0+qqJ+mL0wZD4oDEmGivQKdDYmKa2QGC4TOUilI44UG6GO0I7mNpyE8oALQGEkJRYo7Y1xgdjYypRhNpKubQ2v/+azCQTA+mziZN82evsvc76915r7TPK/79H/paWlgz+QF2Zv7q6pq+9Pa+opKS58sSJpuqysvpQd/f75bR9pNDna7rQ1XWsqrIqUMxnb1FJc29Li7extvZDL98RGuvqKnpaWwtzvd7mxuYW7/LycpxyNDf3TPET8ZhNMOJKkgln4w0oidejirTqTPAn6DHOuZE9Bq6bEYo34gvaQ2Q+0YSpBBXDtIfpM7UrEXNxOozz+diuPaipr/9AKc/JOXvDaMUDiwvryS6spbhxXHPCZLPDYbXDZbfjE7sTsLixxvV74hfhL7IWfVY1bLyUivVnXwBMGkYTVRzPL+hW/F5vxzXViq2I86ZAkRyKWChiJyaKBChyn/O3ub4S4U+yQURoJdGMB4tfYfNMEHfjDFgwpqCvvTNPSUtLu5SqmvGOVcPbEdLJWzYNLgZ3Eo2oURGeRETukl9TXBizufCtlZtLSsbf313H1uf9uLfbgDGdGVIv5WB6+oReNcHMILHI7iV4FBGJnkR2LcFftzug59w+u4YxfTIwOIyNwGmsx5swwHoWFJW0KocPHR60UCA22E6ISAIDXuSuLxEdbZnXkWyKbWlPYdW2DxusVT8F8gqL2pXCgoJO1ajCRqdYJPf/FjCQLM2BP7j7b6xuODUNes7tJqfsLmyZHVhJdoZrOWuwoKOpyaccyMiYfJIneIZOT0cQ+/mYGggSKJvBb7PQ0e4Z5ikymLKT5DeKStGl+NJpU3oL5F4oWR7P+EV20S1O/kR+Jst0ruCOrEyBY5vg0S6S9txk0aXzosEFqZGkiBeuTXk3K2tsgQLiFN4Zg8hxJdcSWMbtgkdZ3WZOBKTI+d7iNqWrsrL2Oi+avHyf3GSgWqsTzSmOMK207/BEcmwh9h7shPhNsqsCfn+1cigzMzTHE4jAOHN6jT19kwX80u7GtM2N3yk4z3GZ4zTnblHsUSJSn3leNPlWhWuwSIHTTMt+914ccLlR53Aj2+nGp5zzOVzIdLqQxzGda7/EFHMnojUIt6mHN/kKBWo0Vzj4UdKv7cURBmzQ3OilSDHXnnM6UcpRvlnbBY1FBAYp4C32tShtFRX1NyiwwhSMMD0zZICp8HDXs0yNpO4Hpux72j9yvBMTaCeku0b4qSgtLW9QjmRnj15lvsDbBzO/mhy/ZhqCKU6s8tI8pPNDWSNykTZl5Jw0xDr95VlsYYP+6wS0r/KiBdva8pWTrPTBRD16VAsuWDSc0hnRoFPRaTBjlCI1tAN6NTyOsKMaOP8xbT/9xL+D78naR6TXbMVnyTbUJhmwn+udweB7CoDHRyYnXxsIjb45PTf3cte5c56e8+c9waGhtIXFxRfFjiLPMi+2+In/cCj0htjC2OXLr07MzLzS0tfnmZifT2XsxyJ/nP/Zn6L8Az9lg5n1R9KhAAAAAElFTkSuQmCC</bitmap>
                    </item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">00e97b9c-f124-4892-8def-1055c9b13157</item>
                    <item name="Name" type_name="gh_string" type_code="10">Ladybug_Import epw</item>
                    <item name="NickName" type_name="gh_string" type_code="10">importEPW</item>
                  </items>
                  <chunks count="2">
                    <chunk name="Attributes">
                      <items count="2">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>3539</X>
                          <Y>519</Y>
                          <W>230</W>
                          <H>364</H>
                        </item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>3604</X>
                          <Y>701</Y>
                        </item>
                      </items>
                    </chunk>
                    <chunk name="ParameterData">
                      <items count="21">
                        <item name="InputCount" type_name="gh_int32" type_code="3">1</item>
                        <item name="InputId" index="0" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="OutputCount" type_name="gh_int32" type_code="3">18</item>
                        <item name="OutputId" index="0" type_name="gh_guid" type_code="9">3ede854e-c753-40eb-84cb-b48008f14fd4</item>
                        <item name="OutputId" index="1" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                        <item name="OutputId" index="2" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                        <item name="OutputId" index="3" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                        <item name="OutputId" index="4" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                        <item name="OutputId" index="5" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                        <item name="OutputId" index="6" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                        <item name="OutputId" index="7" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                        <item name="OutputId" index="8" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                        <item name="OutputId" index="9" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                        <item name="OutputId" index="10" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                        <item name="OutputId" index="11" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                        <item name="OutputId" index="12" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                        <item name="OutputId" index="13" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                        <item name="OutputId" index="14" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                        <item name="OutputId" index="15" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                        <item name="OutputId" index="16" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                        <item name="OutputId" index="17" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                      </items>
                      <chunks count="19">
                        <chunk name="InputParam" index="0">
                          <items count="11">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">An .epw file path on your system as a string.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">8fa754b2-377b-40e0-a652-7b6352da5448</item>
                            <item name="Name" type_name="gh_string" type_code="10">_epwFile</item>
                            <item name="NickName" type_name="gh_string" type_code="10">_epwFile</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="Source" index="0" type_name="gh_guid" type_code="9">e78b871f-3584-48c5-8630-75519e5a840d</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">37261734-eec7-4f50-b6a8-b8d1f3c4396b</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>3541</X>
                                  <Y>521</Y>
                                  <W>48</W>
                                  <H>360</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>3566.5</X>
                                  <Y>701</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="0">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10">...</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">6c413ed4-e660-4df8-af5a-56322abf395f</item>
                            <item name="Name" type_name="gh_string" type_code="10">Output</item>
                            <item name="NickName" type_name="gh_string" type_code="10">readMe!</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>3619</X>
                                  <Y>521</Y>
                                  <W>148</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>3693</X>
                                  <Y>531</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="1">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10">The latitude of the weather file location.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">98655d8b-8c75-4d1d-80f4-d74e575ee6f7</item>
                            <item name="Name" type_name="gh_string" type_code="10">latitude</item>
                            <item name="NickName" type_name="gh_string" type_code="10">latitude</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>3619</X>
                                  <Y>541</Y>
                                  <W>148</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>3693</X>
                                  <Y>551</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="2">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10">A list of text summarizing the location data in the weather file (use this to construct the sun path).</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">08888c70-ab17-4f71-92f9-1bdd5ca1eae7</item>
                            <item name="Name" type_name="gh_string" type_code="10">location</item>
                            <item name="NickName" type_name="gh_string" type_code="10">location</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>3619</X>
                                  <Y>561</Y>
                                  <W>148</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>3693</X>
                                  <Y>571</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="3">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10">"This is the houlry dry bulb temperature, in C. Note that this is a full numeric field (i.e. 23.6) and not an integer representation with tenths. Valid values range from 70 C to 70 C. Missing value for this field is 99.9."</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">3a8fcb76-7e1a-44af-9c29-a50ed245da54</item>
                            <item name="Name" type_name="gh_string" type_code="10">dryBulbTemperature</item>
                            <item name="NickName" type_name="gh_string" type_code="10">dryBulbTemperature</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>3619</X>
                                  <Y>581</Y>
                                  <W>148</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>3693</X>
                                  <Y>591</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="4">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10">"This is the hourly dew point temperature, in C. Note that this is a full numeric field (i.e. 23.6) and not an integer representation with tenths. Valid values range from 70 C to 70 C. Missing value for this field is 99.9."</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">d0eea57e-50d2-499b-ab36-616a97598ce2</item>
                            <item name="Name" type_name="gh_string" type_code="10">dewPointTemperature</item>
                            <item name="NickName" type_name="gh_string" type_code="10">dewPointTemperature</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>3619</X>
                                  <Y>601</Y>
                                  <W>148</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>3693</X>
                                  <Y>611</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="5">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10">"This is the hourly Relative Humidity in percent. Valid values range from 0% to 110%. Missing value for this field is 999."</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">c22c3b42-1706-424b-8e33-2aa83ee46d3b</item>
                            <item name="Name" type_name="gh_string" type_code="10">relativeHumidity</item>
                            <item name="NickName" type_name="gh_string" type_code="10">relativeHumidity</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>3619</X>
                                  <Y>621</Y>
                                  <W>148</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>3693</X>
                                  <Y>631</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="6">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10">"This is the hourly wind speed in m/sec. Values can range from 0 to 40. Missing value is 999."</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">b4111c4f-c3fd-447d-b76b-4a3d674afefc</item>
                            <item name="Name" type_name="gh_string" type_code="10">windSpeed</item>
                            <item name="NickName" type_name="gh_string" type_code="10">windSpeed</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>3619</X>
                                  <Y>641</Y>
                                  <W>148</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>3693</X>
                                  <Y>651</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="7">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10">"This is the hourly Wind Direction in degrees where the convention is that North=0.0, East=90.0, South=180.0, West=270.0. (If wind is calm for the given hour, the direction equals zero.) Values can range from 0 to 360. Missing value is 999."</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">1b6aa772-2490-44c1-8fe6-d1bce1d0a012</item>
                            <item name="Name" type_name="gh_string" type_code="10">windDirection</item>
                            <item name="NickName" type_name="gh_string" type_code="10">windDirection</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>3619</X>
                                  <Y>661</Y>
                                  <W>148</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>3693</X>
                                  <Y>671</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="8">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10">"This is the hourly Direct Normal Radiation in Wh/m2. (Amount of solar radiation in Wh/m2 received directly from the solar disk on a surface perpendicular to the sun's rays, during the number of minutes preceding the time indicated.) If the field is missing ( 9999) or invalid (&lt;0), it is set to 0. Counts of such missing values are totaled and presented at the end of the runperiod."</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">accaa468-637e-4674-af20-267acd719f92</item>
                            <item name="Name" type_name="gh_string" type_code="10">directNormalRadiation</item>
                            <item name="NickName" type_name="gh_string" type_code="10">directNormalRadiation</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>3619</X>
                                  <Y>681</Y>
                                  <W>148</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>3693</X>
                                  <Y>691</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="9">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10">"This is the hourly Diffuse Horizontal Radiation in Wh/m2. (Amount of solar radiation in Wh/m2 received from the sky (excluding the solar disk) on a horizontal surface during the number of minutes preceding the time indicated.) If the field is missing ( 9999) or invalid (&lt;0), it is set to 0. Counts of such missing values are totaled and presented at the end of the runperiod."</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">b5661164-58aa-403d-85cb-f992903a7994</item>
                            <item name="Name" type_name="gh_string" type_code="10">diffuseHorizontalRadiation</item>
                            <item name="NickName" type_name="gh_string" type_code="10">diffuseHorizontalRadiation</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>3619</X>
                                  <Y>701</Y>
                                  <W>148</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>3693</X>
                                  <Y>711</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="10">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10">"This is the hourly Global Horizontal Radiation in Wh/m2. (Total amount of direct and diffuse solar radiation in Wh/m2 received on a horizontal surface during the number of minutes preceding the time indicated.) It is not currently used in EnergyPlus calculations. It should have a minimum value of 0; missing value for this field is 9999."</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">a9ca58eb-c889-4412-8c75-5da03582b31a</item>
                            <item name="Name" type_name="gh_string" type_code="10">globalHorizontalRadiation</item>
                            <item name="NickName" type_name="gh_string" type_code="10">globalHorizontalRadiation</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>3619</X>
                                  <Y>721</Y>
                                  <W>148</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>3693</X>
                                  <Y>731</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="11">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10">Script variable importEPW</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">d9f6ebf4-dd67-4349-a461-93059306ae82</item>
                            <item name="Name" type_name="gh_string" type_code="10">horizontalInfraredRadiation</item>
                            <item name="NickName" type_name="gh_string" type_code="10">horizontalInfraredRadiation</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>3619</X>
                                  <Y>741</Y>
                                  <W>148</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>3693</X>
                                  <Y>751</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="12">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10">"This is the hourly Direct Normal Illuminance in lux. (Average amount of illuminance in hundreds of lux received directly from the solar disk on a surface perpendicular to the sun's rays, during the number of minutes preceding the time indicated.) It is not currently used in EnergyPlus calculations. It should have a minimum value of 0; missing value for this field is 999999 and will be considered missing of &gt;= 999900."</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">609382d5-a9cf-46d2-8de7-16ee451f4ebf</item>
                            <item name="Name" type_name="gh_string" type_code="10">directNormalIlluminance</item>
                            <item name="NickName" type_name="gh_string" type_code="10">directNormalIlluminance</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>3619</X>
                                  <Y>761</Y>
                                  <W>148</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>3693</X>
                                  <Y>771</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="13">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10">"This is the hourly Diffuse Horizontal Illuminance in lux. (Average amount of illuminance in hundreds of lux received from the sky (excluding the solar disk) on a horizontal surface during the number of minutes preceding the time indicated.) It is not currently used in EnergyPlus calculations. It should have a minimum value of 0; missing value for this field is 999999 and will be considered missing of &gt;= 999900."</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">98a61db6-7511-4899-bca9-546cca325fd6</item>
                            <item name="Name" type_name="gh_string" type_code="10">diffuseHorizontalIlluminance</item>
                            <item name="NickName" type_name="gh_string" type_code="10">diffuseHorizontalIlluminance</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>3619</X>
                                  <Y>781</Y>
                                  <W>148</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>3693</X>
                                  <Y>791</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="14">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10">"This is the hourly Global Horizontal Illuminance in lux. (Average total amount of direct and diffuse illuminance in hundreds of lux received on a horizontal surface during the number of minutes preceding the time indicated.) It is not currently used in EnergyPlus calculations. It should have a minimum value of 0; missing value for this field is 999999 and will be considered missing of &gt;= 999900."</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">c7873586-1bfc-4a5f-8502-297511df0bc6</item>
                            <item name="Name" type_name="gh_string" type_code="10">globalHorizontalIlluminance</item>
                            <item name="NickName" type_name="gh_string" type_code="10">globalHorizontalIlluminance</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>3619</X>
                                  <Y>801</Y>
                                  <W>148</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>3693</X>
                                  <Y>811</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="15">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10">"This is the fraction for total sky cover (tenths of coverage). (i.e. 1 is 1/10 covered. 10 is total coverage). (Amount of sky dome in tenths covered by clouds or obscuring phenomena at the hour indicated at the time indicated.) Minimum value is 0; maximum value is 10; missing value is 99."</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">5e469166-53b1-4258-ba4a-7c8bbc9ac9f3</item>
                            <item name="Name" type_name="gh_string" type_code="10">totalSkyCover</item>
                            <item name="NickName" type_name="gh_string" type_code="10">totalSkyCover</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>3619</X>
                                  <Y>821</Y>
                                  <W>148</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>3693</X>
                                  <Y>831</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="16">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10">"This is the hourly weather station pressure in Pa. Valid values range from 31,000 to 120,000... Missing value for this field is 999999."</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">dfe53bd0-d311-455a-878b-4b1a634c4623</item>
                            <item name="Name" type_name="gh_string" type_code="10">barometricPressure</item>
                            <item name="NickName" type_name="gh_string" type_code="10">barometricPressure</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>3619</X>
                                  <Y>841</Y>
                                  <W>148</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>3693</X>
                                  <Y>851</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="17">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10">The year from which the hourly data has been extracted. EPW files are synthesized from real recorded data from different years in a given climate. This is done to ensure that, for each month, the selected data is statistically representative of the average monthly conditions over the 18+ years of recording the data. Different EPW files will be synthesized from different years depeding on whether they are TMY (Typical Meteorological Year), TMY2, TMY3, AMY (Actual Meteorological Year) or other.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">21eb3093-9e51-438e-b41d-af65e3ca8ca0</item>
                            <item name="Name" type_name="gh_string" type_code="10">modelYear</item>
                            <item name="NickName" type_name="gh_string" type_code="10">modelYear</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>3619</X>
                                  <Y>861</Y>
                                  <W>148</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>3693</X>
                                  <Y>871</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                      </chunks>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="48">
              <items count="3">
                <item name="GUID" type_name="gh_guid" type_code="9">410755b1-224a-4c1e-a407-bf32fb45ea7e</item>
                <item name="Lib" type_name="gh_guid" type_code="9">16cf80bc-9018-cbdb-2238-976eb17fd30d</item>
                <item name="Name" type_name="gh_string" type_code="10">Ladybug_3D Chart</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="10">
                    <item name="CodeInput" type_name="gh_string" type_code="10"># This component creates a 3D chart of hourly or daily data.
#
# Ladybug: A Plugin for Environmental Analysis (GPL) started by Mostapha Sadeghipour Roudsari
# 
# This file is part of Ladybug.
# 
# Copyright (c) 2013-2017, Chris Mackey &lt;Chris@MackeyArchitecture.com&gt;, Mostapha Sadeghipour Roudsari &lt;mostapha@ladybug.tools&gt;, and Antonello Di Nunzio &lt;antonellodinunzio@gmail.com&gt; 
# Ladybug is free software; you can redistribute it and/or modify 
# it under the terms of the GNU General Public License as published 
# by the Free Software Foundation; either version 3 of the License, 
# or (at your option) any later version. 
# 
# Ladybug is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of 
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ladybug; If not, see &lt;http://www.gnu.org/licenses/&gt;.
# 
# @license GPL-3.0+ &lt;http://spdx.org/licenses/GPL-3.0+&gt;


"""
Use this component to make a 3D chart in the Rhino scene of any climate data or hourly simulation data.
-
Provided by Ladybug 0.0.65
    
    Args:
        _inputData: A list of input data to plot.
        _xScale_: The scale of the X axis of the graph. The default will plot the X axis with a length of 3650 Rhino model units (for 365 days of the year). Connect a list of values for multiple graphs.
        _yScale_: The scale of the Y axis of the graph. The default will plot the Y axis with a length of 240 Rhino model units (for 24 hours of the day). Connect a list of values for multiple graphs.
        _zScale_: The scale of the Z axis of the graph. The default will plot the Z axis with a number of Rhino model units corresponding to the input data values.  Set to 0 to see graphCurves appear on top of the mesh.  Connect a list of values for multiple graphs.
        _yCount_: The number of segments on your y-axis.  The default is set to 24 for 24 hours of the day. This variable is particularly useful for input data that is not for each hour of the year.
        legendPar_: Optional legend parameters from the Ladybug Legend Parameters component.
        _basePoint_: An optional point with which to locate the 3D chart in the Rhino Model.  The default is set to the Rhino origin at (0,0,0).
        condStatement_ : An optional conditional statement, which will remove data from the chart that does not fit the conditions. The input must be a valid python conditional statement (e.g. a &gt; 25).
        bakeIt_ : An integer that tells the component if/how to bake the bojects in the Rhino scene.  The default is set to 0.  Choose from the following options:
            0 (or False) - No geometry will be baked into the Rhino scene (this is the default).
            1 (or True) - The geometry will be baked into the Rhino scene as a colored hatch and Rhino text objects, which facilitates easy export to PDF or vector-editing programs. 
            2 - The geometry will be baked into the Rhino scene as colored meshes, which is useful for recording the results of paramteric runs as light Rhino geometry.
    Returns:
        readMe!: ...
        graphMesh: A 3D plot of the input data as a colored mesh.  Multiple meshes will be output for several input data streams or graph scales.
        graphCurves: A list of curves and text surfaces representing the time periods corresponding to the input data.  Note that if the time period of the input data is not clear, no curves or labels will be generated here.
        legend: A legend of the chart. Connect this output to a grasshopper "Geo" component in order to preview the legend in the Rhino scene.g
        legendBasePts: The legend base point, which can be used to move the legend in relation to the chart with the native rasshopper "Move" component.
        title: The title text of the chart.  Hook this up to a native Grasshopper 'Geo' component to preview it separately from the other outputs.
        titleBasePt: Point for the placement of the title, which can be used to move the title in relation to the chart with the native Grasshopper "Move" component.
        dataPts: Points representing the location of each piece of data on the chart.  Use this to label the points of the chart with text lables using a native grasshopper "Text Tag" component.
        conditionalHOY: The input data for the hours of the year that pass the conditional statement.
"""

ghenv.Component.Name = "Ladybug_3D Chart"
ghenv.Component.NickName = '3DChart'
ghenv.Component.Message = 'VER 0.0.65\nJUL_28_2017'
ghenv.Component.IconDisplayMode = ghenv.Component.IconDisplayMode.application
ghenv.Component.Category = "Ladybug"
ghenv.Component.SubCategory = "2 | VisualizeWeatherData"
#compatibleLBVersion = VER 0.0.59\nJAN_24_2016
try: ghenv.Component.AdditionalHelpFromDocStrings = "1"
except: pass


import scriptcontext as sc
import Rhino as rc
import System
from math import pi as PI

from clr import AddReference
AddReference('Grasshopper')
import Grasshopper.Kernel as gh
from Grasshopper import DataTree
from Grasshopper.Kernel.Data import GH_Path
import math
from collections import deque

def checkConditionalStatement(annualHourlyData, conditionalStatement):
        lb_preparation = sc.sticky["ladybug_Preparation"]()
        indexList, listInfo = lb_preparation.separateList(annualHourlyData, lb_preparation.strToBeFound)
        
        letters = [chr(i) for i in xrange(ord('a'), ord('z')+1)]
        # remove 'and' and 'or' from conditional statements
        csCleaned = conditionalStatement.Replace('and', '')
        csCleaned = csCleaned.Replace('or', '')
        
        # find the number of the lists that have assigned conditional statements
        listNum = []
        for count, let in enumerate(letters):
            if csCleaned.find(let)!= -1: listNum.append(count)
        
        # check if all the conditions are actually applicable
        for num in listNum:
            if num&gt;len(listInfo) - 1:
                warning = 'A conditional statement is assigned for list number ' + `num + 1` + '  which is not existed!\n' + \
                          'Please remove the letter "' + letters[num] + '" from the statements to solve this problem!\n' + \
                          'Number of lists are ' + `len(listInfo)` + '. Please fix this issue and try again.'
                          
                print warning
                ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warning)
                return -1, -1
        
        selList = []
        [selList.append([]) for i in range(len(listInfo))]
        startHour = listInfo[0][5]
        endHour = listInfo[0][6]
        
        for i in range(len(listInfo)):
            selList[i] = annualHourlyData[indexList[i]+7:indexList[i+1]]
            if listInfo[i][5]!= startHour or  listInfo[i][6]!=endHour :
                warning = 'Length of all the lists should be the same to apply conditional statemnets.' + \
                          ' Please fix this issue and try again!\nList number '+ `i+1` + ' is the one that causes the issue.'
                print warning
                ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warning)
                return -1, -1
        
        # replace the right list in the conditional statement
        statement = conditionalStatement.split(' ')
        finalStatement = 'pattern = '
        titleStatement = '...                         ...                         ...\n' +\
                         'Conditional Selection Applied:\n'
        
        for statemntPart in statement:
            statementCopy = str.Copy(statemntPart) # a copy to make a meaningful string
            
            if statemntPart!='and' and statemntPart!='or':
                for num in listNum:
                    toBeReplacedWith = 'selList[this][HOY]'.replace('this', `num`)
                    titleToBeReplacedWith = listInfo[num][2]
                    
                    statemntPart = statemntPart.replace(letters[num], toBeReplacedWith, 20000)
                    statementCopy = statementCopy.replace(letters[num], titleToBeReplacedWith, 20000)
                    if statementCopy.find(letters[num])!=-1: break
                    
                titleStatement = titleStatement + ' ' + statementCopy
            else:
                
                titleStatement = titleStatement + '\n' + statementCopy
            finalStatement = finalStatement + ' ' + statemntPart
        print titleStatement
        
        # check for the pattern
        patternList = []
       
        for HOY in range(8760):
            try:
                exec(finalStatement)
                patternList.append(pattern)
            except:
                pass
                
        return titleStatement, patternList

def makeChart(values, xSize, xScale, yScale, zScale, patternList, basePoint, colors, yCount):
    #If there is no yCount, define it as 24
    if yCount == []: yCount = xSize
    else: yCount = yCount[0]
    
    numOfDays = len(values)/yCount
    
    # make a monocolor mesh without webbing between the primary faces.
    ySize = int(len(values)/xSize)
    meshFacePts = []
    dataPts = []
    
    for i in range(len(values)):
        xMove = - xScale * (i % xSize)
        yMove = yScale * int(i / xSize)
        zMove = zScale * values[i]
        movingVec = rc.Geometry.Vector3f(xMove,yMove,zMove)
        newPoint = rc.Geometry.Point3d.Add(basePoint, movingVec)
        
        facePt1 = newPoint
        facePt2 = rc.Geometry.Point3d(newPoint.X + xScale, newPoint.Y, newPoint.Z)
        facePt3 = rc.Geometry.Point3d(newPoint.X + xScale, newPoint.Y + yScale, newPoint.Z)
        facePt4 = rc.Geometry.Point3d(newPoint.X, newPoint.Y + yScale, newPoint.Z)
        
        meshFacePts.append([facePt1, facePt2, facePt3, facePt4])
        dataPts.append(rc.Geometry.Point3d(newPoint.X + (xScale/2), newPoint.Y, newPoint.Z))
    
    joinedMesh = rc.Geometry.Mesh()
    
    for list in  meshFacePts:
        mesh = rc.Geometry.Mesh()
        
        for point in list:
            mesh.Vertices.Add(point)
        
        mesh.Faces.AddFace(0, 1, 2, 3)
        joinedMesh.Append(mesh)
    
    if zScale &gt; 0.0:
        #Create the first webbing in between the primary mesh faces.
        if numOfDays &gt;= 2:
            for listCount, list in enumerate(meshFacePts):
                if listCount &lt; len(meshFacePts)-yCount:
                    mesh = rc.Geometry.Mesh()
                    mesh.Vertices.Add(list[2])
                    mesh.Vertices.Add(meshFacePts[listCount+yCount][1])
                    mesh.Vertices.Add(meshFacePts[listCount+yCount][0])
                    mesh.Vertices.Add(list[3])
                    
                    mesh.Faces.AddFace(0, 1, 2, 3)
                    joinedMesh.Append(mesh)
        
        #Create the second webbing in between the primary mesh faces.
        for listCount, list in enumerate(meshFacePts):
            if listCount/yCount != int(listCount/yCount):
                try:
                    mesh = rc.Geometry.Mesh()
                    mesh.Vertices.Add(list[2])
                    mesh.Vertices.Add(list[1])
                    mesh.Vertices.Add(meshFacePts[listCount-1][0])
                    mesh.Vertices.Add(meshFacePts[listCount-1][3])
                    
                    mesh.Faces.AddFace(0, 1, 2, 3)
                    joinedMesh.Append(mesh)
                except: pass
    
    # color the mesh faces.
    joinedMesh.VertexColors.CreateMonotoneMesh(System.Drawing.Color.Gray)
    
    for srfNum in range (joinedMesh.Faces.Count):
        if srfNum &lt; len(values):
            joinedMesh.VertexColors[4 * srfNum + 0] = colors[srfNum]
            joinedMesh.VertexColors[4 * srfNum + 1] = colors[srfNum]
            joinedMesh.VertexColors[4 * srfNum + 3] = colors[srfNum]
            joinedMesh.VertexColors[4 * srfNum + 2] = colors[srfNum]
        if zScale &gt; 0.0:
            try:
                if srfNum &gt;= len(values) and srfNum &lt; len(values)*2 - yCount:
                    joinedMesh.VertexColors[4 * srfNum + 0] = colors[srfNum-len(values)]
                    joinedMesh.VertexColors[4 * srfNum + 1] = colors[srfNum-len(values)+yCount]
                    joinedMesh.VertexColors[4 * srfNum + 3] = colors[srfNum-len(values)]
                    joinedMesh.VertexColors[4 * srfNum + 2] = colors[srfNum-len(values)+yCount]
                elif srfNum &gt;= len(values)*2 - yCount:
                    extraVal = int((srfNum - len(values)*2 - yCount)/(yCount-1))
                    if yCount == 2: extraVal = extraVal+2
                    joinedMesh.VertexColors[4 * srfNum + 0] = colors[srfNum-2*len(values)+(yCount+3)+extraVal]
                    joinedMesh.VertexColors[4 * srfNum + 1] = colors[srfNum-2*len(values)+(yCount+3)+extraVal]
                    joinedMesh.VertexColors[4 * srfNum + 3] = colors[srfNum-2*len(values)+(yCount+3)+extraVal-1]
                    joinedMesh.VertexColors[4 * srfNum + 2] = colors[srfNum-2*len(values)+(yCount+3)+extraVal-1]
            except: pass
    
    #Make a copy of the mesh for purposes of placing the legend correctly.
    originalMesh = rc.Geometry.Mesh.Duplicate(joinedMesh)
    
    # Cull mesh faces that do not meet the conditional statement.
    if condStatement_:
        cullFaceIndices = []
        cullPtIndices = []
        for count, boolean in enumerate(patternList):
            if boolean == False:
                cullFaceIndices.append(count)
                cullPtIndices.append(count)
                if count &lt; len(values)-yCount:
                    cullFaceIndices.append(count+len(values))
                    cullFaceIndices.append(count+len(values)-yCount)
                extraVal = int((count - (yCount+1))/yCount)-1
                cullFaceIndices.append(count+(2*len(values))-(yCount+3)-extraVal)
                cullFaceIndices.append(count+(2*len(values))-(yCount+3)-extraVal+1)
            else: pass
        cullPtIndices.reverse()
        for count in cullPtIndices: del dataPts[count]
        joinedMesh.Faces.DeleteFaces(cullFaceIndices)
    else: pass
    
    # Rotate the mesh to be correctly oriented towards the Rhino X and Y axes.
    joinedMesh.Rotate(-math.pi/2, rc.Geometry.Vector3d.ZAxis, basePoint)
    originalMesh.Rotate(-math.pi/2, rc.Geometry.Vector3d.ZAxis, basePoint)
    rotateTrans = rc.Geometry.Transform.Rotation(-math.pi/2, basePoint)
    for point in dataPts: point.Transform(rotateTrans)
    
    return joinedMesh, originalMesh, dataPts

def createChartCrvs(values, analysisStart, analysisEnd, xSize, xScale, yScale, zScale, basePoint, yHeight, lb_preparation, legendFont, legendFontSize, legendBold, lb_visualization):
    ySize = int(len(values)/xSize)
    # Get a value to set the chart curves with.
    orderedVal = values[:]
    orderedVal.sort()
    zMax = orderedVal[0]*zScale + sc.doc.ModelAbsoluteTolerance*5
    
    # Decompose the analysis period
    startMonth = analysisStart[0]
    startDay = analysisStart[1]
    startHour = analysisStart[2]
    endMonth = analysisEnd[0]
    endDay = analysisEnd[1]
    endHour = analysisEnd[2]
    
    # Make a list of days in ech month of the analysis period.
    months = [1,2,3,4,5,6,7,8,9,10,11,12]
    d = deque(months)
    d.rotate(-startMonth+1)
    monthsList = []
    for month in d:
        monthsList.append(month)
    monthsList = monthsList[:monthsList.index(endMonth)+1]
    
    daysPerMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
    monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
    
    textStrings = []
    daysList = []
    for count, month in enumerate(monthsList):
        textStrings.append(monthNames[month-1])
        if count == 0 and startMonth == endMonth:
            daysList.append(daysPerMonth[month-1] + 1 - startDay + (endDay - daysPerMonth[month-1]))
        elif count == 0:
            daysList.append(daysPerMonth[month-1] + 1 - startDay)
        elif count == len(monthsList) - 1 and endDay != daysPerMonth[month-1]:
            daysList.append(endDay)
        else:
            daysList.append(daysPerMonth[month-1])
    
    # Make the chart curves for each month and get base points for the text
    if legendFontSize == None: legendFontSize = xScale*.75
    monthCurves = []
    textBasePts = []
    curveVertices = []
    i = 0
    for monthDays in daysList:
        Point1 = rc.Geometry.Point3d(basePoint.X+i, basePoint.Y-xScale, zMax)
        Point2 = rc.Geometry.Point3d(basePoint.X+i+(monthDays*yScale), basePoint.Y-xScale, zMax)
        Point3 = rc.Geometry.Point3d(basePoint.X+i+(monthDays*yScale), basePoint.Y+yHeight-xScale-((24-xSize)*xScale), zMax)
        Point4 = rc.Geometry.Point3d(basePoint.X+i, basePoint.Y+yHeight-xScale-((24-xSize)*xScale), zMax)
        curveVertices.append([Point1, Point2, Point3, Point4])
        i+=(monthDays*yScale)
    
    for count, list in enumerate(curveVertices):
        monthCurves.append(rc.Geometry.PolylineCurve([list[0], list[1], list[2], list[3], list[0]]))
        textBasePts.append(rc.Geometry.Point3d(list[0].X+(daysList[count]*yScale*.5) - legendFontSize*2, list[0].Y-legendFontSize*1.5, list[0].Z))
    
    #Make the text surfaces for each month.
    textSrfs = []
    for count, monthText in enumerate(textStrings):
        textSrf = lb_visualization.text2srf([monthText], [textBasePts[count]], legendFont, legendFontSize, legendBold)
        textSrfs.extend(textSrf[0])
    
    #Generate curves for each of the major hours.
    hoursList = []
    hoursList.append(startHour-1)
    for hour in range(startHour, endHour+1, 1):
        hoursList.append(hour)
    
    hourTextPts = []
    hourLines = []
    i = -xScale
    for hour in hoursList:
        startPt = rc.Geometry.Point3d(basePoint.X, basePoint.Y+i, zMax)
        endPt = rc.Geometry.Point3d(basePoint.X+(ySize*yScale), basePoint.Y+i, zMax)
        hourLines.append(rc.Geometry.LineCurve(startPt, endPt))
        hourTextPts.append(rc.Geometry.Point3d(basePoint.X - legendFontSize*5.5, basePoint.Y+i-legendFontSize*0.5, zMax))
        i+=(xScale)
    
    hoursPerPeriod = [0, 6, 12, 18, 24]
    hourNames = ["12 AM", " 6 AM", "12 PM", " 6 PM", "12 AM"]
    
    for hourCount, hour in enumerate(hoursList):
        for count, period in enumerate(hoursPerPeriod):
            if hour == period:
                textStrings.append(hourNames[count])
                monthCurves.append(hourLines[hourCount])
                textBasePts.append(hourTextPts[hourCount])
                srfs = lb_visualization.text2srf([hourNames[count]], [hourTextPts[hourCount]], legendFont, legendFontSize, legendBold)[0]
                for srf in srfs:
                    textSrfs.append(srf)
    
    return monthCurves, textBasePts, textStrings, textSrfs


def main(inputData, basePoint, xScale, yScale, zScale, yCount, legendPar, condStatement, bakeIt):
    # import the classes
    if sc.sticky.has_key('ladybug_release'):
        try:
            if not sc.sticky['ladybug_release'].isCompatible(ghenv.Component): return -1
            if sc.sticky['ladybug_release'].isInputMissing(ghenv.Component): return -1
        except:
            warning = "You need a newer version of Ladybug to use this compoent." + \
            "Use updateLadybug component to update userObjects.\n" + \
            "If you have already updated userObjects drag Ladybug_Ladybug component " + \
            "into canvas and try again."
            w = gh.GH_RuntimeMessageLevel.Warning
            ghenv.Component.AddRuntimeMessage(w, warning)
            return -1
        lb_preparation = sc.sticky["ladybug_Preparation"]()
        lb_visualization = sc.sticky["ladybug_ResultVisualization"]()
        
        conversionFac = lb_preparation.checkUnits()
        # copy the custom code here
        if len(inputData)== 0: return -1
        
        if len(inputData)!= 0 and inputData[0]!=None and str(inputData[0]) != "Connect input data here":
            
            # check conditional statement for the whole year
            titleStatement = -1
            if condStatement:
                print 'Checking conditional statements...'
                # send all data and statement to a function and return back
                # True, False Pattern and condition statement
                titleStatement, patternList = checkConditionalStatement(inputData, condStatement)
            if titleStatement == -1:
                patternList = [False] * 8760
                titleStatement = False
            
            hoursOfYear = []
            for hoy, pattern in enumerate(patternList):
                if pattern: hoursOfYear.append(hoy + 1)
            
            # separate the data
            indexList, listInfo = lb_preparation.separateList(inputData, lb_preparation.strToBeFound)
        
            #separate total, diffuse and direct radiations
            separatedLists = []
            for i in range(len(indexList)-1):
                selList = []
                [selList.append(float(x)) for x in inputData[indexList[i]+7:indexList[i+1]]]
                separatedLists.append(selList)
            
            # Organize the data tree of legend parameters
            legendPs = []
            for i in range(legendPar.BranchCount):
                legendPs.append(legendPar.Branch(i))
            if len(legendPs) == 0: legendPs.append([])
            elif len(legendPs) == 1: pass
            elif len(legendPs) == len(separatedLists): pass
            else:
                warning = "The input for legendPar must be either a single set of parameters for all charts or a data tree of parameters matching the number of connected data streams in _inputData."
                print warning
                ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warning)
                return -1
            
            
            res = [[],[], [], [], [], [], [], []]
            # legendBasePoints = []
            for i, results in enumerate(separatedLists):
                
                if 'Month' in listInfo[i][4]:
                    # scale for the monthly data
                    xExtraFactor = 10
                else:
                    xExtraFactor = 1
                
                    
                try:
                    # assuming there is a scale for this chart
                    xSCC = 10 * float(xScale[i]) * xExtraFactor /conversionFac
                except:
                    try:
                        # try the first item
                        xSCC = 10 * float(xScale[0]) * xExtraFactor /conversionFac
                    except:
                        xSCC = 10 * xExtraFactor/conversionFac
                
                # make sure the scale is not 0
                if xSCC == 0: xSCC = 10 * xExtraFactor/conversionFac
                
                # this is because I rotate the geometry 90 degrees!
                ySC = abs(xSCC)
                
                try:
                    ySCC = 10 * float(yScale[i])/conversionFac
                except:
                    try:
                        ySCC = 10 * float(yScale[0])/conversionFac
                    except:
                        ySCC = 10/conversionFac
                
                if ySCC==0: ySCC = 10/conversionFac
                
                xSC = abs(ySCC)
                
                # read running period
                stMonth, stDay, stHour, endMonth, endDay, endHour = lb_visualization.readRunPeriod((listInfo[i][5], listInfo[i][6]), False)
                
                try:
                    xC = float(yCount[i])
                except:
                    try:
                        xC = float(yCount[0])
                    except:
                        if 'Daily' in listInfo[i][4]: xC = 7
                        elif listInfo[i][4] == 'Monthly' or listInfo[i][4] == 'Monthly-&gt; averaged' or listInfo[i][4] == 'Monthly-&gt; total': xC = 1
                        else: xC = abs(endHour - stHour) + 1
                        
                if xC == 0: xC = abs(endHour - stHour) + 1
                xC = int(xC)
                
                dataType = listInfo[i][2]
                
                if ('Rad' in dataType): extraFactor = 100
                elif ('Hum' in dataType): extraFactor = 5
                elif ('Illuminance' in dataType): extraFactor = 5000
                elif ('Wind Direction' in dataType): extraFactor = 30
                else: extraFactor = 1
                #if xExtraFactor !=1: extraFactor = extraFactor/3
                
                try:
                    zSC = 10 * float(zScale[i])/(conversionFac*extraFactor)
                except:
                    try:
                        zSC = 10 * float(zScale[0])/(conversionFac*extraFactor)
                    except:
                        zSC = 10/(conversionFac*extraFactor)
                
                
                print 'zScale is set to ' +  ("%.2f" % (1/extraFactor)) + ' for ' + dataType
                    
                zSC = abs(zSC)
                
                # read legend parameters
                if len(legendPs) == 1: lowB, highB, numSeg, customColors, legendBasePoint, legendScale, legendFont, legendFontSize, legendBold, decimalPlaces, removeLessThan = lb_preparation.readLegendParameters(legendPs[0], False)
                else: lowB, highB, numSeg, customColors, legendBasePoint, legendScale, legendFont, legendFontSize, legendBold, decimalPlaces, removeLessThan = lb_preparation.readLegendParameters(legendPs[i], False)
                
                # Get the graph colors
                colors = lb_visualization.gradientColor(results, lowB, highB, customColors)
                
                # draw the graph mesh
                coloredChart, originalMesh, dataPts = makeChart(results, xC, xSC, ySC, zSC, patternList, rc.Geometry.Point3d.Origin, colors, yCount)
                
                #Create the chart curves.
                if yCount == []: yHeight = 24*xSC
                else: yHeight = yCount[i]*xSC
                
                if yHeight == 24*xSC:
                    if len(results) == 8760 or listInfo[i][4] == "Hourly":
                        chartCrvs, textBasePts, textStrings, textSrfs = createChartCrvs(results, listInfo[i][5], listInfo[i][6], xC, xSC, ySC, zSC, rc.Geometry.Point3d.Origin, yHeight, lb_preparation, legendFont, legendFontSize, legendBold, lb_visualization)
                    else:
                        chartCrvs = []
                        textBasePts = []
                        textStrings = []
                        textSrfs = []
                else:
                    chartCrvs = []
                    textBasePts = []
                    textStrings = []
                    textSrfs = []
                
                #Add the results of the createChartCrvs() function to their respective lists.
                finalChartCrvs = []
                for item in chartCrvs:
                    finalChartCrvs.append(item)
                for item in textSrfs:
                    finalChartCrvs.append(item)
                
                # Group eveything together to use it for the bounding box.
                allGeo = []
                for item in finalChartCrvs:
                    allGeo.append(item)
                allGeo.append(originalMesh)
                
                #Calculate a bounding box around everything that will help place the legend ad title.
                lb_visualization.calculateBB(allGeo, True)
                
                try: movingDist = -1.5 * lb_visualization.BoundingBoxPar[2] # moving distance for sky domes
                except: movingDist = 0
                
                movingVector = rc.Geometry.Vector3d(0, i * movingDist,0)
                coloredChart.Translate(movingVector)
                titleTextCurve, titleStr, titlebasePt = lb_visualization.createTitle([listInfo[i]],lb_visualization.BoundingBoxPar, legendScale, None, False, legendFont, legendFontSize, legendBold)
                
                legendTitle = listInfo[i][3]
                placeName = listInfo[i][1]
                dataType = listInfo[i][2]
                
                #Group all title stuff together.
                titleText = []
                titleBasePoints = []
                titleBasePoints.append(titlebasePt)
                for item in textBasePts:
                    titleBasePoints.append(item)
                titleText.append(titleStr)
                for item in textStrings:
                    titleText.append(item)
                
                #Calculate a bounding box to help size the legend.
                allGeoL = []
                for item in chartCrvs:
                    allGeoL.append(item)
                allGeoL.append(originalMesh)
                lb_visualization.calculateBB(allGeoL, True)
                lb_visualization.BoundingBoxPar = (lb_visualization.BoundingBoxPar[0], lb_visualization.BoundingBoxPar[1], lb_visualization.BoundingBoxPar[2] - (lb_visualization.BoundingBoxPar[2]/numSeg) , lb_visualization.BoundingBoxPar[3], lb_visualization.BoundingBoxPar[4], lb_visualization.BoundingBoxPar[5], lb_visualization.BoundingBoxPar[6])
                
                # create legend geometries
                legendSrfs, legendText, legendTextCrv, textPt, textSize = lb_visualization.createLegend(results
                    , lowB, highB, numSeg, legendTitle, lb_visualization.BoundingBoxPar, legendBasePoint, legendScale, legendFont, legendFontSize, legendBold, decimalPlaces, removeLessThan)
                
                textPt.append(titlebasePt)
                
                ptCount  = 0
                for pt in textPt:
                    ptLocation = rc.Geometry.Point(pt)
                    ptLocation.Translate(movingVector) # move it to the right place
                    textPt[ptCount] = rc.Geometry.Point3d(ptLocation.Location)
                    ptCount += 1
                
                ptCount  = 0
                for pt in dataPts:
                    ptLocation = rc.Geometry.Point(pt)
                    ptLocation.Translate(movingVector) # move it to the right place
                    dataPts[ptCount] = rc.Geometry.Point3d(ptLocation.Location)
                    ptCount += 1
                
                transMtx = rc.Geometry.Transform.Translation(movingVector)
                for crv in legendTextCrv:
                    for c in crv: c.Translate(movingVector)
                for crv in titleTextCurve:
                    for c in crv: c.Translate(movingVector)
                for geo in finalChartCrvs:
                    geo.Translate(movingVector)
                for point in titleBasePoints:
                    point.Transform(transMtx)
                
                # generate legend colors
                legendColors = lb_visualization.gradientColor(legendText[:-1], lowB, highB, customColors)
                
                # color legend surfaces
                legendSrfs = lb_visualization.colorMesh(legendColors, legendSrfs)
                try: legendSrfs.Translate(movingVector) # move it to the right place
                except:
                    msg = "0 hour meets the conditional statemnet."
                    print msg
                    w = gh.GH_RuntimeMessageLevel.Warning
                    ghenv.Component.AddRuntimeMessage(w, msg)
                    return -1
                
                if legendBasePoint == None:
                    nlegendBasePoint = lb_visualization.BoundingBoxPar[0]
                    movedLegendBasePoint = rc.Geometry.Point3d.Add(nlegendBasePoint, movingVector);
                else:
                    movedLegendBasePoint = rc.Geometry.Point3d.Add(legendBasePoint, movingVector);
                
                fullLegTxt = lb_preparation.flattenList(legendTextCrv + titleTextCurve)
                
                legendTextCrv = lb_preparation.flattenList(legendTextCrv)
                titleTextCurve = lb_preparation.flattenList(titleTextCurve)
                
                # If the user has specified a base point, move all geometry to align with that base point.
                if basePoint:
                    translation = rc.Geometry.Transform.Translation(basePoint.X, basePoint.Y, basePoint.Z)
                    transVec = rc.Geometry.Vector3d(basePoint.X, basePoint.Y, basePoint.Z)
                    coloredChart.Transform(translation)
                    movedLegendBasePoint.Transform(translation)
                    legendSrfs.Transform(translation)
                    for item in legendTextCrv: item.Transform(translation)
                    for item in titleTextCurve: item.Transform(translation)
                    for item in finalChartCrvs: item.Transform(translation)
                    for point in titleBasePoints: point.Transform(translation)
                    for point in dataPts: point.Transform(translation)
                    for point in textPt: point.Transform(translation)
                else: pass
                
                if bakeIt &gt; 0:
                    studyLayerName = '3D_CHARTS'
                    legendText.append(titleStr)
                    # check the study type
                    try:
                        newLayerIndex, l = lb_visualization.setupLayers(dataType, 'LADYBUG', placeName, studyLayerName, False, False, 0, 0)
                    except:
                        placeName = 'alternateLayerName'
                        newLayerIndex, l = lb_visualization.setupLayers(dataType, 'LADYBUG', placeName, studyLayerName, False, False, 0, 0)
                    if bakeIt == 1: lb_visualization.bakeObjects(newLayerIndex, coloredChart, legendSrfs, legendText+textStrings, textPt+textBasePts, textSize, legendFont, chartCrvs, decimalPlaces)
                    else: lb_visualization.bakeObjects(newLayerIndex, coloredChart, legendSrfs, legendText+textStrings, textPt+textBasePts, textSize, legendFont, chartCrvs, decimalPlaces, False)
                
                res[0].append(coloredChart)
                res[1].append([legendSrfs, legendTextCrv])
                res[2].append(movedLegendBasePoint)
                res[3].append(titleTextCurve)
                res[4].append([titleBasePoints[0]])
                res[5].append(hoursOfYear)
                res[6].append(finalChartCrvs)
                res[7].append(dataPts)
            return res
        elif str(inputData[0]) == "Connect input data here":
            print 'Connect inputData!'
            return -1
        else:
            warning = 'Please ensure that the connected inputData is valid!'
            print warning
            w = gh.GH_RuntimeMessageLevel.Warning
            ghenv.Component.AddRuntimeMessage(w, warning)
            return -1
    else:
        print "You should first let the Ladybug fly..."
        w = gh.GH_RuntimeMessageLevel.Warning
        ghenv.Component.AddRuntimeMessage(w, "You should first let the Ladybug fly...")
        return -1
    
    conversionFac = lb_preparation.checkUnits()



result = main(_inputData, _basePoint_, _xScale_, _yScale_, _zScale_, _yCount_, legendPar_, condStatement_, bakeIt_)
if result!= -1:
    graphMesh = DataTree[System.Object]()
    legend = DataTree[System.Object]()
    graphCurves = DataTree[System.Object]()
    legendBasePts = DataTree[System.Object]()
    conditionalPts = DataTree[System.Object]()
    title = DataTree[System.Object]()
    titleBasePts = DataTree[System.Object]()
    conditionalHOY = DataTree[System.Object]()
    dataPts = DataTree[System.Object]()
    
    for i, leg in enumerate(result[1]):
        p = GH_Path(i)
        graphMesh.Add(result[0][i], p)
        legend.Add(leg[0], p)
        legend.AddRange(leg[1], p)
        legendBasePts.Add(result[2][i], p)
        title.AddRange(result[3][i], p)
        titleBasePts.AddRange(result[4][i], p)
        conditionalHOY.AddRange(result[5][i], p)
        graphCurves.AddRange(result[6][i], p)
        dataPts.AddRange(result[7][i], p)
    ghenv.Component.Params.Output[4].Hidden = True
    ghenv.Component.Params.Output[6].Hidden = True
    ghenv.Component.Params.Output[7].Hidden = True</item>
                    <item name="Description" type_name="gh_string" type_code="10">Use this component to make a 3D chart in the Rhino scene of any climate data or hourly simulation data.
-
Provided by Ladybug 0.0.65</item>
                    <item name="EditorLocation" type_name="gh_drawing_point" type_code="30">
                      <X>1314</X>
                      <Y>135</Y>
                    </item>
                    <item name="EditorSize" type_name="gh_drawing_size" type_code="32">
                      <W>1169</W>
                      <H>725</H>
                    </item>
                    <item name="HideInput" type_name="gh_bool" type_code="1">true</item>
                    <item name="HideOutput" type_name="gh_bool" type_code="1">false</item>
                    <item name="IconOverride" type_name="gh_drawing_bitmap" type_code="37">
                      <bitmap length="1062">iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOwQAADsEBuJFr7QAAA8hJREFUSEtjGKyAB4irgVgIzKMBmAHE/4F4LZhHA+ADxHVAHA7ErCABagAzIDaGMBnYgXgFEIOCijrAWkV9RXtMwkdJYdEKIFcbiEEWcIDkqAFU8p09LtyYNOP4usbuhyXxabeN9YwvsLKyhgHlBCBKMAAjFBMGvGxsxSsyMh4vKSzdO6uges+S1slH+/v6v7fVTn4WHpV30sjSfZK4jEoyCwuHPbewtCMTB0ccUJsORDdhwBNmYHD4eFXdqbk5hftnFFbunVBUf6i1rP5JT+PM/ROmbD7SO/fwzbKJux7lzL/02jKu/gVQTxBEKxGAi4WldHVy8tMN+QV75uZCLJhU0ni4uaj5YWvtxP119bP2lTYu3F8969i++JaNj4Fa3CE6iQMmzc7Ot88UFR1ZmJq5H2TBrIKqPROL6o+1lDW/ba2BWFDWvGhf9byTtxW0LKdD9REFTGusLC9eLci5uDIxec/SDKgF+VX7QD5oL2+711Y9eV9t7cz9zZN37YsumnQfqMcOohUV8AJxsgE3d6eNIF+EDh9fTryK/OwNPm53r6UmnFsXF717ZWLifpgFc/KrtgItOFhfUP+utXbyXqAPtrTPOXZez8p9PcQ47EBIhZV1zx1bi/+fg7zuP44IvHomPOjA5rCgvRtiY/YD4+DA8rTMHQtzC7dNKyw/21Fc96Q5vul3U1X3/aa2OddLWxY9YmbjDIaahRvo8HAvuOflfOeYt9vePYGe+7cALdkUG7V9XULyxvkZmad7cgu+theUvQfFQV9l9/bGyr7D/TPWP/fwiwWVS1VArAQ2iIGBGYixFiFyleqq5x6F+hzd7+u5Y3dI4KblsbGXJqenfJqZmfVkem7hldmF1dumlDTt6izt2N/fsXBnV9fau5zc/AVAvapAvB+IQUFlC8TzgFgLiFGBFh9P7a0Ar0tbQv0uLo0Lf7ggKfrVvNSEe8szMrYvyinaOrOwcv+Ewtr9s9pm7lk8a/NLHX2LNVCtMGABxNuAGOSrUpAACICyNBOEyZC12NPx/46MyK8rokOvb4uJ3rw6IWHLyszc/Vurm45tauw/vbF73rXJDZM/qqnpLACqZ4FoQwHFQNwJxOIgjjwQJwGxBhDPAuLNXgpyV94mx53dFx6yaVV0xL59eXmHNhSW3C0ODDqZ6Re8y9PGeRUHB3c0UC1RIA+IQd45BsSxIAEgMMzW1rx/OzP5xvWiokNLk5KfiPIJZAHFuYEYm4vxAksg3gHEm8E8BBDzUFHcXh8W8k+QmxtUatIEaLIyMUVA2SMSMDAAAMIue+vS6jPdAAAAAElFTkSuQmCC</bitmap>
                    </item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">ff7b1331-ef7a-4f81-bbbb-9b0c808190a7</item>
                    <item name="Name" type_name="gh_string" type_code="10">Ladybug_3D Chart</item>
                    <item name="NickName" type_name="gh_string" type_code="10">3DChart</item>
                  </items>
                  <chunks count="2">
                    <chunk name="Attributes">
                      <items count="2">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>5456</X>
                          <Y>961</Y>
                          <W>222</W>
                          <H>184</H>
                        </item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>5575</X>
                          <Y>1053</Y>
                        </item>
                      </items>
                    </chunk>
                    <chunk name="ParameterData">
                      <items count="20">
                        <item name="InputCount" type_name="gh_int32" type_code="3">9</item>
                        <item name="InputId" index="0" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="1" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="2" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="3" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="4" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="5" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="6" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="7" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="8" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="OutputCount" type_name="gh_int32" type_code="3">9</item>
                        <item name="OutputId" index="0" type_name="gh_guid" type_code="9">3ede854e-c753-40eb-84cb-b48008f14fd4</item>
                        <item name="OutputId" index="1" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                        <item name="OutputId" index="2" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                        <item name="OutputId" index="3" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                        <item name="OutputId" index="4" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                        <item name="OutputId" index="5" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                        <item name="OutputId" index="6" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                        <item name="OutputId" index="7" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                        <item name="OutputId" index="8" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                      </items>
                      <chunks count="18">
                        <chunk name="InputParam" index="0">
                          <items count="13">
                            <item name="Access" type_name="gh_int32" type_code="3">1</item>
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">A list of input data to plot.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">4683c80f-5325-4ef2-8d4d-a426a9c1eddd</item>
                            <item name="Mapping" type_name="gh_int32" type_code="3">1</item>
                            <item name="Name" type_name="gh_string" type_code="10">_inputData</item>
                            <item name="NickName" type_name="gh_string" type_code="10">_inputData</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">1</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="Source" index="0" type_name="gh_guid" type_code="9">5ab34ca9-6edd-4ceb-b751-46e3a55da4c9</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">87f87f55-5b71-41f4-8aea-21d494016f81</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>5458</X>
                                  <Y>963</Y>
                                  <W>102</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>5518.5</X>
                                  <Y>973</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="1">
                          <items count="10">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">An optional point with which to locate the 3D chart in the Rhino Model.  The default is set to the Rhino origin at (0,0,0).</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">a539109f-b3cf-4a37-a2a0-49e221895fce</item>
                            <item name="Name" type_name="gh_string" type_code="10">_basePoint_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">_basePoint_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">e1937b56-b1da-4c12-8bd8-e34ee81746ef</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>5458</X>
                                  <Y>983</Y>
                                  <W>102</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>5518.5</X>
                                  <Y>993</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="2">
                          <items count="12">
                            <item name="Access" type_name="gh_int32" type_code="3">1</item>
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">The scale of the X axis of the graph. The default will plot the X axis with a length of 3650 Rhino model units (for 365 days of the year). Connect a list of values for multiple graphs.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">91361f9c-a3b9-4a69-a84b-83e0aa5be7a9</item>
                            <item name="Name" type_name="gh_string" type_code="10">_xScale_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">_xScale_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">1</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="Source" index="0" type_name="gh_guid" type_code="9">b19c3f14-60c8-43f2-a7c5-e302e58cab46</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">39fbc626-7a01-46ab-a18e-ec1c0c41685b</item>
                          </items>
                          <chunks count="2">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>5458</X>
                                  <Y>1003</Y>
                                  <W>102</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>5518.5</X>
                                  <Y>1013</Y>
                                </item>
                              </items>
                            </chunk>
                            <chunk name="PersistentData">
                              <items count="1">
                                <item name="Count" type_name="gh_int32" type_code="3">1</item>
                              </items>
                              <chunks count="1">
                                <chunk name="Branch" index="0">
                                  <items count="2">
                                    <item name="Count" type_name="gh_int32" type_code="3">1</item>
                                    <item name="Path" type_name="gh_string" type_code="10">{0}</item>
                                  </items>
                                  <chunks count="1">
                                    <chunk name="Item" index="0">
                                      <items count="2">
                                        <item name="number" type_name="gh_double" type_code="6">0.25</item>
                                        <item name="TypeName" type_name="gh_string" type_code="10">Grasshopper.Kernel.Types.GH_Number</item>
                                      </items>
                                    </chunk>
                                  </chunks>
                                </chunk>
                              </chunks>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="3">
                          <items count="11">
                            <item name="Access" type_name="gh_int32" type_code="3">1</item>
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">The scale of the Y axis of the graph. The default will plot the Y axis with a length of 240 Rhino model units (for 24 hours of the day). Connect a list of values for multiple graphs.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">126e3d39-f007-4712-8684-33a5e8d6c916</item>
                            <item name="Name" type_name="gh_string" type_code="10">_yScale_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">_yScale_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">1</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">39fbc626-7a01-46ab-a18e-ec1c0c41685b</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>5458</X>
                                  <Y>1023</Y>
                                  <W>102</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>5518.5</X>
                                  <Y>1033</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="4">
                          <items count="12">
                            <item name="Access" type_name="gh_int32" type_code="3">1</item>
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">The scale of the Z axis of the graph. The default will plot the Z axis with a number of Rhino model units corresponding to the input data values.  Set to 0 to see graphCurves appear on top of the mesh.  Connect a list of values for multiple graphs.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">27dc1f37-4cb0-45d1-893b-47931dc3417a</item>
                            <item name="Name" type_name="gh_string" type_code="10">_zScale_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">_zScale_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">1</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="Source" index="0" type_name="gh_guid" type_code="9">1af5c0c9-dfa8-4ad8-9366-07943eaa5d2a</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">39fbc626-7a01-46ab-a18e-ec1c0c41685b</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>5458</X>
                                  <Y>1043</Y>
                                  <W>102</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>5518.5</X>
                                  <Y>1053</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="5">
                          <items count="11">
                            <item name="Access" type_name="gh_int32" type_code="3">1</item>
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">The number of segments on your y-axis.  The default is set to 24 for 24 hours of the day. This variable is particularly useful for input data that is not for each hour of the year.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">012ade65-f840-4536-9672-bd1febbc99eb</item>
                            <item name="Name" type_name="gh_string" type_code="10">_yCount_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">_yCount_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">1</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">48d01794-d3d8-4aef-990e-127168822244</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>5458</X>
                                  <Y>1063</Y>
                                  <W>102</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>5518.5</X>
                                  <Y>1073</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="6">
                          <items count="12">
                            <item name="Access" type_name="gh_int32" type_code="3">2</item>
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Optional legend parameters from the Ladybug Legend Parameters component.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">911a797b-ed88-4d25-8466-8d2d903fd6f0</item>
                            <item name="Name" type_name="gh_string" type_code="10">legendPar_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">legendPar_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">2</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="Source" index="0" type_name="gh_guid" type_code="9">731db906-5ec1-4367-ab54-83509d053a46</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">87f87f55-5b71-41f4-8aea-21d494016f81</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>5458</X>
                                  <Y>1083</Y>
                                  <W>102</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>5518.5</X>
                                  <Y>1093</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="7">
                          <items count="10">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">An optional conditional statement, which will remove data from the chart that does not fit the conditions. The input must be a valid python conditional statement (e.g. a &gt; 25).</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">27c12549-2872-45a7-8815-1eee1a8500f1</item>
                            <item name="Name" type_name="gh_string" type_code="10">condStatement_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">condStatement_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">87f87f55-5b71-41f4-8aea-21d494016f81</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>5458</X>
                                  <Y>1103</Y>
                                  <W>102</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>5518.5</X>
                                  <Y>1113</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="8">
                          <items count="11">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">An integer that tells the component if/how to bake the bojects in the Rhino scene.  The default is set to 0.  Choose from the following options:
0 (or False) - No geometry will be baked into the Rhino scene (this is the default).
1 (or True) - The geometry will be baked into the Rhino scene as a colored hatch and Rhino text objects, which facilitates easy export to PDF or vector-editing programs.
2 - The geometry will be baked into the Rhino scene as colored meshes, which is useful for recording the results of paramteric runs as light Rhino geometry.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">d6353d7e-4a4c-4d6a-b8a5-480a1f70c25f</item>
                            <item name="Name" type_name="gh_string" type_code="10">bakeIt_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">bakeIt_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="Source" index="0" type_name="gh_guid" type_code="9">6640d40f-738b-4e19-916b-f427121ceddb</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">48d01794-d3d8-4aef-990e-127168822244</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>5458</X>
                                  <Y>1123</Y>
                                  <W>102</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>5518.5</X>
                                  <Y>1133</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="0">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10">...</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">22b67b9f-fa30-42bc-950a-58a7e18688b9</item>
                            <item name="Name" type_name="gh_string" type_code="10">out</item>
                            <item name="NickName" type_name="gh_string" type_code="10">readMe!</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>5590</X>
                                  <Y>963</Y>
                                  <W>86</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>5633</X>
                                  <Y>973</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="1">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10">A 3D plot of the input data as a colored mesh.  Multiple meshes will be output for several input data streams or graph scales.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">98627521-ec45-4691-9db1-d57c08d019bc</item>
                            <item name="Name" type_name="gh_string" type_code="10">graphMesh</item>
                            <item name="NickName" type_name="gh_string" type_code="10">graphMesh</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>5590</X>
                                  <Y>983</Y>
                                  <W>86</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>5633</X>
                                  <Y>993</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="2">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10">A list of curves and text surfaces representing the time periods corresponding to the input data.  Note that if the time period of the input data is not clear, no curves or labels will be generated here.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">60272993-3564-4d6b-97fe-e6964c1f63ff</item>
                            <item name="Name" type_name="gh_string" type_code="10">graphCurves</item>
                            <item name="NickName" type_name="gh_string" type_code="10">graphCurves</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>5590</X>
                                  <Y>1003</Y>
                                  <W>86</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>5633</X>
                                  <Y>1013</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="3">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10">A legend of the chart. Connect this output to a grasshopper "Geo" component in order to preview the legend in the Rhino scene.g</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">c5c80ca0-b354-42f7-8b4c-2d43c85a74ad</item>
                            <item name="Name" type_name="gh_string" type_code="10">legend</item>
                            <item name="NickName" type_name="gh_string" type_code="10">legend</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>5590</X>
                                  <Y>1023</Y>
                                  <W>86</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>5633</X>
                                  <Y>1033</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="4">
                          <items count="7">
                            <item name="Description" type_name="gh_string" type_code="10">The legend base point, which can be used to move the legend in relation to the chart with the native rasshopper "Move" component.</item>
                            <item name="Hidden" type_name="gh_bool" type_code="1">true</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">b6045db2-d933-474b-b62e-7a06062f35de</item>
                            <item name="Name" type_name="gh_string" type_code="10">legendBasePts</item>
                            <item name="NickName" type_name="gh_string" type_code="10">legendBasePts</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>5590</X>
                                  <Y>1043</Y>
                                  <W>86</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>5633</X>
                                  <Y>1053</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="5">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10">The title text of the chart.  Hook this up to a native Grasshopper 'Geo' component to preview it separately from the other outputs.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">2875ef01-dded-4f72-8dba-25bea87e79dc</item>
                            <item name="Name" type_name="gh_string" type_code="10">title</item>
                            <item name="NickName" type_name="gh_string" type_code="10">title</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>5590</X>
                                  <Y>1063</Y>
                                  <W>86</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>5633</X>
                                  <Y>1073</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="6">
                          <items count="7">
                            <item name="Description" type_name="gh_string" type_code="10">Points for placement of the title and axes labels of the chart, which can be used to move these text items in relation to the chart with the native Grasshopper "Move" component.</item>
                            <item name="Hidden" type_name="gh_bool" type_code="1">true</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">0cb00272-112d-457a-b6c6-5a01da21d364</item>
                            <item name="Name" type_name="gh_string" type_code="10">titleBasePts</item>
                            <item name="NickName" type_name="gh_string" type_code="10">titleBasePts</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>5590</X>
                                  <Y>1083</Y>
                                  <W>86</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>5633</X>
                                  <Y>1093</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="7">
                          <items count="7">
                            <item name="Description" type_name="gh_string" type_code="10">Points representing the location of each piece of data on the chart.  Use this to label the points of the chart with text lables using a native grasshopper "Text Tag" component.</item>
                            <item name="Hidden" type_name="gh_bool" type_code="1">true</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">170a8b15-23cf-41cf-a084-a705dddef175</item>
                            <item name="Name" type_name="gh_string" type_code="10">dataPts</item>
                            <item name="NickName" type_name="gh_string" type_code="10">dataPts</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>5590</X>
                                  <Y>1103</Y>
                                  <W>86</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>5633</X>
                                  <Y>1113</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="8">
                          <items count="7">
                            <item name="Description" type_name="gh_string" type_code="10">The input data for the hours of the year that pass the conditional statement.</item>
                            <item name="Hidden" type_name="gh_bool" type_code="1">true</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">81b8456e-210d-43fa-890a-354088d9cf3e</item>
                            <item name="Name" type_name="gh_string" type_code="10">conditionalHOY</item>
                            <item name="NickName" type_name="gh_string" type_code="10">conditionalHOY</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>5590</X>
                                  <Y>1123</Y>
                                  <W>86</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>5633</X>
                                  <Y>1133</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                      </chunks>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="49">
              <items count="3">
                <item name="GUID" type_name="gh_guid" type_code="9">410755b1-224a-4c1e-a407-bf32fb45ea7e</item>
                <item name="Lib" type_name="gh_guid" type_code="9">16cf80bc-9018-cbdb-2238-976eb17fd30d</item>
                <item name="Name" type_name="gh_string" type_code="10">Ladybug_Adaptive Comfort Calculator</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="11">
                    <item name="CodeInput" type_name="gh_string" type_code="10"># Adaptive Comfort Calculator
#
# Ladybug: A Plugin for Environmental Analysis (GPL) started by Mostapha Sadeghipour Roudsari
# 
# This file is part of Ladybug.
# 
# Copyright (c) 2013-2017, Chris Mackey &lt;Chris@MackeyArchitecture.com&gt; 
# Ladybug is free software; you can redistribute it and/or modify 
# it under the terms of the GNU General Public License as published 
# by the Free Software Foundation; either version 3 of the License, 
# or (at your option) any later version. 
# 
# Ladybug is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of 
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ladybug; If not, see &lt;http://www.gnu.org/licenses/&gt;.
# 
# @license GPL-3.0+ &lt;http://spdx.org/licenses/GPL-3.0+&gt;


"""
Use this component to calculate the adaptive comfort for a given set of input conditions.
This component will output a stream of 0's and 1's indicating whether certain conditions are comfortable given the prevailing mean monthly temperature that ocuppants tend to adapt themselves to.
This component will also output a series of interger numbers that indicate the following: -1 = The average monthly temperature is too extreme for the adaptive model. 0 = The input conditions are too cold for occupants. 1 = The input conditions are comfortable for occupants. 2 = The input conditions are too hot for occupants.
Lastly, this component outputs the percent of time comfortable, hot, cold and monthly extreme as well as a lit of numbers indicating the upper temperature of comfort and lower temperature of comfort.
_
The adaptive comfort model was created in response to the shortcomings of the PMV model that became apparent when it was applied to buildings without air conditioning.  Namely, the PMV model was over-estimating the discomfort of occupants in warm conditions of nautrally ventilated buildings.
Accordingly, the adaptive comfort model was built on the work of hundreds of field studies in which people in naturally ventilated buildings were asked asked about how comfortable they were.
Results showed that users tended to adapt themselves to the monthly mean temperature and would be comfortable in buildings so long as the building temperature remained around a value close to that monthly mean.  This situation held true so long as the monthly mean temperature remained above 10 C and below 33.5 C.
_
The comfort models that make this component possible were translated to python from a series of validated javascript comfort models coded at the Berkely Center for the Built Environment (CBE).  The Adaptive model used by both the CBE Tool and this component was originally published in ASHARAE 55.
Special thanks goes to the authors of the online CBE Thermal Comfort Tool who first coded the javascript: Hoyt Tyler, Schiavon Stefano, Piccioli Alberto, Moon Dustin, and Steinfeld Kyle. http://cbe.berkeley.edu/comforttool/
-
Provided by Ladybug 0.0.65
    
    Args:
        _dryBulbTemperature: A number representing the dry bulb temperature of the air in degrees Celcius.  This input can also accept a list of temperatures representing conditions at different times or the direct output of dryBulbTemperature from the Import EPW component.
        meanRadiantTemperature_: A number representing the mean radiant temperature of the surrounding surfaces in degrees Celcius.  If no value is plugged in here, this component will assume that the mean radiant temperature is equal to air temperature value above.  This input can also accept a list of temperatures representing conditions at different times or the direct output of dryBulbTemperature from the Import EPW component.
        _prevailingOutdoorTemp: A number representing the average monthly outdoor temperature in degrees Celcius.  This average monthly outdoor temperature is the temperature that occupants in naturally ventilated buildings tend to adapt themselves to. For this reason, this input can also accept the direct output of dryBulbTemperature from the Import EPW component if houlry values for the full year are connected for the other inputs of this component.
        windSpeed_: A number representing the wind speed of the air in meters per second.  If no value is plugged in here, this component will assume a very low wind speed of 0.3 m/s, characteristic of most naturally ventilated buildings.  This input can also accept a list of wind speeds representing conditions at different times or the direct output of windSpeed from of the Import EPW component.
        ------------------------------: ...
        comfortPar_: Optional comfort parameters from the "Ladybug_Adaptive Comfort Parameters" component.  Use this to select either the US or European comfort model, set the threshold of acceptibility for comfort or compute prevailing outdoor temperature by a monthly average or running mean.  These comfortPar can also be used to set a levelOfConditioning, which makes use of research outside of the official published standards that surveyed people in air conditioned buildings.
        analysisPeriod_: An optional analysis period from the Analysis Period component.  If no Analysis period is given and epw data from the ImportEPW component has been connected, the analysis will be run for the enitre year.
        _runIt: Set to "True" to run the component and calculate the adaptive comfort metrics.
    Returns:
        readMe!: ...
        ------------------------------: ...
        comfortableOrNot: A stream of 0's and 1's (or "False" and "True" values) indicating whether occupants are comfortable under the input conditions given the fact that these occupants tend to adapt themselves to the prevailing mean monthly temperature. 0 indicates that a person is not comfortable while 1 indicates that a person is comfortable.
        conditionOfPerson: A stream of interger values from -1 to +1 that correspond to each hour of the input data and indicate the following: -1 = The input conditions are too cold for occupants. 0 = The input conditions are comfortable for occupants. +1 = The input conditions are too hot for occupants.
        degreesFromTarget: A stream of temperature values in degrees Celcius indicating how far from the target temperature the conditions of the people are.  Positive values indicate conditions hotter than the target temperature while negative values indicate degrees below the target temperture.
        ------------------------------: ...
        targetTemperature: A stream of temperature values in degrees Celcius indicating the mean target temperture or neutral temperature that the most people will find comfortable.
        upperTemperatureBound: A stream of temperature values in degrees Celcius indicating the highest possible temperature in the comfort range for each hour of the input conditions.
        lowerTemperatureBound: A stream of temperature values in degrees Celcius indicating the lowest possible temperature in the comfort range for each hour of the input conditions.
        ------------------------------: ...
        percentOfTimeComfortable: The percent of the input data for which the occupants are comfortable.  Comfortable conditions are when the indoor temperature is within the comfort range determined by the prevailing outdoor temperature.
        percentHotCold: A list of 2 numerical values indicating the following: 0) The percent of the input data for which the occupants are too hot.  1) The percent of the input data for which the occupants are too cold.
        
"""
ghenv.Component.Name = "Ladybug_Adaptive Comfort Calculator"
ghenv.Component.NickName = 'AdaptiveComfortCalculator'
ghenv.Component.Message = 'VER 0.0.65\nJUL_28_2017'
ghenv.Component.IconDisplayMode = ghenv.Component.IconDisplayMode.application
ghenv.Component.Category = "Ladybug"
ghenv.Component.SubCategory = "1 | AnalyzeWeatherData"
#compatibleLBVersion = VER 0.0.60\nFEB_01_2015
try: ghenv.Component.AdditionalHelpFromDocStrings = "3"
except: pass


import Grasshopper.Kernel as gh
import math
import scriptcontext as sc


# Give people proper warning if they hook up data directly from the Import EPW component.
outdoorConditions = False
try:
    if _dryBulbTemperature[2] == "Dry Bulb Temperature":
        outdoorConditions = True
except: pass
try:
    if meanRadiantTemperature_[2] == "Dry Bulb Temperature" or meanRadiantTemperature_[2] == "Solar-Adjusted Mean Radiant Temperature":
        outdoorConditions = True
except: pass
try:
    if windSpeed_[2] == "Wind Speed":
        outdoorConditions = True
except: pass

if outdoorConditions == True:
    message1 = "Because the adaptive comfort model is derived from indoor comfort studies and you have hooked up outdoor data, the values out of this component only indicate how much\n" + \
    "the outdoor condtions should be changed in order to make indoor conditions comfortable. They do not idicate whether someone will actually be comfortable outdoors.\n" + \
    "If you are interested in whether the outdoors are actually comfortable, you should use the Ladybug Outdoor Comfort Calculator."
    print message1

ghenv.Component.Attributes.Owner.OnPingDocument()


def checkTheInputs():
    #Define a value that will indicate whether someone has hooked up epw data.
    epwData = False
    epwStr = []
    epwPrevailTemp = False
    epwPrevailStr = []
    coldTimes = []
    
    #Check to see if there are any comfortPar connected and, if not, set the defaults to ASHRAE.
    checkData6 = True
    ASHRAEorEN = True
    comfClass = False
    avgMonthOrRunMean = True
    levelOfConditioning = 0
    if comfortPar_ != []:
        try:
            ASHRAEorEN = comfortPar_[0]
            comfClass = comfortPar_[1]
            avgMonthOrRunMean = comfortPar_[2]
            levelOfConditioning = comfortPar_[3]
        except:
            checkData6 = False
            warning = 'The connected comfortPar_ are not valid comfort parameters from the "Ladybug_Adaptive Comfort Parameters" component.'
            print warning
            ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warning)
    
    #Define a function to duplicate data
    def duplicateData(data, calcLength):
        dupData = []
        for count in range(calcLength):
            dupData.append(data[0])
        return dupData
    
    #Check lenth of the _dryBulbTemperature list and evaluate the contents.
    checkData1 = False
    airTemp = []
    airMultVal = False
    if len(_dryBulbTemperature) != 0:
        try:
            if "Temperature" in _dryBulbTemperature[2]:
                airTemp = _dryBulbTemperature[7:]
                checkData1 = True
                epwData = True
                epwStr = _dryBulbTemperature[0:7]
        except: pass
        if checkData1 == False:
            for item in _dryBulbTemperature:
                try:
                    airTemp.append(float(item))
                    checkData1 = True
                except: checkData1 = False
        if len(airTemp) &gt; 1: airMultVal = True
        if checkData1 == False:
            warning = '_dryBulbTemperature input does not contain valid temperature values in degrees Celcius.'
            print warning
            ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warning)
    else:
        print 'Connect a temperature in degrees celcius for _dryBulbTemperature'
    
    #Check lenth of the meanRadiantTemperature_ list and evaluate the contents.
    checkData2 = False
    radTemp = []
    radMultVal = False
    if len(meanRadiantTemperature_) != 0:
        try:
            if "Temperature" in meanRadiantTemperature_[2]:
                radTemp = meanRadiantTemperature_[7:]
                checkData2 = True
                epwData = True
                epwStr = meanRadiantTemperature_[0:7]
        except: pass
        if checkData2 == False:
            for item in meanRadiantTemperature_:
                try:
                    radTemp.append(float(item))
                    checkData2 = True
                except: checkData2 = False
        if len(radTemp) &gt; 1: radMultVal = True
        if checkData2 == False:
            warning = 'meanRadiantTemperature_ input does not contain valid temperature values in degrees Celcius.'
            print warning
            ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warning)
    else:
        checkData2 = True
        radTemp = airTemp
        if len (radTemp) &gt; 1: radMultVal = True
        print 'No value connected for meanRadiantTemperature_.  It will be assumed that the radiant temperature is the same as the air temperature.'
    
    #Check lenth of the _prevailingOutdoorTemp list and evaluate the contents.
    checkData3 = False
    prevailTemp = []
    prevailMultVal = False
    if len(_prevailingOutdoorTemp) != 0:
        try:
            if _prevailingOutdoorTemp[2] == 'Dry Bulb Temperature' and _prevailingOutdoorTemp[3] == 'C' and _prevailingOutdoorTemp[4] == 'Hourly' and _prevailingOutdoorTemp[5] == (1, 1, 1) and _prevailingOutdoorTemp[6] == (12, 31, 24):
                if avgMonthOrRunMean == True:
                    #Calculate the monthly average temperatures.
                    monthPrevailList = [float(sum(_prevailingOutdoorTemp[7:751])/744), float(sum(_prevailingOutdoorTemp[751:1423])/672), float(sum(_prevailingOutdoorTemp[1423:2167])/744), float(sum(_prevailingOutdoorTemp[2167:2887])/720), float(sum(_prevailingOutdoorTemp[2887:3631])/744), float(sum(_prevailingOutdoorTemp[3631:4351])/720), float(sum(_prevailingOutdoorTemp[4351:5095])/744), float(sum(_prevailingOutdoorTemp[5095:5839])/744), float(sum(_prevailingOutdoorTemp[5839:6559])/720), float(sum(_prevailingOutdoorTemp[6559:7303])/744), float(sum(_prevailingOutdoorTemp[7303:8023])/720), float(sum(_prevailingOutdoorTemp[8023:])/744)]
                    hoursInMonth = [744, 672, 744, 720, 744, 720, 744, 744, 720, 744, 720, 744]
                    for monthCount, monthPrevailTemp in enumerate(monthPrevailList):
                        prevailTemp.extend(duplicateData([monthPrevailTemp], hoursInMonth[monthCount]))
                        if monthPrevailTemp &lt; 10: coldTimes.append(monthCount+1)
                else:
                    #Calculate a running mean temperature.
                    alpha = 0.8
                    divisor = 1 + alpha + math.pow(alpha,2) + math.pow(alpha,3) + math.pow(alpha,4) + math.pow(alpha,5)
                    dividend = (sum(_prevailingOutdoorTemp[-24:-1] + [_prevailingOutdoorTemp[-1]])/24) + (alpha*(sum(_prevailingOutdoorTemp[-48:-24])/24)) + (math.pow(alpha,2)*(sum(_prevailingOutdoorTemp[-72:-48])/24)) + (math.pow(alpha,3)*(sum(_prevailingOutdoorTemp[-96:-72])/24)) + (math.pow(alpha,4)*(sum(_prevailingOutdoorTemp[-120:-96])/24)) + (math.pow(alpha,5)*(sum(_prevailingOutdoorTemp[-144:-120])/24))
                    startingTemp = dividend/divisor
                    if startingTemp &lt; 10: coldTimes.append(0)
                    outdoorTemp = _prevailingOutdoorTemp[7:]
                    startingMean = sum(outdoorTemp[:24])/24
                    dailyRunMeans = [startingTemp]
                    dailyMeans = [startingMean]
                    prevailTemp.extend(duplicateData([startingTemp], 24))
                    startHour = 24
                    for count in range(364):
                        dailyMean = sum(outdoorTemp[startHour:startHour+24])/24
                        dailyRunMeanTemp = ((1-alpha)*dailyMeans[-1]) + alpha*dailyRunMeans[-1]
                        if dailyRunMeanTemp &lt; 10: coldTimes.append(count+1)
                        prevailTemp.extend(duplicateData([dailyRunMeanTemp], 24))
                        dailyRunMeans.append(dailyRunMeanTemp)
                        dailyMeans.append(dailyMean)
                        startHour +=24
                checkData3 = True
                epwPrevailTemp = True
                epwPrevailStr = _prevailingOutdoorTemp[0:7]
        except: pass
        if checkData3 == False:
            checkData3 = True
            for item in _prevailingOutdoorTemp:
                try:
                    prevailTemp.append(float(item))
                except: checkData3 = False
        if len(prevailTemp) &gt; 1: prevailMultVal = True
        if checkData3 == False:
            warning = '_prevailingOutdoorTemp input must either be the annual hourly dryBulbTemperature from the ImportEPW component, a list of temperature values that matches the length other inputs or a single temperature to be used for all cases.'
            print warning
            ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warning)
    else:
        print 'Connect a temperature in degrees celcius for _prevailingOutdoorTemp'
    
    #Check lenth of the windSpeed_ list and evaluate the contents.
    checkData4 = False
    windSpeed = []
    windMultVal = False
    nonPositive = True
    if len(windSpeed_) != 0:
        try:
            if windSpeed_[2] == 'Wind Speed':
                windSpeed = windSpeed_[7:]
                checkData4 = True
                epwData = True
                if epwStr == []:
                    epwStr = windSpeed_[0:7]
        except: pass
        if checkData4 == False:
            for item in windSpeed_:
                try:
                    if float(item) &gt;= 0:
                        windSpeed.append(float(item))
                        checkData4 = True
                    else: nonPositive = False
                except: checkData4 = False
        if nonPositive == False: checkData4 = False
        if len(windSpeed) &gt; 1: windMultVal = True
        if checkData4 == False:
            warning = 'windSpeed_ input does not contain valid wind speed in meters per second.  Note that wind speed must be positive.'
            print warning
            ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warning)
    else:
        checkData4 = True
        windSpeed = [0.05]
        print 'No value connected for windSpeed_.  It will be assumed that the wind speed is a low 0.05 m/s.'
    
    #Finally, for those lists of length greater than 1, check to make sure that they are all the same length.
    checkData5 = False
    if checkData1 == True and checkData2 == True and checkData3 == True and checkData4 == True:
        if airMultVal == True or radMultVal == True or prevailMultVal == True or windMultVal == True:
            listLenCheck = []
            secondListLenCheck = []
            if airMultVal == True:
                listLenCheck.append(len(airTemp))
                secondListLenCheck.append(len(airTemp))
            if radMultVal == True:
                listLenCheck.append(len(radTemp))
                secondListLenCheck.append(len(radTemp))
            if prevailMultVal == True: listLenCheck.append(len(prevailTemp))
            if windMultVal == True:
                listLenCheck.append(len(windSpeed))
                secondListLenCheck.append(len(windSpeed))
            
            if all(x == listLenCheck[0] for x in listLenCheck) == True:
                checkData5 = True
                calcLength = listLenCheck[0]
                
                if airMultVal == False: airTemp = duplicateData(airTemp, calcLength)
                if radMultVal == False: radTemp = duplicateData(radTemp, calcLength)
                if prevailMultVal == False: prevailTemp = duplicateData(prevailTemp, calcLength)
                if windMultVal == False: windSpeed = duplicateData(windSpeed, calcLength)
            elif all(x == secondListLenCheck[0] for x in secondListLenCheck) == True and epwPrevailTemp == True and epwData == True and epwPrevailStr[5] == (1,1,1) and epwPrevailStr[6] == (12,31,24):
                checkData5 = True
                calcLength = listLenCheck[0]
                
                if airMultVal == False: airTemp = duplicateData(airTemp, calcLength)
                if radMultVal == False: radTemp = duplicateData(radTemp, calcLength)
                if windMultVal == False: windSpeed = duplicateData(windSpeed, calcLength)
                HOYs, mon, days = lb_preparation.getHOYsBasedOnPeriod([epwStr[5], epwStr[6]], 1)
                newPrevailTemp = []
                for hour in HOYs:
                    newPrevailTemp.append(prevailTemp[hour-1])
                prevailTemp = newPrevailTemp
            else:
                calcLength = None
                warning = 'If you have put in lists with multiple values, the lengths of these lists must match across the parameters or you have a single value for a given parameter to be applied to all values in the list.'
                print warning
                ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warning)
        else:
            checkData5 = True
            calcLength = 1
    else:
        calcLength = 0
    
    #If all of the checkDatas have been good to go, let's give a final go ahead.
    if checkData1 == True and checkData2 == True and checkData3 == True and checkData4 == True and checkData5 == True and checkData6 == True:
        checkData = True
    else:
        checkData = False
    
    #Let's return everything we need.
    return checkData, epwData, epwStr, calcLength, airTemp, radTemp, prevailTemp, windSpeed, ASHRAEorEN, comfClass, avgMonthOrRunMean, coldTimes, levelOfConditioning


def main(checkData, epwData, epwStr, calcLength, airTemp, radTemp, prevailTemp, windSpeed, ASHRAEorEN, comfClass, avgMonthOrRunMean, coldTimes, levelOfConditioning, lb_preparation, lb_comfortModels):
    #Check if there is an analysisPeriod_ connected and, if not, run it for the whole year.
    individualCases = False
    daysForMonths = lb_preparation.numOfDays
    if calcLength == 8760 and len(analysisPeriod_)!=0:
        HOYS, months, days = lb_preparation.getHOYsBasedOnPeriod(analysisPeriod_, 1)
        runPeriod = analysisPeriod_
        calcLength = len(HOYS)
        dayNums = []
        for month in months:
            if days[0] == 1 and days[-1] == 31: dayNums.extend(range(daysForMonths[month-1], daysForMonths[month]))
            elif days[0] == 1 and days[-1] != 31: dayNums.extend(range(daysForMonths[month-1], daysForMonths[month-1]+days[-1]))
            elif days[0] != 1 and days[-1] == 31: dayNums.extend(range(daysForMonths[month-1]+days[0], daysForMonths[month]))
            else: dayNums.extend(range(daysForMonths[month-1]+days[0], daysForMonths[month-1]+days[-1]))
    elif epwData == True:
        HOYS = range(calcLength)[1:] + [calcLength]
        runPeriod = [epwStr[5], epwStr[6]]
        months = [1,2,3,4,5,6,7,8,9,10,11,12]
        dayNums = range(365)
        if calcLength != 8760 and len(analysisPeriod_) != 0:
            periodMsg = "You have connected an analysisPeriod_ for input data that is not for a full year. \n Your connected analysisPeriod_ will be ignored and the full stream of connected data will be run."
            print periodMsg
            ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, periodMsg)
    else:
        HOYS = range(calcLength)[1:] + [calcLength]
        runPeriod = [(1,1,1), (12,31,24)]
        months = []
        days = []
        individualCases = True
        if len(analysisPeriod_) != 0:
            periodMsg = "You have connected an analysisPeriod_ for input data that is not for a full year. \n Your connected analysisPeriod_ will be ignored and the full stream of connected data will be run."
            print periodMsg
            ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, periodMsg)
    
    #Check to see if there are any times when the prevailing temperature is too cold and give a comment that we are using a non-standard model.
    monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
    if ASHRAEorEN == True: modelName = "ASHRAE 55"
    else: modelName = "EN-15251"
    if coldTimes != []:
        coldThere = False
        if avgMonthOrRunMean == True:
            coldMsg = "The following months were too cold for the official " + modelName + " standard and have used a correlation from recent research:"
            for month in months:
                if month in coldTimes:
                    coldThere = True
                    coldMsg += '\n'
                    coldMsg += monthNames[month-1]
            if coldThere == True:
                print coldMsg
        else:
            totalColdInPeriod = []
            for day in dayNums:
                if day in coldTimes: totalColdInPeriod.append(day)
            if totalColdInPeriod != []:
                coldMsg = "There were " + str(len(totalColdInPeriod)) + " days of the analysis period when the outdoor temperatures were too cold for the official " + modelName + " standard. \n A correlation from recent research has been used in these cases."
                print coldMsg
    elif individualCases:
        totalColdInPeriod = []
        for temp in prevailTemp:
            if temp &lt; 10: totalColdInPeriod.append(temp)
        if totalColdInPeriod != []:
            coldMsg = "There were " + str(len(totalColdInPeriod)) + " cases when the prevailing outdoor temperatures were too cold for the official " + modelName + " standard. \n A correlation from recent research has been used in these cases."
            print coldMsg
    
    #If things are good, run it through the comfort model.
    comfortableOrNot = []
    extremeColdComfortableHot = []
    upperTemperatureBound = []
    lowerTemperatureBound = []
    targetTemperature = []
    degreesFromTarget = []
    percentOfTimeComfortable = None
    percentHotColdAndExtreme = []
    if checkData == True and epwData == True and 'for' not in epwStr[2]:
        targetTemperature.extend([epwStr[0], epwStr[1], 'Adaptive Target Temperature', 'C', epwStr[4], runPeriod[0], runPeriod[1]])
        degreesFromTarget.extend([epwStr[0], epwStr[1], 'Degrees from Target Temperature', 'C', epwStr[4], runPeriod[0], runPeriod[1]])
        comfortableOrNot.extend([epwStr[0], epwStr[1], 'Comfortable Or Not', 'Boolean', epwStr[4], runPeriod[0], runPeriod[1]])
        extremeColdComfortableHot.extend([epwStr[0], epwStr[1], 'Adaptive Comfort', '-1 = Cold, 0 = Comfortable, 1 = Hot', epwStr[4], runPeriod[0], runPeriod[1]])
        upperTemperatureBound.extend([epwStr[0], epwStr[1], 'Adaptive Upper Comfort Temperature', 'C', epwStr[4], runPeriod[0], runPeriod[1]])
        lowerTemperatureBound.extend([epwStr[0], epwStr[1], 'Adaptive Lower Comfort Temperature', 'C', epwStr[4], runPeriod[0], runPeriod[1]])
    elif checkData == True and epwData == True and 'for' in epwStr[2]:
        targetTemperature.extend([epwStr[0], epwStr[1], 'Adaptive Target Temperature' + ' for ' + epwStr[2].split('for ')[-1], 'C', epwStr[4], runPeriod[0], runPeriod[1]])
        degreesFromTarget.extend([epwStr[0], epwStr[1], 'Degrees from Target Temperature' + ' for ' + epwStr[2].split('for ')[-1], 'C', epwStr[4], runPeriod[0], runPeriod[1]])
        comfortableOrNot.extend([epwStr[0], epwStr[1], 'Comfortable Or Not' + ' for ' + epwStr[2].split('for ')[-1], 'Boolean', epwStr[4], runPeriod[0], runPeriod[1]])
        extremeColdComfortableHot.extend([epwStr[0], epwStr[1], 'Adaptive Comfort' + ' for ' + epwStr[2].split('for ')[-1], '-1 = Cold, 0 = Comfortable, 1 = Hot', epwStr[4], runPeriod[0], runPeriod[1]])
        upperTemperatureBound.extend([epwStr[0], epwStr[1], 'Adaptive Upper Comfort Temperature' + ' for ' + epwStr[2].split('for ')[-1], 'C', epwStr[4], runPeriod[0], runPeriod[1]])
        lowerTemperatureBound.extend([epwStr[0], epwStr[1], 'Adaptive Lower Comfort Temperature' + ' for ' + epwStr[2].split('for ')[-1], 'C', epwStr[4], runPeriod[0], runPeriod[1]])
    if checkData == True:
        try:
            comfOrNot = []
            extColdComfHot = []
            upperTemp = []
            lowerTemp = []
            comfortTemp = []
            degreesTarget = []
            for count in HOYS:
                # let the user cancel the process
                if gh.GH_Document.IsEscapeKeyDown(): assert False
                
                if ASHRAEorEN == True: comfTemp, distFromTarget, lowTemp, upTemp, comf, condition = lb_comfortModels.comfAdaptiveComfortASH55(airTemp[count-1], radTemp[count-1], prevailTemp[count-1], windSpeed[count-1], comfClass, levelOfConditioning)
                else: comfTemp, distFromTarget, lowTemp, upTemp, comf, condition = lb_comfortModels.comfAdaptiveComfortEN15251(airTemp[count-1], radTemp[count-1], prevailTemp[count-1], windSpeed[count-1], comfClass, levelOfConditioning)
                
                if comf == True:comfOrNot.append(1)
                else: comfOrNot.append(0)
                extColdComfHot.append(condition)
                upperTemp.append(upTemp)
                lowerTemp.append(lowTemp)
                comfortTemp.append(comfTemp)
                degreesTarget.append(distFromTarget)
            percentOfTimeComfortable = [((sum(comfOrNot))/calcLength)*100]
            extreme = []
            hot = []
            cold = []
            for item in extColdComfHot:
                if item == -1: cold.append(1.0)
                elif item == 1: hot.append(1.0)
                else: pass
            percentHot = ((sum(hot))/calcLength)*100
            percentCold = ((sum(cold))/calcLength)*100
            percentHotCold = [percentHot, percentCold]
            comfortableOrNot.extend(comfOrNot)
            extremeColdComfortableHot.extend(extColdComfHot)
            upperTemperatureBound.extend(upperTemp)
            lowerTemperatureBound.extend(lowerTemp)
            targetTemperature.extend(comfortTemp)
            degreesFromTarget.extend(degreesTarget)
        except:
            comfortableOrNot = []
            extremeColdComfortableHot = []
            upperTemperatureBound = []
            lowerTemperatureBound = []
            targetTemperature = []
            degreesFromTarget = []
            percentOfTimeComfortable = []
            percentHotCold = []
            print "The calculation has been terminated by the user!"
            e = gh.GH_RuntimeMessageLevel.Warning
            ghenv.Component.AddRuntimeMessage(e, "The calculation has been terminated by the user!")
    
    #Return all of the info.
    return comfortableOrNot, extremeColdComfortableHot, percentOfTimeComfortable, percentHotCold, upperTemperatureBound, lowerTemperatureBound, targetTemperature, degreesFromTarget



checkData = False
if sc.sticky.has_key('ladybug_release'):
    try:
        if not sc.sticky['ladybug_release'].isCompatible(ghenv.Component): pass
        if sc.sticky['ladybug_release'].isInputMissing(ghenv.Component): pass
    except:
        warning = "You need a newer version of Ladybug to use this compoent." + \
        "Use updateLadybug component to update userObjects.\n" + \
        "If you have already updated userObjects drag Ladybug_Ladybug component " + \
        "into canvas and try again."
        w = gh.GH_RuntimeMessageLevel.Warning
        ghenv.Component.AddRuntimeMessage(w, warning)
        
    lb_preparation = sc.sticky["ladybug_Preparation"]()
    lb_comfortModels = sc.sticky["ladybug_ComfortModels"]()
    
    #Check the inputs and organize the incoming data into streams that can be run throught the comfort model.
    checkData, epwData, epwStr, calcLength, airTemp, radTemp, prevailTemp, windSpeed, ASHRAEorEN, comfClass, avgMonthOrRunMean, coldTimes, levelOfConditioning = checkTheInputs()
else:
        print "You should first let the Ladybug fly..."
        w = gh.GH_RuntimeMessageLevel.Warning
        ghenv.Component.AddRuntimeMessage(w, "You should first let the Ladybug fly...")


if _runIt == True and checkData == True:
    results = main(checkData, epwData, epwStr, calcLength, airTemp, radTemp, prevailTemp, windSpeed, ASHRAEorEN, comfClass, avgMonthOrRunMean, coldTimes, levelOfConditioning, lb_preparation, lb_comfortModels)
    if results!=-1:
        comfortableOrNot, conditionOfPerson, percentOfTimeComfortable, \
        percentHotCold, upperTemperatureBound, lowerTemperatureBound, targetTemperature, degreesFromTarget = results



</item>
                    <item name="Description" type_name="gh_string" type_code="10">Use this component to calculate the adaptive comfort for a given set of input conditions.
This component will output a stream of 0's and 1's indicating whether certain conditions are comfortable given the prevailing mean monthly temperature that ocuppants tend to adapt themselves to.
This component will also output a series of interger numbers that indicate the following: -1 = The average monthly temperature is too extreme for the adaptive model. 0 = The input conditions are too cold for occupants. 1 = The input conditions are comfortable for occupants. 2 = The input conditions are too hot for occupants.
Lastly, this component outputs the percent of time comfortable, hot, cold and monthly extreme as well as a lit of numbers indicating the upper temperature of comfort and lower temperature of comfort.
_
The adaptive comfort model was created in response to the shortcomings of the PMV model that became apparent when it was applied to buildings without air conditioning.  Namely, the PMV model was over-estimating the discomfort of occupants in warm conditions of nautrally ventilated buildings.
Accordingly, the adaptive comfort model was built on the work of hundreds of field studies in which people in naturally ventilated buildings were asked asked about how comfortable they were.
Results showed that users tended to adapt themselves to the monthly mean temperature and would be comfortable in buildings so long as the building temperature remained around a value close to that monthly mean.  This situation held true so long as the monthly mean temperature remained above 10 C and below 33.5 C.
_
The comfort models that make this component possible were translated to python from a series of validated javascript comfort models coded at the Berkely Center for the Built Environment (CBE).  The Adaptive model used by both the CBE Tool and this component was originally published in ASHARAE 55.
Special thanks goes to the authors of the online CBE Thermal Comfort Tool who first coded the javascript: Hoyt Tyler, Schiavon Stefano, Piccioli Alberto, Moon Dustin, and Steinfeld Kyle. http://cbe.berkeley.edu/comforttool/
-
Provided by Ladybug 0.0.65</item>
                    <item name="EditorLocation" type_name="gh_drawing_point" type_code="30">
                      <X>1292</X>
                      <Y>44</Y>
                    </item>
                    <item name="EditorSize" type_name="gh_drawing_size" type_code="32">
                      <W>1264</W>
                      <H>1018</H>
                    </item>
                    <item name="Hidden" type_name="gh_bool" type_code="1">true</item>
                    <item name="HideInput" type_name="gh_bool" type_code="1">true</item>
                    <item name="HideOutput" type_name="gh_bool" type_code="1">false</item>
                    <item name="IconOverride" type_name="gh_drawing_bitmap" type_code="37">
                      <bitmap length="1244">iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOwQAADsEBuJFr7QAABH5JREFUSEuVlmtMm1UYx9+WshZsodAWWFeu5VqMDLdlLlmwIJWJKM7KgoZliWYYlqlL9sGB26pymZtjCtMNZ7c5RkSnu0icLiKSRRO/LCAfUIwm3j44ZBuX3gvt4/955WYdrvyT3/ue8zznnP95T8573leAHgJvgZOgFRwFpxdxCnSAN2fLi3N3og2IhT/ARUDgT9ANPgTvA7tKJumNi4sbl0gkF2bj4TIBhE5QD+4HteBVMC/LPaamXGvt9+s2mvtnQ8sRjy28B3jQbSAVNIJcIJjLNx+Pb/2SlPYh2lRSsotjyxQ/xbxBDTCBFqB7VH9X9aq610j4lkj5zgAVr767CfHl6hxfQg2adYKQtKF6+xnZueskfOohyUdjlFpW7uh/co0W+f9Vfn6+1WQyPdff369A9SzHQg3258sFc8YjNTeFy9MkXBiHiZeiO3+ijcWlXcgvqfT09Bq5XE4RERGk0+k6cOed+R+DfasjBEvmDtstZR+RcP4WTCZI+DxAaZu3U12CPANtbqsUQwovL+9EgtGATCbjXfgvg5WgITFSyC+t3f3j678GSfjEDRwk9BJl7Gi5+UKsoEabUD0LrqlUqkvgO6VSOWo0Giuxre2cZINXIqXSrV9serjRnJTUg7q6OFX3srnxJEX2OEjS46S4nW9QrlZ9iDuE6HkgzprRxMY+0NbWFsMJ6DJf2MCmkkq3OY0m2qPR+VEXZ3lvcfkWfcH6q1nmiq+a9u49QD53lc/ne4qI1nAe4qeeHxy4QCaY0zN8mTf4fVUG7Y7STKKOjfSPgkGvNeD3dAYCgWb/zEyDw+FqRvnj9vb2r5EOgMUGU0Ds63b7tqLdu1xeMDAY5ww0nHA4HC1+v/+ENxjMdrlcepfLf18wGNxgNpsrFQrF/MBYcyoqKhLLFoulFwN3eb3etycnJ3N4nNsZiPsdBgkej6cMjTv8/ulTKDei8+GKigo+u+YMAnq93jY4OPgYyn9pNBoaGRlZh4kUof9xxJZ+AqfT2eByee0wyBkfH1ejUzbKpsLCwp1I+wBJpdLp+hfr25CrsVqf+IFjVVVVQ5jIUcTyeJwln2B0dFSJJVqPmR/B/SwGP4alOo3OV2w220xUVJT4FHipyG63fzA8PFyJ+hjHwJmBgQHxeGGDfTFSafVEcha9FK/lI1bcRVNTzj0Y/CKwYOdIOMbCzOSgBOt+CdW5pfqtrq7u8e7u7r6CgoIg3gGyWq1Pc3v+HvAJ2lCvTaC10dFOlMWdgNka+H4HHQOiCV4ugnE1ziE+jcvAFiC0yqSSscPaxOlr+nQ6n2igHIWiF3E5J8MUHwlsMiLWFiS+aAdrYtREaXnkNmQRpeZSV4KeG/N6hqsDgPu0i7UFid+DQw1xWnHgG4ZMouRsuroyhRuL6xeGZOAXwH0e5MAiiQYHM1asoJ+TjaLJdFoOVati3IgnczIMrQU8+A0QzYFFEg1OgK48ufzIrnjNUKlS+RnqhZwIU/sBG4gnZ4jEDw7/ilwH/FfxDbgCePv1hckMYAN+u0Nygudvm2sj838+CtYAAAAASUVORK5CYII=</bitmap>
                    </item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">4739e9de-c09f-4543-91bb-dd9c3050ce88</item>
                    <item name="Name" type_name="gh_string" type_code="10">Ladybug_Adaptive Comfort Calculator</item>
                    <item name="NickName" type_name="gh_string" type_code="10">AdaptiveComfortCalculator</item>
                  </items>
                  <chunks count="2">
                    <chunk name="Attributes">
                      <items count="2">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>4301</X>
                          <Y>903</Y>
                          <W>316</W>
                          <H>244</H>
                        </item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>4457</X>
                          <Y>1025</Y>
                        </item>
                      </items>
                    </chunk>
                    <chunk name="ParameterData">
                      <items count="22">
                        <item name="InputCount" type_name="gh_int32" type_code="3">8</item>
                        <item name="InputId" index="0" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="1" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="2" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="3" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="4" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="5" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="6" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="7" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="OutputCount" type_name="gh_int32" type_code="3">12</item>
                        <item name="OutputId" index="0" type_name="gh_guid" type_code="9">3ede854e-c753-40eb-84cb-b48008f14fd4</item>
                        <item name="OutputId" index="1" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                        <item name="OutputId" index="2" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                        <item name="OutputId" index="3" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                        <item name="OutputId" index="4" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                        <item name="OutputId" index="5" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                        <item name="OutputId" index="6" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                        <item name="OutputId" index="7" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                        <item name="OutputId" index="8" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                        <item name="OutputId" index="9" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                        <item name="OutputId" index="10" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                        <item name="OutputId" index="11" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                      </items>
                      <chunks count="20">
                        <chunk name="InputParam" index="0">
                          <items count="12">
                            <item name="Access" type_name="gh_int32" type_code="3">1</item>
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">A number representing the dry bulb temperature of the air in degrees Celcius.  This input can also accept a list of temperatures representing conditions at different times or the direct output of dryBulbTemperature from the Import EPW component.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">b9ea31aa-9b6f-465f-a626-75d2f189b125</item>
                            <item name="Name" type_name="gh_string" type_code="10">_dryBulbTemperature</item>
                            <item name="NickName" type_name="gh_string" type_code="10">_dryBulbTemperature</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">1</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="Source" index="0" type_name="gh_guid" type_code="9">61eca3c9-11fa-45ec-a9ef-27756dc3919d</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">87f87f55-5b71-41f4-8aea-21d494016f81</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>4303</X>
                                  <Y>905</Y>
                                  <W>139</W>
                                  <H>30</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>4374</X>
                                  <Y>920</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="1">
                          <items count="12">
                            <item name="Access" type_name="gh_int32" type_code="3">1</item>
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">A number representing the mean radiant temperature of the surrounding surfaces in degrees Celcius.  If no value is plugged in here, this component will assume that the mean radiant temperature is equal to air temperature value above.  This input can also accept a list of temperatures representing conditions at different times or the direct output of dryBulbTemperature from the Import EPW component.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">66b23e76-7951-41cb-aa48-3f86da0fe514</item>
                            <item name="Name" type_name="gh_string" type_code="10">meanRadiantTemperature_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">meanRadiantTemperature_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">1</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="Source" index="0" type_name="gh_guid" type_code="9">07527f51-a56c-48d2-8147-1a5f15cfafce</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">87f87f55-5b71-41f4-8aea-21d494016f81</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>4303</X>
                                  <Y>935</Y>
                                  <W>139</W>
                                  <H>30</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>4374</X>
                                  <Y>950</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="2">
                          <items count="12">
                            <item name="Access" type_name="gh_int32" type_code="3">1</item>
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">A number representing the average monthly outdoor temperature in degrees Celcius.  This average monthly outdoor temperature is the temperature that occupants in naturally ventilated buildings tend to adapt themselves to. For this reason, this input can also accept the direct output of dryBulbTemperature from the Import EPW component if houlry values for the full year are connected for the other inputs of this component.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">69d123a1-0e0e-4fe9-9298-9e5463354740</item>
                            <item name="Name" type_name="gh_string" type_code="10">_prevailingOutdoorTemp</item>
                            <item name="NickName" type_name="gh_string" type_code="10">_prevailingOutdoorTemp</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">1</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="Source" index="0" type_name="gh_guid" type_code="9">3a8fcb76-7e1a-44af-9c29-a50ed245da54</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">87f87f55-5b71-41f4-8aea-21d494016f81</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>4303</X>
                                  <Y>965</Y>
                                  <W>139</W>
                                  <H>30</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>4374</X>
                                  <Y>980</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="3">
                          <items count="11">
                            <item name="Access" type_name="gh_int32" type_code="3">1</item>
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">A number representing the wind speed of the air in meters per second.  If no value is plugged in here, this component will assume a very low wind speed of 0.3 m/s, characteristic of most naturally ventilated buildings.  This input can also accept a list of wind speeds representing conditions at different times or the direct output of windSpeed from of the Import EPW component.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">9c94cc55-f03b-43f0-998e-e31e8580041d</item>
                            <item name="Name" type_name="gh_string" type_code="10">windSpeed_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">windSpeed_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">1</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">87f87f55-5b71-41f4-8aea-21d494016f81</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>4303</X>
                                  <Y>995</Y>
                                  <W>139</W>
                                  <H>30</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>4374</X>
                                  <Y>1010</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="4">
                          <items count="10">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">...</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">e413ebd9-f026-4824-ab67-c51ef239c039</item>
                            <item name="Name" type_name="gh_string" type_code="10">------------------------------</item>
                            <item name="NickName" type_name="gh_string" type_code="10">------------------------------</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">87f87f55-5b71-41f4-8aea-21d494016f81</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>4303</X>
                                  <Y>1025</Y>
                                  <W>139</W>
                                  <H>30</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>4374</X>
                                  <Y>1040</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="5">
                          <items count="11">
                            <item name="Access" type_name="gh_int32" type_code="3">1</item>
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Optional comfort parameters from the "Ladybug_Adaptive Comfort Parameters" component.  Use this to select either the US or European comfort model, set the threshold of acceptibility for comfort or compute prevailing outdoor temperature by a monthly average or running mean.  These comfortPar can also be used to set a levelOfConditioning, which makes use of research outside of the official published standards that surveyed people in air conditioned buildings.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">ff7eb3ca-aff4-472d-8628-f20c8f965269</item>
                            <item name="Name" type_name="gh_string" type_code="10">comfortPar_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">comfortPar_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">1</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">87f87f55-5b71-41f4-8aea-21d494016f81</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>4303</X>
                                  <Y>1055</Y>
                                  <W>139</W>
                                  <H>30</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>4374</X>
                                  <Y>1070</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="6">
                          <items count="11">
                            <item name="Access" type_name="gh_int32" type_code="3">1</item>
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">An optional analysis period from the Analysis Period component.  If no Analysis period is given and epw data from the ImportEPW component has been connected, the analysis will be run for the enitre year.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">318fe6ed-9946-4082-af98-09e056fcaca6</item>
                            <item name="Name" type_name="gh_string" type_code="10">analysisPeriod_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">analysisPeriod_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">1</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">87f87f55-5b71-41f4-8aea-21d494016f81</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>4303</X>
                                  <Y>1085</Y>
                                  <W>139</W>
                                  <H>30</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>4374</X>
                                  <Y>1100</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="7">
                          <items count="11">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Set to "True" to run the component and calculate the adaptive comfort metrics.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">3513cd69-e1b1-4113-98cd-8f7e3ce2c8d8</item>
                            <item name="Name" type_name="gh_string" type_code="10">_runIt</item>
                            <item name="NickName" type_name="gh_string" type_code="10">_runIt</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="Source" index="0" type_name="gh_guid" type_code="9">a4ee6c6f-c1a6-42eb-a12e-b7907b40102b</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">d60527f5-b5af-4ef6-8970-5f96fe412559</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>4303</X>
                                  <Y>1115</Y>
                                  <W>139</W>
                                  <H>30</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>4374</X>
                                  <Y>1130</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="0">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10">...</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">f9ea6e0d-9330-4f8b-b3a5-fbd86f219401</item>
                            <item name="Name" type_name="gh_string" type_code="10">out</item>
                            <item name="NickName" type_name="gh_string" type_code="10">readMe!</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>4472</X>
                                  <Y>905</Y>
                                  <W>143</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>4543.5</X>
                                  <Y>915</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="1">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10">...</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">51ba3e41-e561-4e1a-ac4d-766dba7977e6</item>
                            <item name="Name" type_name="gh_string" type_code="10">------------------------------</item>
                            <item name="NickName" type_name="gh_string" type_code="10">------------------------------</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>4472</X>
                                  <Y>925</Y>
                                  <W>143</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>4543.5</X>
                                  <Y>935</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="2">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10">A stream of 0's and 1's (or "False" and "True" values) indicating whether occupants are comfortable under the input conditions given the fact that these occupants tend to adapt themselves to the prevailing mean monthly temperature. 0 indicates that a person is not comfortable while 1 indicates that a person is comfortable.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">8468dac1-f50a-4776-9280-eb8643cfbb54</item>
                            <item name="Name" type_name="gh_string" type_code="10">comfortableOrNot</item>
                            <item name="NickName" type_name="gh_string" type_code="10">comfortableOrNot</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>4472</X>
                                  <Y>945</Y>
                                  <W>143</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>4543.5</X>
                                  <Y>955</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="3">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10">A stream of interger values from -1 to +1 that correspond to each hour of the input data and indicate the following: -1 = The input conditions are too cold for occupants. 0 = The input conditions are comfortable for occupants. +1 = The input conditions are too hot for occupants.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">5ab34ca9-6edd-4ceb-b751-46e3a55da4c9</item>
                            <item name="Name" type_name="gh_string" type_code="10">conditionOfPerson</item>
                            <item name="NickName" type_name="gh_string" type_code="10">conditionOfPerson</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>4472</X>
                                  <Y>965</Y>
                                  <W>143</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>4543.5</X>
                                  <Y>975</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="4">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10">A stream of temperature values in degrees Celcius indicating how far from the target temperature the conditions of the people are.  Positive values indicate conditions hotter than the target temperature while negative values indicate degrees below the target temperture.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">e3cb3566-801c-449c-bb1a-f9142954ffa9</item>
                            <item name="Name" type_name="gh_string" type_code="10">degreesFromTarget</item>
                            <item name="NickName" type_name="gh_string" type_code="10">degreesFromTarget</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>4472</X>
                                  <Y>985</Y>
                                  <W>143</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>4543.5</X>
                                  <Y>995</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="5">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10">Script variable AdaptiveComfortCalculator</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">6eb7c52e-65d1-4fea-9863-3d3c877d17d3</item>
                            <item name="Name" type_name="gh_string" type_code="10">------------------------------</item>
                            <item name="NickName" type_name="gh_string" type_code="10">------------------------------</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>4472</X>
                                  <Y>1005</Y>
                                  <W>143</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>4543.5</X>
                                  <Y>1015</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="6">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10">A stream of temperature values in degrees Celcius indicating the mean target temperture or neutral temperature that the most people will find comfortable.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">ddc95a7f-7fea-478c-b3cb-30da9d5fe129</item>
                            <item name="Name" type_name="gh_string" type_code="10">targetTemperature</item>
                            <item name="NickName" type_name="gh_string" type_code="10">targetTemperature</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>4472</X>
                                  <Y>1025</Y>
                                  <W>143</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>4543.5</X>
                                  <Y>1035</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="7">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10">A stream of temperature values in degrees Celcius indicating the highest possible temperature in the comfort range for each hour of the input conditions.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">e043f11d-3b39-4b58-a4c9-ffe879dae40a</item>
                            <item name="Name" type_name="gh_string" type_code="10">upperTemperatureBound</item>
                            <item name="NickName" type_name="gh_string" type_code="10">upperTemperatureBound</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>4472</X>
                                  <Y>1045</Y>
                                  <W>143</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>4543.5</X>
                                  <Y>1055</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="8">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10">A stream of temperature values in degrees Celcius indicating the lowest possible temperature in the comfort range for each hour of the input conditions.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">f5b63557-940f-4b26-90db-8d12a8b5692d</item>
                            <item name="Name" type_name="gh_string" type_code="10">lowerTemperatureBound</item>
                            <item name="NickName" type_name="gh_string" type_code="10">lowerTemperatureBound</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>4472</X>
                                  <Y>1065</Y>
                                  <W>143</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>4543.5</X>
                                  <Y>1075</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="9">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10">Script variable AdaptiveComfortCalculator</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">fddc4b42-b4db-4de8-999b-90b3b4f72d50</item>
                            <item name="Name" type_name="gh_string" type_code="10">------------------------------</item>
                            <item name="NickName" type_name="gh_string" type_code="10">------------------------------</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>4472</X>
                                  <Y>1085</Y>
                                  <W>143</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>4543.5</X>
                                  <Y>1095</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="10">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10">The percent of the input data for which the occupants are comfortable.  Comfortable conditions are when the indoor temperature is within the comfort range determined by the prevailing outdoor temperature.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">65d444d4-adb9-4dac-8abc-478a3ee5876c</item>
                            <item name="Name" type_name="gh_string" type_code="10">percentOfTimeComfortable</item>
                            <item name="NickName" type_name="gh_string" type_code="10">percentOfTimeComfortable</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>4472</X>
                                  <Y>1105</Y>
                                  <W>143</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>4543.5</X>
                                  <Y>1115</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="11">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10">A list of 2 numerical values indicating the following: 0) The percent of the input data for which the occupants are too hot.  1) The percent of the input data for which the occupants are too cold.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">b03b1062-3b4f-494a-94f6-727ecc8ab7f9</item>
                            <item name="Name" type_name="gh_string" type_code="10">percentHotCold</item>
                            <item name="NickName" type_name="gh_string" type_code="10">percentHotCold</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>4472</X>
                                  <Y>1125</Y>
                                  <W>143</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>4543.5</X>
                                  <Y>1135</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                      </chunks>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="50">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">59e0b89a-e487-49f8-bab8-b5bab16be14c</item>
                <item name="Name" type_name="gh_string" type_code="10">Panel</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="10">
                    <item name="Description" type_name="gh_string" type_code="10">A panel for custom notes and text values</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">6ebaaf68-d100-41ce-87d6-cc18624b34eb</item>
                    <item name="Name" type_name="gh_string" type_code="10">Panel</item>
                    <item name="NickName" type_name="gh_string" type_code="10"></item>
                    <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                    <item name="ScrollRatio" type_name="gh_double" type_code="6">0</item>
                    <item name="Source" index="0" type_name="gh_guid" type_code="9">65d444d4-adb9-4dac-8abc-478a3ee5876c</item>
                    <item name="Source" index="1" type_name="gh_guid" type_code="9">b03b1062-3b4f-494a-94f6-727ecc8ab7f9</item>
                    <item name="SourceCount" type_name="gh_int32" type_code="3">2</item>
                    <item name="UserText" type_name="gh_string" type_code="10">Double click to edit panel content…</item>
                  </items>
                  <chunks count="2">
                    <chunk name="Attributes">
                      <items count="5">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>4664</X>
                          <Y>1086</Y>
                          <W>160</W>
                          <H>100</H>
                        </item>
                        <item name="MarginLeft" type_name="gh_int32" type_code="3">0</item>
                        <item name="MarginRight" type_name="gh_int32" type_code="3">0</item>
                        <item name="MarginTop" type_name="gh_int32" type_code="3">0</item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>4664.473</X>
                          <Y>1086.015</Y>
                        </item>
                      </items>
                    </chunk>
                    <chunk name="PanelProperties">
                      <items count="6">
                        <item name="Colour" type_name="gh_drawing_color" type_code="36">
                          <ARGB>255;255;250;90</ARGB>
                        </item>
                        <item name="DrawIndices" type_name="gh_bool" type_code="1">true</item>
                        <item name="DrawPaths" type_name="gh_bool" type_code="1">true</item>
                        <item name="Multiline" type_name="gh_bool" type_code="1">true</item>
                        <item name="Stream" type_name="gh_bool" type_code="1">false</item>
                        <item name="Wrap" type_name="gh_bool" type_code="1">true</item>
                      </items>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="51">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">7f5c6c55-f846-4a08-9c9a-cfdc285cc6fe</item>
                <item name="Name" type_name="gh_string" type_code="10">Scribble</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="13">
                    <item name="Bold" type_name="gh_bool" type_code="1">true</item>
                    <item name="Ca" type_name="gh_drawing_pointf" type_code="31">
                      <X>3003.602</X>
                      <Y>-197.1017</Y>
                    </item>
                    <item name="Cb" type_name="gh_drawing_pointf" type_code="31">
                      <X>3153.211</X>
                      <Y>-197.1017</Y>
                    </item>
                    <item name="Cc" type_name="gh_drawing_pointf" type_code="31">
                      <X>3153.211</X>
                      <Y>-178.4127</Y>
                    </item>
                    <item name="Cd" type_name="gh_drawing_pointf" type_code="31">
                      <X>3003.602</X>
                      <Y>-178.4127</Y>
                    </item>
                    <item name="Description" type_name="gh_string" type_code="10">A quick note</item>
                    <item name="Font" type_name="gh_string" type_code="10">Microsoft Sans Serif</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">11f52929-26e9-4ae2-b9f7-50c289fa1bee</item>
                    <item name="Italic" type_name="gh_bool" type_code="1">false</item>
                    <item name="Name" type_name="gh_string" type_code="10">Scribble</item>
                    <item name="NickName" type_name="gh_string" type_code="10">Scribble</item>
                    <item name="Size" type_name="gh_single" type_code="5">25</item>
                    <item name="Text" type_name="gh_string" type_code="10">Visualization</item>
                  </items>
                  <chunks count="1">
                    <chunk name="Attributes">
                      <items count="2">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>2998.602</X>
                          <Y>-202.1017</Y>
                          <W>159.6094</W>
                          <H>28.68896</H>
                        </item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>3003.602</X>
                          <Y>-197.1017</Y>
                        </item>
                      </items>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="52">
              <items count="3">
                <item name="GUID" type_name="gh_guid" type_code="9">410755b1-224a-4c1e-a407-bf32fb45ea7e</item>
                <item name="Lib" type_name="gh_guid" type_code="9">16cf80bc-9018-cbdb-2238-976eb17fd30d</item>
                <item name="Name" type_name="gh_string" type_code="10">Ladybug_Legend Parameters</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="11">
                    <item name="CodeInput" type_name="gh_string" type_code="10"># This component makes a simple string for legend parameters
#
# Ladybug: A Plugin for Environmental Analysis (GPL) started by Mostapha Sadeghipour Roudsari
# 
# This file is part of Ladybug.
# 
# Copyright (c) 2013-2017, Mostapha Sadeghipour Roudsari &lt;mostapha@ladybug.tools&gt; 
# Ladybug is free software; you can redistribute it and/or modify 
# it under the terms of the GNU General Public License as published 
# by the Free Software Foundation; either version 3 of the License, 
# or (at your option) any later version. 
# 
# Ladybug is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of 
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ladybug; If not, see &lt;http://www.gnu.org/licenses/&gt;.
# 
# @license GPL-3.0+ &lt;http://spdx.org/licenses/GPL-3.0+&gt;


"""
Use this component to change the colors, numerical range, and/or number of divisions of any Ladybug legend along with the corresponding colored mesh that the legend refers to.
This component can also move a legend and change its scale.
Any Ladybug component that outputs a colored mesh and a legend will have an input that can accept Legend Parameters from this component.
This component particularly helpful in making the colors of Ladybug graphics consistent for a presentation or for synchonizing the numerical range and colors between Ladybug graphics.
-
Provided by Ladybug 0.0.65
    
    Args:
        lowBound_: A number representing the lower boundary of the legend's numerical range.  The default is set to the lowest value of the data stream that the legend refers to.
        highBound_: A number representing the higher boundary of the legend's numerical range. The default is set to the highest value of the data stream that the legend refers to.
        numSegments_: An interger representing the number of steps between the high and low boundary of the legend.  The default is set to 11 and any custom values put in here should always be greater than or equal to 2.
        customColors_: A list of colors that will be used to re-color the legend and the corresponding colored mesh(es).  The number of colors input here should match the numSegments_ value input above.  An easy way to generate a list of colors to input here is with the Grasshopper "Gradient" component and a Grasshopper "Series" component connected to the Gradient component's "t" input.  A bunch of Grasshopper "Swatch" components is another way to generate a list of custom colors.  The default colors are a gradient spectrum from blue to yellow to red.
        legendLocation_: Input a point here to change the location of the legend in the Rhino scene.  The default is usually set to the right of the legend's corresponding Ladybug graphic.
        legendScale_: Input a number here to change the scale of the legend in relation to its corresponding Ladybug graphic.  The default is set to 1.
        font_: An optional text string that sets the font of the text. Examples include "Arial", "Times New Roman" or "Courier" (all without quotations).  The text input here can be any font that is on your computer but the font must be of an Editable file type (as seen in the font folder off of your control panel).  Font files that are Print and Preview will not work.  If you wish to use a Bolded version of the font, include a ", Bold" at the end of the font name (example: "Arial, Bold").
        fontSize_: An optional number to set the size of the text in Rhino model units.
        decimalPlaces_: An interger representing the number of decimal places to make the legend values.  The default is set to 2 decimal places.
        removeLessThan_: Set to 'True' to have the "&lt;=" and "&gt;=" symbols removed from the legend.  The default is set to 'False' to have these symbols included.
    Returns:
        legendPar: A list of legend parameters to be plugged into any of the Ladybug components with a legend.
"""

ghenv.Component.Name = "Ladybug_Legend Parameters"
ghenv.Component.NickName = 'legendPar'
ghenv.Component.Message = 'VER 0.0.65\nJUL_28_2017'
ghenv.Component.IconDisplayMode = ghenv.Component.IconDisplayMode.application
ghenv.Component.Category = "Ladybug"
ghenv.Component.SubCategory = "5 | Extra"
#compatibleLBVersion = VER 0.0.59\nNOV_20_2015
try: ghenv.Component.AdditionalHelpFromDocStrings = "1"
except: pass



from clr import AddReference
AddReference('Grasshopper')
import Grasshopper.Kernel as gh
import scriptcontext as sc
import Rhino as rc
import System.Drawing.Text as textCollection


def getFontsList():
    fonts = []
    fontColletion = textCollection.InstalledFontCollection().Families
    
    for fontObj in fontColletion:
        fontName = fontObj.Name
        if fontName not in fonts: fonts.append(fontName.lower())
    fonts.sort()
    return fonts

def main(lowBound, highBound, numSegments, customColors, legendLocation, legendScale, font, fontSize, decimalPlaces, removeLessThan):
    if len(customColors) != 1:
        if lowBound: lowBound = float(lowBound)
        if highBound: highBound = float(highBound)
        if numSegments: numSegments = int(numSegments)
        if legendScale: legendScale = float(legendScale)
        bold = False
        if font!= None:
            if font.upper().endswith(', BOLD') or font.upper().endswith(',BOLD'):
                bold = True
                font = font.split(',')[0]
            fonts = getFontsList()
            if font.lower() not in fonts:
                msg = "Cannot find input font " + font + "."
                w = gh.GH_RuntimeMessageLevel.Warning
                ghenv.Component.AddRuntimeMessage(w, msg)
                font = None 
        if lowBound and highBound and float(lowBound) &gt; float(highBound):
            legendPar = [highBound, lowBound, numSegments, customColors, legendLocation, legendScale]
        else:
            legendPar = [lowBound, highBound, numSegments, customColors, legendLocation, legendScale]
        
        legendPar.extend([font, fontSize, bold, decimalPlaces, removeLessThan])
        return legendPar
    else:
        return -1

legendPar = main(lowBound_, highBound_, numSegments_, customColors_, legendLocation_, legendScale_, font_, fontSize_, decimalPlaces_, removeLessThan_)
ghenv.Component.Params.Output[0].Hidden = True
if legendPar == -1:
    warning = "You should connect at least two colors to customColors input."
    print warning
    w = gh.GH_RuntimeMessageLevel.Warning
    ghenv.Component.AddRuntimeMessage(w, warning)
    legendPar = []</item>
                    <item name="Description" type_name="gh_string" type_code="10">Use this component to change the colors, numerical range, and/or number of divisions of any Ladybug legend along with the corresponding colored mesh that the legend refers to.
This component can also move a legend and change its scale.
Any Ladybug component that outputs a colored mesh and a legend will have an input that can accept Legend Parameters from this component.
This component particularly helpful in making the colors of Ladybug graphics consistent for a presentation or for synchonizing the numerical range and colors between Ladybug graphics.
-
Provided by Ladybug 0.0.65</item>
                    <item name="EditorLocation" type_name="gh_drawing_point" type_code="30">
                      <X>465</X>
                      <Y>63</Y>
                    </item>
                    <item name="EditorSize" type_name="gh_drawing_size" type_code="32">
                      <W>1233</W>
                      <H>987</H>
                    </item>
                    <item name="Hidden" type_name="gh_bool" type_code="1">true</item>
                    <item name="HideInput" type_name="gh_bool" type_code="1">true</item>
                    <item name="HideOutput" type_name="gh_bool" type_code="1">true</item>
                    <item name="IconOverride" type_name="gh_drawing_bitmap" type_code="37">
                      <bitmap length="1005">iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOwQAADsEBuJFr7QAAA49JREFUSEu9lF1Ik1EYx9++oLQUStSr+UGazg2dhtKVXehFd3VRmVmpXWQW9qVFBPYBFX4E3VhexFtmM7SWY+qaOl1NQstBGkwTTC2wWbjZeKcxSp+e52zLo61oXfSHH+9z3vO85/+e53wI/0VdUYrCbpmyySRT1OFT7JYpGvB5GwRhpTdlI7LNE/6DaFCTTAlLiIqf5QzOIQ1IEWsFKn8Gz2SxLs5gLfIYuc1ageovDEgnkEeeMEDpNynFp2FK4DEFJ7u83aTrXqhUgetNmuL467Qk42CaQjegSmrGp2EwVfGQm8FqZJ0n/Ae5CxOrXYeiJHe+/KO7cMuHrwVxjm+H5W/h4k+DXchVJIi1AtWXnATRuU8OPNKBWL5El5DLyGekEWlbRjuiQyqRLchS+TNw7sJFXpwB6V5FRQWQent7wWq1gtvtBqfTCXNzcyBJEtTW1kJQUBBWlm2IRX3bHS1+3x0NPBIaeLtJVgTy8vJAp9PB/Pw8jI2NQU1NDajVahBFEQwGAzMnxcfHk0ku+5Jkz1WeRSzTOUnP7TnKbnuuom8+P1nv7Y5AaP8fRAqRUfrburo6GsSAFCCnkGuIND4+DjabjfqGkD2IIKTWD51MUQ+ZU+qtBlX9UJtKbe3GWCMA8CXyqcvlcvkMlm/brenp6fwsatjb8Cd2MVzrAJ5gjcSX6B7iO8V/MkhSqVTMQC6XU38texvXOCHGNb0HnljNqAtnsIIlCMJe5I4nFIycwU1kDUI7Zz8ybbFYYHaWrjHhHUJl/Y1BIzPwlSgaueUJBePU1BT09PSwMmRnZ0NWVhYUFxeDw+Fgf0+zwLwjnnRUgs52K7HFBonNtq9RLeMSxQkt9k/ebhJdE3QGEpGGvr4+NtByjYyMQFhYGA1+BVlUROWrY5GVLzsiq15qIyr7NeEV/frIGxa6nn2iGWzwhMLTmZkZ0Gq1NBDExMQwcP+7sW1C0ihpiYKP60UEllCkcQlNsMqbshkp9oRC+x8W2b9CSjvF0DIj8ASfN/O7iHYDXQUPkAHuHNA1QYtbjmxH/MuvwYUXPgM6aHSQ8ktKSmB4eBgWFhaAFlqv17PFpncZGRlkuIM++EX+DNafNs16u0nViL68vJwtZmtrK5jNZpicnISJiQl2F2VmZpLBTpa9XCGlHUdDz3S2bSgzPsbBG0PKOnWhpZ33uXNAH95FqpCHSD2HGmlGSpD/LUH4ATTQZDBhuyEjAAAAAElFTkSuQmCC</bitmap>
                    </item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">35f5bbf5-d03e-4d1e-95ff-ad7e35bd9d39</item>
                    <item name="Name" type_name="gh_string" type_code="10">Ladybug_Legend Parameters</item>
                    <item name="NickName" type_name="gh_string" type_code="10">legendPar</item>
                  </items>
                  <chunks count="2">
                    <chunk name="Attributes">
                      <items count="2">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>5097</X>
                          <Y>993</Y>
                          <W>201</W>
                          <H>204</H>
                        </item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>5222</X>
                          <Y>1095</Y>
                        </item>
                      </items>
                    </chunk>
                    <chunk name="ParameterData">
                      <items count="13">
                        <item name="InputCount" type_name="gh_int32" type_code="3">10</item>
                        <item name="InputId" index="0" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="1" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="2" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="3" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="4" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="5" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="6" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="7" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="8" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="9" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="OutputCount" type_name="gh_int32" type_code="3">1</item>
                        <item name="OutputId" index="0" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                      </items>
                      <chunks count="11">
                        <chunk name="InputParam" index="0">
                          <items count="10">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">A number representing the lower boundary of the legend's numerical range.  The default is set to the lowest value of the data stream that the legend refers to.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">b9ad0a0a-5514-4f9b-84c6-6a40e6d91ed4</item>
                            <item name="Name" type_name="gh_string" type_code="10">lowBound_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">lowBound_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">87f87f55-5b71-41f4-8aea-21d494016f81</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>5099</X>
                                  <Y>995</Y>
                                  <W>108</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>5162.5</X>
                                  <Y>1005</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="1">
                          <items count="10">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">A number representing the higher boundary of the legend's numerical range. The default is set to the highest value of the data stream that the legend refers to.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">4556d8b2-1b95-4ec0-a3ef-b6c3224221aa</item>
                            <item name="Name" type_name="gh_string" type_code="10">highBound_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">highBound_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">87f87f55-5b71-41f4-8aea-21d494016f81</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>5099</X>
                                  <Y>1015</Y>
                                  <W>108</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>5162.5</X>
                                  <Y>1025</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="2">
                          <items count="11">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">An interger representing the number of steps between the high and low boundary of the legend.  The default is set to 11 and any custom values put in here should always be greater than or equal to 2.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">5236a20d-e351-49af-92ea-61ea7dc974bd</item>
                            <item name="Name" type_name="gh_string" type_code="10">numSegments_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">numSegments_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="Source" index="0" type_name="gh_guid" type_code="9">b41f0967-24d4-4422-bb26-773a920ac1b4</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">48d01794-d3d8-4aef-990e-127168822244</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>5099</X>
                                  <Y>1035</Y>
                                  <W>108</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>5162.5</X>
                                  <Y>1045</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="3">
                          <items count="13">
                            <item name="Access" type_name="gh_int32" type_code="3">1</item>
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">A list of colors that will be used to re-color the legend and the corresponding colored mesh(es).  The number of colors input here should match the numSegments_ value input above.  An easy way to generate a list of colors to input here is with the Grasshopper "Gradient" component and a Grasshopper "Series" component connected to the Gradient component's "t" input.  A bunch of Grasshopper "Swatch" components is another way to generate a list of custom colors.  The default colors are a gradient spectrum from blue to yellow to red.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">b1288929-a2f6-439e-aa7e-a60551b90676</item>
                            <item name="Mapping" type_name="gh_int32" type_code="3">1</item>
                            <item name="Name" type_name="gh_string" type_code="10">customColors_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">customColors_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">1</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="Source" index="0" type_name="gh_guid" type_code="9">444176a1-3d6b-49cb-8101-3a55e5838268</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">24b1d1a3-ab79-498c-9e44-c5b14607c4d3</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>5099</X>
                                  <Y>1055</Y>
                                  <W>108</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>5162.5</X>
                                  <Y>1065</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="4">
                          <items count="10">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Input a point here to change the location of the legend in the Rhino scene.  The default is usually set to the right of the legend's corresponding Ladybug graphic.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">106002c7-e53d-465c-9c54-0cf1b7879176</item>
                            <item name="Name" type_name="gh_string" type_code="10">legendLocation_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">legendLocation_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">e1937b56-b1da-4c12-8bd8-e34ee81746ef</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>5099</X>
                                  <Y>1075</Y>
                                  <W>108</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>5162.5</X>
                                  <Y>1085</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="5">
                          <items count="10">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Input a number here to change the scale of the legend in relation to its corresponding Ladybug graphic.  The default is set to 1.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">506e83a4-b99b-4db1-9763-f6fce1f1c2f9</item>
                            <item name="Name" type_name="gh_string" type_code="10">legendScale_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">legendScale_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">39fbc626-7a01-46ab-a18e-ec1c0c41685b</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>5099</X>
                                  <Y>1095</Y>
                                  <W>108</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>5162.5</X>
                                  <Y>1105</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="6">
                          <items count="10">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">An optional text string that sets the font of the text. Examples include "Arial", "Times New Roman" or "Courier" (all without quotations).  The text input here can be any font that is on your computer but the font must be of an Editable file type (as seen in the font folder off of your control panel).  Font files that are Print and Preview will not work.  If you wish to use a Bolded version of the font, include a ", Bold" at the end of the font name (example: "Arial, Bold").</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">7e81f144-30ce-4f65-9e3e-184a000d14f4</item>
                            <item name="Name" type_name="gh_string" type_code="10">font_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">font_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">37261734-eec7-4f50-b6a8-b8d1f3c4396b</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>5099</X>
                                  <Y>1115</Y>
                                  <W>108</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>5162.5</X>
                                  <Y>1125</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="7">
                          <items count="10">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">An optional number to set the size of the text in Rhino model units.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">a1bc568f-b9c0-4386-a05a-6ce43418bfbc</item>
                            <item name="Name" type_name="gh_string" type_code="10">fontSize_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">fontSize_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">39fbc626-7a01-46ab-a18e-ec1c0c41685b</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>5099</X>
                                  <Y>1135</Y>
                                  <W>108</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>5162.5</X>
                                  <Y>1145</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="8">
                          <items count="10">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">An interger representing the number of decimal places to make the legend values.  The default is set to 2 decimal places.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">0d4f6edc-a70b-4461-9b58-5bcd5d892e67</item>
                            <item name="Name" type_name="gh_string" type_code="10">decimalPlaces_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">decimalPlaces_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">48d01794-d3d8-4aef-990e-127168822244</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>5099</X>
                                  <Y>1155</Y>
                                  <W>108</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>5162.5</X>
                                  <Y>1165</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="9">
                          <items count="10">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Set to 'True' to have the "&lt;=" and "&gt;=" symbols removed from the legend.  The default is set to 'False' to have these symbols included.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">09278421-d434-4fd6-8487-f5e648b31d41</item>
                            <item name="Name" type_name="gh_string" type_code="10">removeLessThan_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">removeLessThan_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">d60527f5-b5af-4ef6-8970-5f96fe412559</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>5099</X>
                                  <Y>1175</Y>
                                  <W>108</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>5162.5</X>
                                  <Y>1185</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="0">
                          <items count="7">
                            <item name="Description" type_name="gh_string" type_code="10">A list of legend parameters to be plugged into any of the Ladybug components with a legend.</item>
                            <item name="Hidden" type_name="gh_bool" type_code="1">true</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">731db906-5ec1-4367-ab54-83509d053a46</item>
                            <item name="Name" type_name="gh_string" type_code="10">legendPar</item>
                            <item name="NickName" type_name="gh_string" type_code="10">legendPar</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>5237</X>
                                  <Y>995</Y>
                                  <W>59</W>
                                  <H>200</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>5266.5</X>
                                  <Y>1095</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                      </chunks>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="53">
              <items count="3">
                <item name="GUID" type_name="gh_guid" type_code="9">410755b1-224a-4c1e-a407-bf32fb45ea7e</item>
                <item name="Lib" type_name="gh_guid" type_code="9">16cf80bc-9018-cbdb-2238-976eb17fd30d</item>
                <item name="Name" type_name="gh_string" type_code="10">Ladybug_Gradient Library</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="11">
                    <item name="CodeInput" type_name="gh_string" type_code="10">#Color Gradient Library
#
# Ladybug: A Plugin for Environmental Analysis (GPL) started by Mostapha Sadeghipour Roudsari
# 
# This file is part of Ladybug.
# 
# Copyright (c) 2013-2017, Chris Mackey &lt;Chris@MackeyArchitecture.com&gt;
# Ladybug is free software; you can redistribute it and/or modify 
# it under the terms of the GNU General Public License as published 
# by the Free Software Foundation; either version 3 of the License, 
# or (at your option) any later version. 
# 
# Ladybug is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of 
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ladybug; If not, see &lt;http://www.gnu.org/licenses/&gt;.
# 
# @license GPL-3.0+ &lt;http://spdx.org/licenses/GPL-3.0+&gt;


"""
Use this component to access a library of typical gradients useful throughout Ladybug.  The output from this component should be plugged into the customColors_ input of the "Ladybug_Legend Parameters" component.
_
For an image of each of the gardients in the library, check here:
https://github.com/mostaphaRoudsari/ladybug/blob/master/resources/gradients.jpg
-
Provided by Ladybug 0.0.65
    
    Args:
        _gradIndex: An index refering to one of the following possible gradients:
            0 - Orignal Ladybug
            1 - Nuanced Ladybug
            2 - Multi-colored Ladybug
            3 - View Analysis 1
            4 - View Analysis 2 (Red,Green,Blue)
            5 - Sunlight Hours
            6 - Ecotect
            7 - Thermal Comfort Percentage
            8 - Thermal Comfort Colors
            9 - Thermal Comfort Colors (UTCI)
            10 - Hot Hours
            11 - Cold Hours
            12 - Shade Benefit/Harm
            13 - Thermal Comfort Colors v2 (UTCI)
            14 - Shade Harm
            15 - Shade Benefit
            16 - Black to White
            17 - CFD Colors 1
            18 - CFD Colors 2
            19 - Energy Balance
            20 - THERM
            21 - Cloud Cover
            22 - Glare Potential
            23 - Radiation Benefit
    Returns:
        customColors: A series of colors to be plugged into the "Ladybug_Legend Parameters" component.
"""

ghenv.Component.Name = "Ladybug_Gradient Library"
ghenv.Component.NickName = 'GradientLibrary'
ghenv.Component.Message = 'VER 0.0.65\nJUL_28_2017'
ghenv.Component.IconDisplayMode = ghenv.Component.IconDisplayMode.application
ghenv.Component.Category = "Ladybug"
ghenv.Component.SubCategory = "5 | Extra"
#compatibleLBVersion = VER 0.0.59\nSEP_21_2015
try: ghenv.Component.AdditionalHelpFromDocStrings = "1"
except: pass

import scriptcontext as sc
import Grasshopper.Kernel as gh

def main(gradIndex):
    if sc.sticky.has_key('ladybug_release'):
        try:
            if not sc.sticky['ladybug_release'].isCompatible(ghenv.Component): return -1
            if sc.sticky['ladybug_release'].isInputMissing(ghenv.Component): return -1
        except:
            warning = "You need a newer version of Ladybug to use this compoent." + \
            "Use updateLadybug component to update userObjects.\n" + \
            "If you have already updated userObjects drag Ladybug_Ladybug component " + \
            "into canvas and try again."
            w = gh.GH_RuntimeMessageLevel.Warning
            ghenv.Component.AddRuntimeMessage(w, warning)
            return -1
        
        lb_visualization = sc.sticky["ladybug_ResultVisualization"]()
        
        colors = lb_visualization.gradientLibrary[_gradIndex]
        return colors
    else:
        print "You should first let the Ladybug fly..."
        w = gh.GH_RuntimeMessageLevel.Warning
        ghenv.Component.AddRuntimeMessage(w, "You should first let the Ladybug fly...")
        return -1

if _gradIndex &gt;=0 and _gradIndex &lt;=23:
    result = main(_gradIndex)
    if result != -1: customColors = result
elif _gradIndex != None:
    print "_gradIndex must be between 0 and 23."
    w = gh.GH_RuntimeMessageLevel.Warning
    ghenv.Component.AddRuntimeMessage(w, "_gradIndex must be between 0 ans 22")</item>
                    <item name="Description" type_name="gh_string" type_code="10">Use this component to access a library of typical gradients useful throughout Ladybug.  The output from this component should be plugged into the customColors_ input of the "Ladybug_Legend Parameters" component.
_
For an image of each of the gardients in the library, check here:
https://github.com/mostaphaRoudsari/ladybug/blob/master/resources/gradients.jpg
-
Provided by Ladybug 0.0.65</item>
                    <item name="EditorLocation" type_name="gh_drawing_point" type_code="30">
                      <X>64</X>
                      <Y>191</Y>
                    </item>
                    <item name="EditorSize" type_name="gh_drawing_size" type_code="32">
                      <W>1261</W>
                      <H>880</H>
                    </item>
                    <item name="Hidden" type_name="gh_bool" type_code="1">true</item>
                    <item name="HideInput" type_name="gh_bool" type_code="1">true</item>
                    <item name="HideOutput" type_name="gh_bool" type_code="1">true</item>
                    <item name="IconOverride" type_name="gh_drawing_bitmap" type_code="37">
                      <bitmap length="726">iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOwQAADsEBuJFr7QAAAnhJREFUSEvtzU9Ik3Ecx/GfMNeD8CQWsos+aqHP49wzTSvKpgjqTnM9kMegQ7WiW38eDIrMMqiTBgZT8qBgSoqOpazNHUZhJuSh0qC0/MMvdOk03d/806cfi+rSJahO+8Dr8v0e3uS/zGazJZ8ghPsd9v5DWT/ZWm3J7EaIlCd1ZZZUU91hM9UdsVBdmZVRqK5SoZJZoYeZSotCzTUWaqmpolariSrWEqocFalizqFKNVPGlDIljJ6RcmhBbm5XPCDkyr4d9T6QlimQ9nmQvhUQVxRJvhhM4xu4+W4bg4vAiwDF24APH1fbsR5UsRmqwPZcIbZHi7HlMOKL3YDYDT22zkpYMEsozhR88UBWnuzRXvWC3H0D0vYepOcTyKN1JHmDKH0exvXJGBx0A6P+GUz4vZhdakNg5SIiq+WITRsRe1qEaJ+M0L0CBOvzEbWJmK8SsV/I8vwKXBkGaZ4EaZ0G6V4EcX5G0vAaSkeDqJ+IYGA+hmcLH/B6YRgz/lYsLV9AKFCOyJQRkSdFCPfKWG8pwNq1fIRPi5hLBBKBRCARSAT+fsDo0TSMgNjnQDr8II4wiPcryAhgegXcmgUerwIvQ0uYCY1gOdqB2EYdsFkBLBYC4/uAQSNw3wA06oFzIlbMIg78COzZK43tOtkM/nwn+Lpu8A0D4O8MYWfTEA7aXTjT4cbtXg/s/T3o7G/CQ8dlOJ3H4XYegueBAZ4WI9yNBrgu6eE6lQ/3MQl9JgkGQRiLB2S9vlZM51UxjVPFVIbXfpeiUbM5japj0rQaNVXLqbyWV1M0aSqnSWcyVE4rqFwKwzOpzG4mXVD5jGxVlvW18cC/GyHfAJHq2Krs6RPEAAAAAElFTkSuQmCC</bitmap>
                    </item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">6c99783e-ca40-497b-8322-27b60eee139c</item>
                    <item name="Name" type_name="gh_string" type_code="10">Ladybug_Gradient Library</item>
                    <item name="NickName" type_name="gh_string" type_code="10">GradientLibrary</item>
                  </items>
                  <chunks count="2">
                    <chunk name="Attributes">
                      <items count="2">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>4844</X>
                          <Y>1051</Y>
                          <W>170</W>
                          <H>28</H>
                        </item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>4921</X>
                          <Y>1065</Y>
                        </item>
                      </items>
                    </chunk>
                    <chunk name="ParameterData">
                      <items count="4">
                        <item name="InputCount" type_name="gh_int32" type_code="3">1</item>
                        <item name="InputId" index="0" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="OutputCount" type_name="gh_int32" type_code="3">1</item>
                        <item name="OutputId" index="0" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                      </items>
                      <chunks count="2">
                        <chunk name="InputParam" index="0">
                          <items count="11">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">An index refering to one of the following possible gradients:
0 - Orignal Ladybug
1 - Nuanced Ladybug
2 - Multi-colored Ladybug
3 - View Analysis 1
4 - View Analysis 2 (Red,Green,Blue)
5 - Sunlight Hours
6 - Ecotect
7 - Thermal Comfort Percentage
8 - Thermal Comfort Colors
9 - Thermal Comfort Colors (UTCI)
10 - Hot Hours
11 - Cold Hours
12 - Shade Benefit/Harm
13 - Thermal Comfort Colors v2 (UTCI)
14 - Shade Harm
15 - Shade Benefit
16 - Black to White
17 - CFD Colors 1
18 - CFD Colors 2
19 - Energy Balance
20 - THERM
21 - Cloud Cover
22 - Glare Potential
23 - Radiation Benefit</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">cf6bbee3-85c5-42f1-9fc1-ee4a8583ba9f</item>
                            <item name="Name" type_name="gh_string" type_code="10">_gradIndex</item>
                            <item name="NickName" type_name="gh_string" type_code="10">_gradIndex</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="Source" index="0" type_name="gh_guid" type_code="9">188161ce-7d0f-4541-a70a-0aa7589bd5f2</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">48d01794-d3d8-4aef-990e-127168822244</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>4846</X>
                                  <Y>1053</Y>
                                  <W>60</W>
                                  <H>24</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>4877.5</X>
                                  <Y>1065</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="0">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10">A series of colors to be plugged into the "Ladybug_Legend Parameters" component.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">444176a1-3d6b-49cb-8101-3a55e5838268</item>
                            <item name="Name" type_name="gh_string" type_code="10">customColors</item>
                            <item name="NickName" type_name="gh_string" type_code="10">customColors</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>4936</X>
                                  <Y>1053</Y>
                                  <W>76</W>
                                  <H>24</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>4974</X>
                                  <Y>1065</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                      </chunks>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="54">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">59e0b89a-e487-49f8-bab8-b5bab16be14c</item>
                <item name="Name" type_name="gh_string" type_code="10">Panel</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="8">
                    <item name="Description" type_name="gh_string" type_code="10">A panel for custom notes and text values</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">188161ce-7d0f-4541-a70a-0aa7589bd5f2</item>
                    <item name="Name" type_name="gh_string" type_code="10">Panel</item>
                    <item name="NickName" type_name="gh_string" type_code="10"></item>
                    <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                    <item name="ScrollRatio" type_name="gh_double" type_code="6">0</item>
                    <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                    <item name="UserText" type_name="gh_string" type_code="10">0</item>
                  </items>
                  <chunks count="2">
                    <chunk name="Attributes">
                      <items count="5">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>4773</X>
                          <Y>1055</Y>
                          <W>50</W>
                          <H>20</H>
                        </item>
                        <item name="MarginLeft" type_name="gh_int32" type_code="3">0</item>
                        <item name="MarginRight" type_name="gh_int32" type_code="3">0</item>
                        <item name="MarginTop" type_name="gh_int32" type_code="3">0</item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>4773.448</X>
                          <Y>1055.431</Y>
                        </item>
                      </items>
                    </chunk>
                    <chunk name="PanelProperties">
                      <items count="6">
                        <item name="Colour" type_name="gh_drawing_color" type_code="36">
                          <ARGB>255;255;250;90</ARGB>
                        </item>
                        <item name="DrawIndices" type_name="gh_bool" type_code="1">true</item>
                        <item name="DrawPaths" type_name="gh_bool" type_code="1">true</item>
                        <item name="Multiline" type_name="gh_bool" type_code="1">true</item>
                        <item name="Stream" type_name="gh_bool" type_code="1">false</item>
                        <item name="Wrap" type_name="gh_bool" type_code="1">true</item>
                      </items>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="55">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">2e78987b-9dfb-42a2-8b76-3923ac8bd91a</item>
                <item name="Name" type_name="gh_string" type_code="10">Boolean Toggle</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="7">
                    <item name="Description" type_name="gh_string" type_code="10">Boolean (true/false) toggle</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">a4ee6c6f-c1a6-42eb-a12e-b7907b40102b</item>
                    <item name="Name" type_name="gh_string" type_code="10">Boolean Toggle</item>
                    <item name="NickName" type_name="gh_string" type_code="10">Toggle</item>
                    <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                    <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                    <item name="ToggleValue" type_name="gh_bool" type_code="1">true</item>
                  </items>
                  <chunks count="1">
                    <chunk name="Attributes">
                      <items count="1">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>4142</X>
                          <Y>1118</Y>
                          <W>104</W>
                          <H>22</H>
                        </item>
                      </items>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="56">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">59e0b89a-e487-49f8-bab8-b5bab16be14c</item>
                <item name="Name" type_name="gh_string" type_code="10">Panel</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="8">
                    <item name="Description" type_name="gh_string" type_code="10">A panel for custom notes and text values</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">b41f0967-24d4-4422-bb26-773a920ac1b4</item>
                    <item name="Name" type_name="gh_string" type_code="10">Panel</item>
                    <item name="NickName" type_name="gh_string" type_code="10"></item>
                    <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                    <item name="ScrollRatio" type_name="gh_double" type_code="6">0</item>
                    <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                    <item name="UserText" type_name="gh_string" type_code="10">3</item>
                  </items>
                  <chunks count="2">
                    <chunk name="Attributes">
                      <items count="5">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>5020</X>
                          <Y>1035</Y>
                          <W>50</W>
                          <H>20</H>
                        </item>
                        <item name="MarginLeft" type_name="gh_int32" type_code="3">0</item>
                        <item name="MarginRight" type_name="gh_int32" type_code="3">0</item>
                        <item name="MarginTop" type_name="gh_int32" type_code="3">0</item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>5020.107</X>
                          <Y>1035.198</Y>
                        </item>
                      </items>
                    </chunk>
                    <chunk name="PanelProperties">
                      <items count="6">
                        <item name="Colour" type_name="gh_drawing_color" type_code="36">
                          <ARGB>255;255;250;90</ARGB>
                        </item>
                        <item name="DrawIndices" type_name="gh_bool" type_code="1">true</item>
                        <item name="DrawPaths" type_name="gh_bool" type_code="1">true</item>
                        <item name="Multiline" type_name="gh_bool" type_code="1">true</item>
                        <item name="Stream" type_name="gh_bool" type_code="1">false</item>
                        <item name="Wrap" type_name="gh_bool" type_code="1">true</item>
                      </items>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="57">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">59e0b89a-e487-49f8-bab8-b5bab16be14c</item>
                <item name="Name" type_name="gh_string" type_code="10">Panel</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="8">
                    <item name="Description" type_name="gh_string" type_code="10">A panel for custom notes and text values</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">b19c3f14-60c8-43f2-a7c5-e302e58cab46</item>
                    <item name="Name" type_name="gh_string" type_code="10">Panel</item>
                    <item name="NickName" type_name="gh_string" type_code="10"></item>
                    <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                    <item name="ScrollRatio" type_name="gh_double" type_code="6">0</item>
                    <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                    <item name="UserText" type_name="gh_string" type_code="10">.25</item>
                  </items>
                  <chunks count="2">
                    <chunk name="Attributes">
                      <items count="5">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>5368</X>
                          <Y>1003</Y>
                          <W>50</W>
                          <H>21</H>
                        </item>
                        <item name="MarginLeft" type_name="gh_int32" type_code="3">0</item>
                        <item name="MarginRight" type_name="gh_int32" type_code="3">0</item>
                        <item name="MarginTop" type_name="gh_int32" type_code="3">0</item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>5368.639</X>
                          <Y>1003.165</Y>
                        </item>
                      </items>
                    </chunk>
                    <chunk name="PanelProperties">
                      <items count="6">
                        <item name="Colour" type_name="gh_drawing_color" type_code="36">
                          <ARGB>255;255;250;90</ARGB>
                        </item>
                        <item name="DrawIndices" type_name="gh_bool" type_code="1">true</item>
                        <item name="DrawPaths" type_name="gh_bool" type_code="1">true</item>
                        <item name="Multiline" type_name="gh_bool" type_code="1">true</item>
                        <item name="Stream" type_name="gh_bool" type_code="1">false</item>
                        <item name="Wrap" type_name="gh_bool" type_code="1">true</item>
                      </items>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="58">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">59e0b89a-e487-49f8-bab8-b5bab16be14c</item>
                <item name="Name" type_name="gh_string" type_code="10">Panel</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="8">
                    <item name="Description" type_name="gh_string" type_code="10">A panel for custom notes and text values</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">1af5c0c9-dfa8-4ad8-9366-07943eaa5d2a</item>
                    <item name="Name" type_name="gh_string" type_code="10">Panel</item>
                    <item name="NickName" type_name="gh_string" type_code="10"></item>
                    <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                    <item name="ScrollRatio" type_name="gh_double" type_code="6">0</item>
                    <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                    <item name="UserText" type_name="gh_string" type_code="10">0</item>
                  </items>
                  <chunks count="2">
                    <chunk name="Attributes">
                      <items count="5">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>5369</X>
                          <Y>1043</Y>
                          <W>50</W>
                          <H>20</H>
                        </item>
                        <item name="MarginLeft" type_name="gh_int32" type_code="3">0</item>
                        <item name="MarginRight" type_name="gh_int32" type_code="3">0</item>
                        <item name="MarginTop" type_name="gh_int32" type_code="3">0</item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>5369.239</X>
                          <Y>1043.055</Y>
                        </item>
                      </items>
                    </chunk>
                    <chunk name="PanelProperties">
                      <items count="6">
                        <item name="Colour" type_name="gh_drawing_color" type_code="36">
                          <ARGB>255;255;250;90</ARGB>
                        </item>
                        <item name="DrawIndices" type_name="gh_bool" type_code="1">true</item>
                        <item name="DrawPaths" type_name="gh_bool" type_code="1">true</item>
                        <item name="Multiline" type_name="gh_bool" type_code="1">true</item>
                        <item name="Stream" type_name="gh_bool" type_code="1">false</item>
                        <item name="Wrap" type_name="gh_bool" type_code="1">true</item>
                      </items>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="59">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">2e78987b-9dfb-42a2-8b76-3923ac8bd91a</item>
                <item name="Name" type_name="gh_string" type_code="10">Boolean Toggle</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="7">
                    <item name="Description" type_name="gh_string" type_code="10">Boolean (true/false) toggle</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">6640d40f-738b-4e19-916b-f427121ceddb</item>
                    <item name="Name" type_name="gh_string" type_code="10">Boolean Toggle</item>
                    <item name="NickName" type_name="gh_string" type_code="10">Toggle</item>
                    <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                    <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                    <item name="ToggleValue" type_name="gh_bool" type_code="1">true</item>
                  </items>
                  <chunks count="1">
                    <chunk name="Attributes">
                      <items count="1">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>5299</X>
                          <Y>1122</Y>
                          <W>104</W>
                          <H>22</H>
                        </item>
                      </items>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="60">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">c552a431-af5b-46a9-a8a4-0fcbc27ef596</item>
                <item name="Name" type_name="gh_string" type_code="10">Group</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="8">
                    <item name="Border" type_name="gh_int32" type_code="3">1</item>
                    <item name="Colour" type_name="gh_drawing_color" type_code="36">
                      <ARGB>150;170;135;255</ARGB>
                    </item>
                    <item name="Description" type_name="gh_string" type_code="10">A group of Grasshopper objects</item>
                    <item name="ID" index="0" type_name="gh_guid" type_code="9">8741d683-dfa5-47c1-a755-e1063bfc8fb4</item>
                    <item name="ID_Count" type_name="gh_int32" type_code="3">1</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">04a397fe-309e-4937-9c7c-2bf46d7ee54d</item>
                    <item name="Name" type_name="gh_string" type_code="10">Group</item>
                    <item name="NickName" type_name="gh_string" type_code="10">ceiling</item>
                  </items>
                  <chunks count="1">
                    <chunk name="Attributes" />
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="61">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">c552a431-af5b-46a9-a8a4-0fcbc27ef596</item>
                <item name="Name" type_name="gh_string" type_code="10">Group</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="8">
                    <item name="Border" type_name="gh_int32" type_code="3">1</item>
                    <item name="Colour" type_name="gh_drawing_color" type_code="36">
                      <ARGB>150;170;135;255</ARGB>
                    </item>
                    <item name="Description" type_name="gh_string" type_code="10">A group of Grasshopper objects</item>
                    <item name="ID" index="0" type_name="gh_guid" type_code="9">ed13e53a-5fa2-4cff-bdd0-881d36ee4a07</item>
                    <item name="ID_Count" type_name="gh_int32" type_code="3">1</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">eeb63f2e-ffa3-4aea-9969-3b8178fbc576</item>
                    <item name="Name" type_name="gh_string" type_code="10">Group</item>
                    <item name="NickName" type_name="gh_string" type_code="10">floor</item>
                  </items>
                  <chunks count="1">
                    <chunk name="Attributes" />
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="62">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">c552a431-af5b-46a9-a8a4-0fcbc27ef596</item>
                <item name="Name" type_name="gh_string" type_code="10">Group</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="8">
                    <item name="Border" type_name="gh_int32" type_code="3">1</item>
                    <item name="Colour" type_name="gh_drawing_color" type_code="36">
                      <ARGB>150;170;135;255</ARGB>
                    </item>
                    <item name="Description" type_name="gh_string" type_code="10">A group of Grasshopper objects</item>
                    <item name="ID" index="0" type_name="gh_guid" type_code="9">909270b8-3801-4aed-b3ca-b323a623afaf</item>
                    <item name="ID_Count" type_name="gh_int32" type_code="3">1</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">c72e5e49-d9a8-489e-9585-7ad6b984d45b</item>
                    <item name="Name" type_name="gh_string" type_code="10">Group</item>
                    <item name="NickName" type_name="gh_string" type_code="10"></item>
                  </items>
                  <chunks count="1">
                    <chunk name="Attributes" />
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="63">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">c552a431-af5b-46a9-a8a4-0fcbc27ef596</item>
                <item name="Name" type_name="gh_string" type_code="10">Group</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="8">
                    <item name="Border" type_name="gh_int32" type_code="3">1</item>
                    <item name="Colour" type_name="gh_drawing_color" type_code="36">
                      <ARGB>150;170;135;255</ARGB>
                    </item>
                    <item name="Description" type_name="gh_string" type_code="10">A group of Grasshopper objects</item>
                    <item name="ID" index="0" type_name="gh_guid" type_code="9">9df83d65-eabc-406d-af4a-2946d33213df</item>
                    <item name="ID_Count" type_name="gh_int32" type_code="3">1</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">538790c0-b483-4af7-974b-8da637763d9d</item>
                    <item name="Name" type_name="gh_string" type_code="10">Group</item>
                    <item name="NickName" type_name="gh_string" type_code="10"></item>
                  </items>
                  <chunks count="1">
                    <chunk name="Attributes" />
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="64">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">919e146f-30ae-4aae-be34-4d72f555e7da</item>
                <item name="Name" type_name="gh_string" type_code="10">Brep</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="7">
                    <item name="Description" type_name="gh_string" type_code="10">Contains a collection of Breps (Boundary REPresentations)</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">9df83d65-eabc-406d-af4a-2946d33213df</item>
                    <item name="Locked" type_name="gh_bool" type_code="1">true</item>
                    <item name="Name" type_name="gh_string" type_code="10">Brep</item>
                    <item name="NickName" type_name="gh_string" type_code="10">3windowwall</item>
                    <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                    <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                  </items>
                  <chunks count="2">
                    <chunk name="Attributes">
                      <items count="2">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>210</X>
                          <Y>1333</Y>
                          <W>50</W>
                          <H>24</H>
                        </item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>235.672</X>
                          <Y>1345.686</Y>
                        </item>
                      </items>
                    </chunk>
                    <chunk name="PersistentData">
                      <items count="1">
                        <item name="Count" type_name="gh_int32" type_code="3">1</item>
                      </items>
                      <chunks count="1">
                        <chunk name="Branch" index="0">
                          <items count="2">
                            <item name="Count" type_name="gh_int32" type_code="3">1</item>
                            <item name="Path" type_name="gh_string" type_code="10">{0}</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Item" index="0">
                              <items count="1">
                                <item name="RefID" type_name="gh_guid" type_code="9">604b9f66-7255-4a7a-bc48-17253e890c48</item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                      </chunks>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="65">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">919e146f-30ae-4aae-be34-4d72f555e7da</item>
                <item name="Name" type_name="gh_string" type_code="10">Brep</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="7">
                    <item name="Description" type_name="gh_string" type_code="10">Contains a collection of Breps (Boundary REPresentations)</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">909270b8-3801-4aed-b3ca-b323a623afaf</item>
                    <item name="Locked" type_name="gh_bool" type_code="1">true</item>
                    <item name="Name" type_name="gh_string" type_code="10">Brep</item>
                    <item name="NickName" type_name="gh_string" type_code="10">wall</item>
                    <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                    <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                  </items>
                  <chunks count="2">
                    <chunk name="Attributes">
                      <items count="2">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>259</X>
                          <Y>1530</Y>
                          <W>50</W>
                          <H>24</H>
                        </item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>284.8898</X>
                          <Y>1542.927</Y>
                        </item>
                      </items>
                    </chunk>
                    <chunk name="PersistentData">
                      <items count="1">
                        <item name="Count" type_name="gh_int32" type_code="3">1</item>
                      </items>
                      <chunks count="1">
                        <chunk name="Branch" index="0">
                          <items count="2">
                            <item name="Count" type_name="gh_int32" type_code="3">3</item>
                            <item name="Path" type_name="gh_string" type_code="10">{0}</item>
                          </items>
                          <chunks count="3">
                            <chunk name="Item" index="0">
                              <items count="1">
                                <item name="RefID" type_name="gh_guid" type_code="9">cd79a333-02a8-4c4f-bd70-7297ad164412</item>
                              </items>
                            </chunk>
                            <chunk name="Item" index="1">
                              <items count="1">
                                <item name="RefID" type_name="gh_guid" type_code="9">a3e56e4e-9fef-463d-9319-08c11b222fb1</item>
                              </items>
                            </chunk>
                            <chunk name="Item" index="2">
                              <items count="1">
                                <item name="RefID" type_name="gh_guid" type_code="9">9dd1309c-50cd-4e54-8049-afd51cd883e9</item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                      </chunks>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="66">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">919e146f-30ae-4aae-be34-4d72f555e7da</item>
                <item name="Name" type_name="gh_string" type_code="10">Brep</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="7">
                    <item name="Description" type_name="gh_string" type_code="10">Contains a collection of Breps (Boundary REPresentations)</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">8741d683-dfa5-47c1-a755-e1063bfc8fb4</item>
                    <item name="Locked" type_name="gh_bool" type_code="1">true</item>
                    <item name="Name" type_name="gh_string" type_code="10">Brep</item>
                    <item name="NickName" type_name="gh_string" type_code="10">ceiling</item>
                    <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                    <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                  </items>
                  <chunks count="2">
                    <chunk name="Attributes">
                      <items count="2">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>234</X>
                          <Y>1731</Y>
                          <W>50</W>
                          <H>24</H>
                        </item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>259.3416</X>
                          <Y>1743.339</Y>
                        </item>
                      </items>
                    </chunk>
                    <chunk name="PersistentData">
                      <items count="1">
                        <item name="Count" type_name="gh_int32" type_code="3">1</item>
                      </items>
                      <chunks count="1">
                        <chunk name="Branch" index="0">
                          <items count="2">
                            <item name="Count" type_name="gh_int32" type_code="3">1</item>
                            <item name="Path" type_name="gh_string" type_code="10">{0}</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Item" index="0">
                              <items count="1">
                                <item name="RefID" type_name="gh_guid" type_code="9">1b07cc82-9a5c-44de-964f-7e0ca4dbdd1a</item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                      </chunks>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="67">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">919e146f-30ae-4aae-be34-4d72f555e7da</item>
                <item name="Name" type_name="gh_string" type_code="10">Brep</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="7">
                    <item name="Description" type_name="gh_string" type_code="10">Contains a collection of Breps (Boundary REPresentations)</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">ed13e53a-5fa2-4cff-bdd0-881d36ee4a07</item>
                    <item name="Locked" type_name="gh_bool" type_code="1">true</item>
                    <item name="Name" type_name="gh_string" type_code="10">Brep</item>
                    <item name="NickName" type_name="gh_string" type_code="10">floor</item>
                    <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                    <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                  </items>
                  <chunks count="2">
                    <chunk name="Attributes">
                      <items count="2">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>230</X>
                          <Y>1893</Y>
                          <W>50</W>
                          <H>24</H>
                        </item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>255.8803</X>
                          <Y>1905.766</Y>
                        </item>
                      </items>
                    </chunk>
                    <chunk name="PersistentData">
                      <items count="1">
                        <item name="Count" type_name="gh_int32" type_code="3">1</item>
                      </items>
                      <chunks count="1">
                        <chunk name="Branch" index="0">
                          <items count="2">
                            <item name="Count" type_name="gh_int32" type_code="3">1</item>
                            <item name="Path" type_name="gh_string" type_code="10">{0}</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Item" index="0">
                              <items count="1">
                                <item name="RefID" type_name="gh_guid" type_code="9">50ec1e42-8ce2-4747-9d02-4b52a6b855ef</item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                      </chunks>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="68">
              <items count="3">
                <item name="GUID" type_name="gh_guid" type_code="9">410755b1-224a-4c1e-a407-bf32fb45ea7e</item>
                <item name="Lib" type_name="gh_guid" type_code="9">16cf80bc-9018-cbdb-2238-976eb17fd30d</item>
                <item name="Name" type_name="gh_string" type_code="10">Honeybee_createHBSrfs</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="11">
                    <item name="CodeInput" type_name="gh_string" type_code="10">#
# Honeybee: A Plugin for Environmental Analysis (GPL) started by Mostapha Sadeghipour Roudsari
# 
# This file is part of Honeybee.
# 
# Copyright (c) 2013-2017, Mostapha Sadeghipour Roudsari &lt;mostapha@ladybug.tools&gt; 
# Honeybee is free software; you can redistribute it and/or modify 
# it under the terms of the GNU General Public License as published 
# by the Free Software Foundation; either version 3 of the License, 
# or (at your option) any later version. 
# 
# Honeybee is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of 
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Honeybee; If not, see &lt;http://www.gnu.org/licenses/&gt;.
# 
# @license GPL-3.0+ &lt;http://spdx.org/licenses/GPL-3.0+&gt;


"""
Create a Honeybee surface, which can be plugged into the "Run Daylight Sumilation" component or combined with other surfaces to make HBZones with the "createHBZones" component.
-
Provided by Honeybee 0.0.62

    Args:
        _geometry: List of Breps
        srfName_: Optional name for surface
        srfType_: Optional input for surface type &gt;
            0- 'WALL'
            0.5- 'UndergroundWall'
            1- 'ROOF'
            1.5- 'UndergroundCeiling'
            2- 'FLOOR'
            2.25- 'UndergroundSlab'
            2.5- 'SlabOnGrade'
            2.75- 'ExposedFloor'
            3- 'CEILING'
            4- 'AIRWALL'
            5- 'WINDOW'
            6- 'SHADING'
        EPBC_: 'Ground', 'Adiabatic', 'Outdoors'
        _EPConstruction_: Optional EnergyPlus construction
        _RADMaterial_: Optional Radiance Material
    Returns:
        readMe!:...
        HBZone: A Honeybee Surface, which can be plugged into the "Run Daylight Sumilation" component or combined with other surfaces to make HBZones with the "createHBZones" component.
"""

import rhinoscriptsyntax as rs
import Rhino as rc
import scriptcontext as sc
import os
import sys
import System
import Grasshopper.Kernel as gh
import uuid

ghenv.Component.Name = 'Honeybee_createHBSrfs'
ghenv.Component.NickName = 'createHBSrfs'
ghenv.Component.Message = 'VER 0.0.62\nJUL_28_2017'
ghenv.Component.IconDisplayMode = ghenv.Component.IconDisplayMode.application
ghenv.Component.Category = "Honeybee"
ghenv.Component.SubCategory = "00 | Honeybee"
#compatibleHBVersion = VER 0.0.57\nNOV_04_2016
#compatibleLBVersion = VER 0.0.59\nFEB_01_2015
try: ghenv.Component.AdditionalHelpFromDocStrings = "3"
except: pass


tolerance = sc.doc.ModelAbsoluteTolerance
import math


def main(geometry, srfName, srfType, EPBC, EPConstruction, RADMaterial):
    # import the classes
    if sc.sticky.has_key('honeybee_release'):

        try:
            if not sc.sticky['honeybee_release'].isCompatible(ghenv.Component): return -1
            if sc.sticky['honeybee_release'].isInputMissing(ghenv.Component): return -1
        except:
            warning = "You need a newer version of Honeybee to use this compoent." + \
            "Use updateHoneybee component to update userObjects.\n" + \
            "If you have already updated userObjects drag Honeybee_Honeybee component " + \
            "into canvas and try again."
            w = gh.GH_RuntimeMessageLevel.Warning
            ghenv.Component.AddRuntimeMessage(w, warning)
            return -1
            
        # don't customize this part
        hb_EPZone = sc.sticky["honeybee_EPZone"]
        hb_EPSrf = sc.sticky["honeybee_EPSurface"]
        hb_EPZoneSurface = sc.sticky["honeybee_EPZoneSurface"]
        hb_EPFenSurface = sc.sticky["honeybee_EPFenSurface"]
        hb_RADMaterialAUX = sc.sticky["honeybee_RADMaterialAUX"]
        hb_EPObjectsAux = sc.sticky["honeybee_EPObjectsAUX"]()
        
    else:
        print "You should first let Honeybee to fly..."
        w = gh.GH_RuntimeMessageLevel.Warning
        ghenv.Component.AddRuntimeMessage(w, "You should first let Honeybee to fly...")
        return
    
    # if the input is mesh, convert it to a surface
    try:
        # check if this is a mesh
        geometry.Faces[0].IsQuad
        # convert to brep
        geometry = rc.Geometry.Brep.CreateFromMesh(geometry, False)
    except:
        pass
    
    HBSurfaces = []
    originalSrfName = srfName
    
    for faceCount in range(geometry.Faces.Count):
        
        # 0. check if user input a name for this surface
        guid = str(uuid.uuid4())
        number = guid.split("-")[-1]
        
        if srfName != None:
            if originalSrfName == None: originalSrfName = srfName
            originalSrfName = originalSrfName.strip().replace(" ","_")
            if geometry.Faces.Count != 1:
                srfName = originalSrfName + "_" + `faceCount`
            else: srfName = originalSrfName
        else:
            # generate a random name
            # the name will be overwritten for energy simulation
            srfName = "".join(guid.split("-")[:-1])
        
        # 1. create initial surface
        HBSurface = hb_EPZoneSurface(geometry.Faces[faceCount].DuplicateFace(False), number, srfName)
        
        # If the user has set a construction as Air Wall, change the surface type to air wall.
        try:
            if EPConstruction.ToUpper() == "AIR WALL":
                if srfType == None or srfType == "4":
                    srfType = 4
                    infoMsg = "Setting the construction to Air Wall will also ensure that the surface has the air wall srfType_."
                    print infoMsg
                else:
                    infoMsg = "By manually setting the srfType_ to be something other than 4: Air Wall on this component and also setting the Air Wall construction, you are overriding the air mixing properties of the air wall and only using the air wall as a construction."
                    print infoMsg
        except: pass
        
        if srfType == 4 or srfType == 4.0 or srfType == "4" or srfType == "4.0":
            try:
                if EPConstruction.ToUpper() == "AIR WALL": pass
                else:
                    infoMsg = "Setting the srfType to 4 will also ensure that the surface has the air wall construction."
                    print infoMsg
            except:
                infoMsg = "Setting the srfType to 4 will also ensure that the surface has the air wall construction."
                print infoMsg
            EPConstruction = "AIR WALL"
        
        # 1.1 check for surface type
        if srfType!=None:
            try:
                # if user uses a number to input type
                try: surfaceType = int(srfType)
                except:
                    if float(srfType) == 0.5 or float(srfType) == 1.5 or float(srfType) == 2.25 or float(srfType) == 2.5 or float(srfType) == 2.75:
                        surfaceType = srfType
                    else: pass
                print "HBSurface Type has been set to " + HBSurface.srfType[float(srfType)]
                
                if surfaceType == 5.0:
                    warningMsg = "If you want to use this model for energy simulation, use addGlazing to add window to surfaces.\n" + \
                                 "It will be fine for Daylighting simulation though."
                    print warningMsg
                    ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Remark, warningMsg)
            except:
                # user uses text as an input (e.g.: wall)
                # convert it to a number if a valid input
                surfaceType = srfType.ToUpper()
                if surfaceType in HBSurface.srfType.keys():
                   surfaceType = HBSurface.srfType[surfaceType.ToUpper()]
                   print "HBSurface Type has been set to " + surfaceType.ToUpper()
            
            if surfaceType in HBSurface.srfType.keys():
                acceptableCombination = [[1,3], [3,1], [0,5], [5,0], [1,5], [5,1], [4,0], [4,1], [4,2], [4,3], [0,4], [1,4], [2,4], [3,4]]
                try:
                    if int(HBSurface.type) != surfaceType and [int(HBSurface.type), surfaceType] not in acceptableCombination:
                        warningMsg = "Normal direction of the surface is not expected for a " + HBSurface.srfType[surfaceType] + ". " + \
                                     "The surface is more likely a " + HBSurface.srfType[int(HBSurface.type)] + ".\n" + \
                                     "Honeybee won't overwrite the type so you may need to manually flip the surface."
                        print warningMsg
                    HBSurface.setType(surfaceType, isUserInput= True)
                except:
                    warningMsg = "You are using an old version of Honeybee_Honeybee! Update your files and try again."
                    print warningMsg
                    ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warningMsg)
                    return
            
        
        # 1.2 assign boundary condition
        if EPBC!= None:
            # only ground, adiabatic and outdoors is valid
            validBC = ['ground', 'adiabatic', 'outdoors']
            if EPBC.lower() in validBC:
                try:
                    HBSurface.setBC(EPBC, isUserInput= True)
                    
                    # change type of surface if BC is set to ground
                    if EPBC.lower()== "ground":
                        HBSurface.setType(int(HBSurface.type) + 0.5, isUserInput= True)
                    
                    
                    if EPBC.lower()== "ground" or EPBC.lower()== "adiabatic":
                        HBSurface.setSunExposure('NoSun')
                        HBSurface.setWindExposure('NoWind')
                    
                    print "HBSurface boundary condition has been set to " + EPBC.upper()
                except:
                    warningMsg = "You are using an old version of Honeybee_Honeybee! Update your files and try again."
                    print warningMsg
                    ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warningMsg)
                    return               
            else:
                print "HBSurface BOUNDARY CONDITION IS NOT VALID."
        
        # 1.3 assign construction for EnergyPlus
        if EPConstruction!=None:
            # if it is just the name of the material make sure it is already defined
            if len(EPConstruction.split("\n")) == 1:
                # if the material is not in the library add it to the library
                if not hb_EPObjectsAux.isEPConstruction(EPConstruction):
                    warningMsg = "Can't find " + EPConstruction + " in EP Construction Library.\n" + \
                                "Add the construction to the library and try again."
                    print warningMsg
                    ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warningMsg)
                    return
            else:
                # it is a full string
                if "CONSTRUCTION" in EPConstruction.upper():
                    added, EPConstruction = hb_EPObjectsAux.addEPObjectToLib(EPConstruction, overwrite = True)
                    
                    if not added:
                        msg = name + " is not added to the project library!"
                        ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, msg)
                        print msg
                        return
                elif "MATERIAL" in EPConstruction.upper():
                    msg = "Your connected EPConstruction_ is just a material and not a full construction. \n You have to pass it through an 'EnergyPlus Construction' component before connecting it here."
                    ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, msg)
                    print msg
                    return
                else:
                    msg = "Your connected EPConstruction_ is not a valid construction."
                    ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, msg)
                    print msg
                    return
            
            try:
                HBSurface.setEPConstruction(EPConstruction)
                print "HBSurface construction has been set to " + EPConstruction
            except:
                warningMsg = "You are using an old version of Honeybee_Honeybee! Update your files and try again."
                print warningMsg
                ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warningMsg)
                return                 
            
        # 1.4 assign RAD Material
        if RADMaterial!=None:
            # if it is just the name of the material make sure it is already defined
            if len(RADMaterial.split(" ")) == 1:
                # if the material is not in the library add it to the library
                if not hb_RADMaterialAUX.isMatrialExistInLibrary(RADMaterial):
                    warningMsg = "Can't find " + RADMaterial + " in RAD Material Library.\n" + \
                                "Add the material to the library and try again."
                    ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warningMsg)
                    return
                
                try:
                    HBSurface.setRADMaterial(RADMaterial)
                    print "HBSurface Radiance Material has been set to " + RADMaterial
                except Exception, e:
                    print e
                    warningMsg = "You are using an old version of Honeybee_Honeybee! Update your files and try again."
                    print warningMsg
                    ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warningMsg)
                    return
                
                addedToLib = True
            else:
                
                # try to add the material to the library
                addedToLib, HBSurface.RadMaterial = hb_RADMaterialAUX.analyseRadMaterials(RADMaterial, True)
                
            if addedToLib==False:
                warningMsg = "Failed to add " + RADMaterial + " to the Library."
                ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warningMsg)
                return
            
        HBSurfaces.append(HBSurface)
    
    # add to the hive
    hb_hive = sc.sticky["honeybee_Hive"]()
    HBSurface  = hb_hive.addToHoneybeeHive(HBSurfaces, ghenv.Component)
    
    return HBSurface
    
    
    

if _geometry != None:
    
    result= main(_geometry, srfName_, srfType_, EPBC_, _EPConstruction_, _RADMaterial_)
    
    if result!=-1:
        HBSurface = result
</item>
                    <item name="Description" type_name="gh_string" type_code="10">Create a Honeybee surface, which can be plugged into the "Run Daylight Sumilation" component or combined with other surfaces to make HBZones with the "createHBZones" component.
-
Provided by Honeybee 0.0.62</item>
                    <item name="EditorLocation" type_name="gh_drawing_point" type_code="30">
                      <X>1390</X>
                      <Y>67</Y>
                    </item>
                    <item name="EditorSize" type_name="gh_drawing_size" type_code="32">
                      <W>1169</W>
                      <H>812</H>
                    </item>
                    <item name="HideInput" type_name="gh_bool" type_code="1">true</item>
                    <item name="HideOutput" type_name="gh_bool" type_code="1">false</item>
                    <item name="IconOverride" type_name="gh_drawing_bitmap" type_code="37">
                      <bitmap length="794">iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOwAAADsABataJCQAAArxJREFUSEvNVWtIk1EYnpuXb6arVJTN0oQgo1RwI4WS8I9ZWoZNN2+L7lKpP0ItCNQsoqILWGo/igok7UerZXSTDDOisjIvBSX0o9uPhKjmFLWe3nffBzn7stWMeuBhh3Pe93nP955znin+NxQrlQqzNJ5U6IgtlZZo2HYlgMa3iXN5wVP4EMvXpUb2dx1PBp7nA0/z8LoxFamGUC5U7Yz6Q5g0GsHRXJUA9BUA97MxcCENA9Y04G4W0J2Ltw0pMGinDVNsiZjiHgzaIN9b57brMdKWCfTmYtCWDjtx4JJIHg82pzuLosOEui0x0AjKHsqdKUrII5ZozUrS4SMJ4EUBRq5nwH6Rdi0JjyevDV9dAfTkAg9NqMifw21rJSay4HjUlhtnA+/X42u7EXZuh4yoHO22NHy5kQG8W4v9G+dxkZOi5BgE+nuXNlUsADrNLu1wl5yDjmzcPLQIEWHq3ZKsC2orC6KBrhxZAXeIRyacLouHv4/qqKTpgjruoUcFnuSgZmusfIsI+w5umu9skVyyO+Tc2uI4LnBClByDQMG79EyZ3nnt5JLdIe5lo7k6Ebpgvz2SrAs8bxF/QdFPvoDwd89ApfKqqi+JAx57cAZ0ixp26BEgqGok2e/w8VIcOLXTAPRvwNDl5RO+4PHk2CH65YfWUrMYM6b7HZFkXVA4RfB2NJbTQT8j16TdDFLiRI+O1xwUgwfkSb15uEYHHKLx5RZtEyXlUZS5MPRVdz3ZM7noaNsq2K3LfhSnudFWMsM+C96cXYI1KRH9lMsv2Mup8gsEEK1mMr4PV8jMXq4WjY/86TMbHM+RsKNlJQqXRvKO2eCmcuLvIj4qzP/8sc0xwB2j85bwJWCbbiI7j9KqWThZDPUMlvAQ4VP74SR0Uuu02gD+kykSlyYPwbNC1Xu1QUIdjcPFqX8OheIbukQwObBaeUMAAAAASUVORK5CYII=</bitmap>
                    </item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">79be3138-09c9-4502-a846-c968d6e08323</item>
                    <item name="Locked" type_name="gh_bool" type_code="1">true</item>
                    <item name="Name" type_name="gh_string" type_code="10">Honeybee_createHBSrfs</item>
                    <item name="NickName" type_name="gh_string" type_code="10">createHBSrfs</item>
                  </items>
                  <chunks count="2">
                    <chunk name="Attributes">
                      <items count="2">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>343</X>
                          <Y>1332</Y>
                          <W>200</W>
                          <H>124</H>
                        </item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>450</X>
                          <Y>1394</Y>
                        </item>
                      </items>
                    </chunk>
                    <chunk name="ParameterData">
                      <items count="10">
                        <item name="InputCount" type_name="gh_int32" type_code="3">6</item>
                        <item name="InputId" index="0" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="1" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="2" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="3" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="4" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="5" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="OutputCount" type_name="gh_int32" type_code="3">2</item>
                        <item name="OutputId" index="0" type_name="gh_guid" type_code="9">3ede854e-c753-40eb-84cb-b48008f14fd4</item>
                        <item name="OutputId" index="1" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                      </items>
                      <chunks count="8">
                        <chunk name="InputParam" index="0">
                          <items count="12">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">List of Breps</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">4b62040b-4cdc-4635-8c4b-5b72f05056dd</item>
                            <item name="Locked" type_name="gh_bool" type_code="1">true</item>
                            <item name="Name" type_name="gh_string" type_code="10">_geometry</item>
                            <item name="NickName" type_name="gh_string" type_code="10">_geometry</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="Source" index="0" type_name="gh_guid" type_code="9">9df83d65-eabc-406d-af4a-2946d33213df</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">c37956f4-d39c-49c7-af71-1e87f8031b26</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>345</X>
                                  <Y>1334</Y>
                                  <W>90</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>391.5</X>
                                  <Y>1344</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="1">
                          <items count="11">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Optional name for surface</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">8ae39181-f392-4a0f-8247-40e5dbd02f4b</item>
                            <item name="Locked" type_name="gh_bool" type_code="1">true</item>
                            <item name="Name" type_name="gh_string" type_code="10">srfName_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">srfName_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">37261734-eec7-4f50-b6a8-b8d1f3c4396b</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>345</X>
                                  <Y>1354</Y>
                                  <W>90</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>391.5</X>
                                  <Y>1364</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="2">
                          <items count="12">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Optional input for surface type &gt;
0- 'WALL'
0.5- 'UndergroundWall'
1- 'ROOF'
1.5- 'UndergroundCeiling'
2- 'FLOOR'
2.25- 'UndergroundSlab'
2.5- 'SlabOnGrade'
2.75- 'ExposedFloor'
3- 'CEILING'
4- 'AIRWALL'
5- 'WINDOW'
6- 'SHADING'</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">39ebab51-ef63-4f07-be94-2ea008e2dc88</item>
                            <item name="Locked" type_name="gh_bool" type_code="1">true</item>
                            <item name="Name" type_name="gh_string" type_code="10">srfType_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">srfType_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="Source" index="0" type_name="gh_guid" type_code="9">1fa7a603-1c61-40bd-aebf-127783406741</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">37261734-eec7-4f50-b6a8-b8d1f3c4396b</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>345</X>
                                  <Y>1374</Y>
                                  <W>90</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>391.5</X>
                                  <Y>1384</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="3">
                          <items count="11">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">'Ground', 'Adiabatic', 'Outdoors'</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">8ea01457-3c33-4810-9a25-6a41003b482a</item>
                            <item name="Locked" type_name="gh_bool" type_code="1">true</item>
                            <item name="Name" type_name="gh_string" type_code="10">EPBC_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">EPBC_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">37261734-eec7-4f50-b6a8-b8d1f3c4396b</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>345</X>
                                  <Y>1394</Y>
                                  <W>90</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>391.5</X>
                                  <Y>1404</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="4">
                          <items count="11">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Optional EnergyPlus construction</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">985b5c01-9a1b-4dfb-9160-9f4773748ca8</item>
                            <item name="Locked" type_name="gh_bool" type_code="1">true</item>
                            <item name="Name" type_name="gh_string" type_code="10">_EPConstruction_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">_EPConstruction_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">37261734-eec7-4f50-b6a8-b8d1f3c4396b</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>345</X>
                                  <Y>1414</Y>
                                  <W>90</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>391.5</X>
                                  <Y>1424</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="5">
                          <items count="11">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Optional Radiance Material</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">aa52812f-f918-4e64-9ecf-c3c1336403a1</item>
                            <item name="Locked" type_name="gh_bool" type_code="1">true</item>
                            <item name="Name" type_name="gh_string" type_code="10">_RADMaterial_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">_RADMaterial_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">37261734-eec7-4f50-b6a8-b8d1f3c4396b</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>345</X>
                                  <Y>1434</Y>
                                  <W>90</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>391.5</X>
                                  <Y>1444</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="0">
                          <items count="7">
                            <item name="Description" type_name="gh_string" type_code="10">...</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">dde34ff6-3ef0-44eb-a706-fa3a4e338d8e</item>
                            <item name="Locked" type_name="gh_bool" type_code="1">true</item>
                            <item name="Name" type_name="gh_string" type_code="10">out</item>
                            <item name="NickName" type_name="gh_string" type_code="10">readMe!</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>465</X>
                                  <Y>1334</Y>
                                  <W>76</W>
                                  <H>60</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>495</X>
                                  <Y>1364</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="1">
                          <items count="8">
                            <item name="Description" type_name="gh_string" type_code="10">Honeybee zone as the result</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">38be87c6-9f0b-4109-995d-bbe72db1ecc1</item>
                            <item name="Locked" type_name="gh_bool" type_code="1">true</item>
                            <item name="Name" type_name="gh_string" type_code="10">HBSurface</item>
                            <item name="NickName" type_name="gh_string" type_code="10">HBSurface</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SimplifyData" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>465</X>
                                  <Y>1394</Y>
                                  <W>76</W>
                                  <H>60</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>495</X>
                                  <Y>1424</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                      </chunks>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="69">
              <items count="3">
                <item name="GUID" type_name="gh_guid" type_code="9">410755b1-224a-4c1e-a407-bf32fb45ea7e</item>
                <item name="Lib" type_name="gh_guid" type_code="9">16cf80bc-9018-cbdb-2238-976eb17fd30d</item>
                <item name="Name" type_name="gh_string" type_code="10">Honeybee_createHBSrfs</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="11">
                    <item name="CodeInput" type_name="gh_string" type_code="10">#
# Honeybee: A Plugin for Environmental Analysis (GPL) started by Mostapha Sadeghipour Roudsari
# 
# This file is part of Honeybee.
# 
# Copyright (c) 2013-2017, Mostapha Sadeghipour Roudsari &lt;mostapha@ladybug.tools&gt; 
# Honeybee is free software; you can redistribute it and/or modify 
# it under the terms of the GNU General Public License as published 
# by the Free Software Foundation; either version 3 of the License, 
# or (at your option) any later version. 
# 
# Honeybee is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of 
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Honeybee; If not, see &lt;http://www.gnu.org/licenses/&gt;.
# 
# @license GPL-3.0+ &lt;http://spdx.org/licenses/GPL-3.0+&gt;


"""
Create a Honeybee surface, which can be plugged into the "Run Daylight Sumilation" component or combined with other surfaces to make HBZones with the "createHBZones" component.
-
Provided by Honeybee 0.0.62

    Args:
        _geometry: List of Breps
        srfName_: Optional name for surface
        srfType_: Optional input for surface type &gt;
            0- 'WALL'
            0.5- 'UndergroundWall'
            1- 'ROOF'
            1.5- 'UndergroundCeiling'
            2- 'FLOOR'
            2.25- 'UndergroundSlab'
            2.5- 'SlabOnGrade'
            2.75- 'ExposedFloor'
            3- 'CEILING'
            4- 'AIRWALL'
            5- 'WINDOW'
            6- 'SHADING'
        EPBC_: 'Ground', 'Adiabatic', 'Outdoors'
        _EPConstruction_: Optional EnergyPlus construction
        _RADMaterial_: Optional Radiance Material
    Returns:
        readMe!:...
        HBZone: A Honeybee Surface, which can be plugged into the "Run Daylight Sumilation" component or combined with other surfaces to make HBZones with the "createHBZones" component.
"""

import rhinoscriptsyntax as rs
import Rhino as rc
import scriptcontext as sc
import os
import sys
import System
import Grasshopper.Kernel as gh
import uuid

ghenv.Component.Name = 'Honeybee_createHBSrfs'
ghenv.Component.NickName = 'createHBSrfs'
ghenv.Component.Message = 'VER 0.0.62\nJUL_28_2017'
ghenv.Component.IconDisplayMode = ghenv.Component.IconDisplayMode.application
ghenv.Component.Category = "Honeybee"
ghenv.Component.SubCategory = "00 | Honeybee"
#compatibleHBVersion = VER 0.0.57\nNOV_04_2016
#compatibleLBVersion = VER 0.0.59\nFEB_01_2015
try: ghenv.Component.AdditionalHelpFromDocStrings = "3"
except: pass


tolerance = sc.doc.ModelAbsoluteTolerance
import math


def main(geometry, srfName, srfType, EPBC, EPConstruction, RADMaterial):
    # import the classes
    if sc.sticky.has_key('honeybee_release'):

        try:
            if not sc.sticky['honeybee_release'].isCompatible(ghenv.Component): return -1
            if sc.sticky['honeybee_release'].isInputMissing(ghenv.Component): return -1
        except:
            warning = "You need a newer version of Honeybee to use this compoent." + \
            "Use updateHoneybee component to update userObjects.\n" + \
            "If you have already updated userObjects drag Honeybee_Honeybee component " + \
            "into canvas and try again."
            w = gh.GH_RuntimeMessageLevel.Warning
            ghenv.Component.AddRuntimeMessage(w, warning)
            return -1
            
        # don't customize this part
        hb_EPZone = sc.sticky["honeybee_EPZone"]
        hb_EPSrf = sc.sticky["honeybee_EPSurface"]
        hb_EPZoneSurface = sc.sticky["honeybee_EPZoneSurface"]
        hb_EPFenSurface = sc.sticky["honeybee_EPFenSurface"]
        hb_RADMaterialAUX = sc.sticky["honeybee_RADMaterialAUX"]
        hb_EPObjectsAux = sc.sticky["honeybee_EPObjectsAUX"]()
        
    else:
        print "You should first let Honeybee to fly..."
        w = gh.GH_RuntimeMessageLevel.Warning
        ghenv.Component.AddRuntimeMessage(w, "You should first let Honeybee to fly...")
        return
    
    # if the input is mesh, convert it to a surface
    try:
        # check if this is a mesh
        geometry.Faces[0].IsQuad
        # convert to brep
        geometry = rc.Geometry.Brep.CreateFromMesh(geometry, False)
    except:
        pass
    
    HBSurfaces = []
    originalSrfName = srfName
    
    for faceCount in range(geometry.Faces.Count):
        
        # 0. check if user input a name for this surface
        guid = str(uuid.uuid4())
        number = guid.split("-")[-1]
        
        if srfName != None:
            if originalSrfName == None: originalSrfName = srfName
            originalSrfName = originalSrfName.strip().replace(" ","_")
            if geometry.Faces.Count != 1:
                srfName = originalSrfName + "_" + `faceCount`
            else: srfName = originalSrfName
        else:
            # generate a random name
            # the name will be overwritten for energy simulation
            srfName = "".join(guid.split("-")[:-1])
        
        # 1. create initial surface
        HBSurface = hb_EPZoneSurface(geometry.Faces[faceCount].DuplicateFace(False), number, srfName)
        
        # If the user has set a construction as Air Wall, change the surface type to air wall.
        try:
            if EPConstruction.ToUpper() == "AIR WALL":
                if srfType == None or srfType == "4":
                    srfType = 4
                    infoMsg = "Setting the construction to Air Wall will also ensure that the surface has the air wall srfType_."
                    print infoMsg
                else:
                    infoMsg = "By manually setting the srfType_ to be something other than 4: Air Wall on this component and also setting the Air Wall construction, you are overriding the air mixing properties of the air wall and only using the air wall as a construction."
                    print infoMsg
        except: pass
        
        if srfType == 4 or srfType == 4.0 or srfType == "4" or srfType == "4.0":
            try:
                if EPConstruction.ToUpper() == "AIR WALL": pass
                else:
                    infoMsg = "Setting the srfType to 4 will also ensure that the surface has the air wall construction."
                    print infoMsg
            except:
                infoMsg = "Setting the srfType to 4 will also ensure that the surface has the air wall construction."
                print infoMsg
            EPConstruction = "AIR WALL"
        
        # 1.1 check for surface type
        if srfType!=None:
            try:
                # if user uses a number to input type
                try: surfaceType = int(srfType)
                except:
                    if float(srfType) == 0.5 or float(srfType) == 1.5 or float(srfType) == 2.25 or float(srfType) == 2.5 or float(srfType) == 2.75:
                        surfaceType = srfType
                    else: pass
                print "HBSurface Type has been set to " + HBSurface.srfType[float(srfType)]
                
                if surfaceType == 5.0:
                    warningMsg = "If you want to use this model for energy simulation, use addGlazing to add window to surfaces.\n" + \
                                 "It will be fine for Daylighting simulation though."
                    print warningMsg
                    ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Remark, warningMsg)
            except:
                # user uses text as an input (e.g.: wall)
                # convert it to a number if a valid input
                surfaceType = srfType.ToUpper()
                if surfaceType in HBSurface.srfType.keys():
                   surfaceType = HBSurface.srfType[surfaceType.ToUpper()]
                   print "HBSurface Type has been set to " + surfaceType.ToUpper()
            
            if surfaceType in HBSurface.srfType.keys():
                acceptableCombination = [[1,3], [3,1], [0,5], [5,0], [1,5], [5,1], [4,0], [4,1], [4,2], [4,3], [0,4], [1,4], [2,4], [3,4]]
                try:
                    if int(HBSurface.type) != surfaceType and [int(HBSurface.type), surfaceType] not in acceptableCombination:
                        warningMsg = "Normal direction of the surface is not expected for a " + HBSurface.srfType[surfaceType] + ". " + \
                                     "The surface is more likely a " + HBSurface.srfType[int(HBSurface.type)] + ".\n" + \
                                     "Honeybee won't overwrite the type so you may need to manually flip the surface."
                        print warningMsg
                    HBSurface.setType(surfaceType, isUserInput= True)
                except:
                    warningMsg = "You are using an old version of Honeybee_Honeybee! Update your files and try again."
                    print warningMsg
                    ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warningMsg)
                    return
            
        
        # 1.2 assign boundary condition
        if EPBC!= None:
            # only ground, adiabatic and outdoors is valid
            validBC = ['ground', 'adiabatic', 'outdoors']
            if EPBC.lower() in validBC:
                try:
                    HBSurface.setBC(EPBC, isUserInput= True)
                    
                    # change type of surface if BC is set to ground
                    if EPBC.lower()== "ground":
                        HBSurface.setType(int(HBSurface.type) + 0.5, isUserInput= True)
                    
                    
                    if EPBC.lower()== "ground" or EPBC.lower()== "adiabatic":
                        HBSurface.setSunExposure('NoSun')
                        HBSurface.setWindExposure('NoWind')
                    
                    print "HBSurface boundary condition has been set to " + EPBC.upper()
                except:
                    warningMsg = "You are using an old version of Honeybee_Honeybee! Update your files and try again."
                    print warningMsg
                    ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warningMsg)
                    return               
            else:
                print "HBSurface BOUNDARY CONDITION IS NOT VALID."
        
        # 1.3 assign construction for EnergyPlus
        if EPConstruction!=None:
            # if it is just the name of the material make sure it is already defined
            if len(EPConstruction.split("\n")) == 1:
                # if the material is not in the library add it to the library
                if not hb_EPObjectsAux.isEPConstruction(EPConstruction):
                    warningMsg = "Can't find " + EPConstruction + " in EP Construction Library.\n" + \
                                "Add the construction to the library and try again."
                    print warningMsg
                    ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warningMsg)
                    return
            else:
                # it is a full string
                if "CONSTRUCTION" in EPConstruction.upper():
                    added, EPConstruction = hb_EPObjectsAux.addEPObjectToLib(EPConstruction, overwrite = True)
                    
                    if not added:
                        msg = name + " is not added to the project library!"
                        ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, msg)
                        print msg
                        return
                elif "MATERIAL" in EPConstruction.upper():
                    msg = "Your connected EPConstruction_ is just a material and not a full construction. \n You have to pass it through an 'EnergyPlus Construction' component before connecting it here."
                    ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, msg)
                    print msg
                    return
                else:
                    msg = "Your connected EPConstruction_ is not a valid construction."
                    ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, msg)
                    print msg
                    return
            
            try:
                HBSurface.setEPConstruction(EPConstruction)
                print "HBSurface construction has been set to " + EPConstruction
            except:
                warningMsg = "You are using an old version of Honeybee_Honeybee! Update your files and try again."
                print warningMsg
                ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warningMsg)
                return                 
            
        # 1.4 assign RAD Material
        if RADMaterial!=None:
            # if it is just the name of the material make sure it is already defined
            if len(RADMaterial.split(" ")) == 1:
                # if the material is not in the library add it to the library
                if not hb_RADMaterialAUX.isMatrialExistInLibrary(RADMaterial):
                    warningMsg = "Can't find " + RADMaterial + " in RAD Material Library.\n" + \
                                "Add the material to the library and try again."
                    ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warningMsg)
                    return
                
                try:
                    HBSurface.setRADMaterial(RADMaterial)
                    print "HBSurface Radiance Material has been set to " + RADMaterial
                except Exception, e:
                    print e
                    warningMsg = "You are using an old version of Honeybee_Honeybee! Update your files and try again."
                    print warningMsg
                    ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warningMsg)
                    return
                
                addedToLib = True
            else:
                
                # try to add the material to the library
                addedToLib, HBSurface.RadMaterial = hb_RADMaterialAUX.analyseRadMaterials(RADMaterial, True)
                
            if addedToLib==False:
                warningMsg = "Failed to add " + RADMaterial + " to the Library."
                ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warningMsg)
                return
            
        HBSurfaces.append(HBSurface)
    
    # add to the hive
    hb_hive = sc.sticky["honeybee_Hive"]()
    HBSurface  = hb_hive.addToHoneybeeHive(HBSurfaces, ghenv.Component)
    
    return HBSurface
    
    
    

if _geometry != None:
    
    result= main(_geometry, srfName_, srfType_, EPBC_, _EPConstruction_, _RADMaterial_)
    
    if result!=-1:
        HBSurface = result
</item>
                    <item name="Description" type_name="gh_string" type_code="10">Create a Honeybee surface, which can be plugged into the "Run Daylight Sumilation" component or combined with other surfaces to make HBZones with the "createHBZones" component.
-
Provided by Honeybee 0.0.62</item>
                    <item name="EditorLocation" type_name="gh_drawing_point" type_code="30">
                      <X>1390</X>
                      <Y>67</Y>
                    </item>
                    <item name="EditorSize" type_name="gh_drawing_size" type_code="32">
                      <W>1169</W>
                      <H>812</H>
                    </item>
                    <item name="HideInput" type_name="gh_bool" type_code="1">true</item>
                    <item name="HideOutput" type_name="gh_bool" type_code="1">false</item>
                    <item name="IconOverride" type_name="gh_drawing_bitmap" type_code="37">
                      <bitmap length="794">iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOvwAADr8BOAVTJAAAArxJREFUSEvNVWtIk1EYnpuXb6arVJTN0oQgo1RwI4WS8I9ZWoZNN2+L7lKpP0ItCNQsoqILWGo/igok7UerZXSTDDOisjIvBSX0o9uPhKjmFLWe3nffBzn7stWMeuBhh3Pe93nP955znin+NxQrlQqzNJ5U6IgtlZZo2HYlgMa3iXN5wVP4EMvXpUb2dx1PBp7nA0/z8LoxFamGUC5U7Yz6Q5g0GsHRXJUA9BUA97MxcCENA9Y04G4W0J2Ltw0pMGinDVNsiZjiHgzaIN9b57brMdKWCfTmYtCWDjtx4JJIHg82pzuLosOEui0x0AjKHsqdKUrII5ZozUrS4SMJ4EUBRq5nwH6Rdi0JjyevDV9dAfTkAg9NqMifw21rJSay4HjUlhtnA+/X42u7EXZuh4yoHO22NHy5kQG8W4v9G+dxkZOi5BgE+nuXNlUsADrNLu1wl5yDjmzcPLQIEWHq3ZKsC2orC6KBrhxZAXeIRyacLouHv4/qqKTpgjruoUcFnuSgZmusfIsI+w5umu9skVyyO+Tc2uI4LnBClByDQMG79EyZ3nnt5JLdIe5lo7k6Ebpgvz2SrAs8bxF/QdFPvoDwd89ApfKqqi+JAx57cAZ0ixp26BEgqGok2e/w8VIcOLXTAPRvwNDl5RO+4PHk2CH65YfWUrMYM6b7HZFkXVA4RfB2NJbTQT8j16TdDFLiRI+O1xwUgwfkSb15uEYHHKLx5RZtEyXlUZS5MPRVdz3ZM7noaNsq2K3LfhSnudFWMsM+C96cXYI1KRH9lMsv2Mup8gsEEK1mMr4PV8jMXq4WjY/86TMbHM+RsKNlJQqXRvKO2eCmcuLvIj4qzP/8sc0xwB2j85bwJWCbbiI7j9KqWThZDPUMlvAQ4VP74SR0Uuu02gD+kykSlyYPwbNC1Xu1QUIdjcPFqX8OheIbukQwObBaeUMAAAAASUVORK5CYII=</bitmap>
                    </item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">e39f5f60-64bc-4136-be3b-548b8249771d</item>
                    <item name="Locked" type_name="gh_bool" type_code="1">true</item>
                    <item name="Name" type_name="gh_string" type_code="10">Honeybee_createHBSrfs</item>
                    <item name="NickName" type_name="gh_string" type_code="10">createHBSrfs</item>
                  </items>
                  <chunks count="2">
                    <chunk name="Attributes">
                      <items count="2">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>343</X>
                          <Y>1528</Y>
                          <W>200</W>
                          <H>124</H>
                        </item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>450</X>
                          <Y>1590</Y>
                        </item>
                      </items>
                    </chunk>
                    <chunk name="ParameterData">
                      <items count="10">
                        <item name="InputCount" type_name="gh_int32" type_code="3">6</item>
                        <item name="InputId" index="0" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="1" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="2" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="3" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="4" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="5" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="OutputCount" type_name="gh_int32" type_code="3">2</item>
                        <item name="OutputId" index="0" type_name="gh_guid" type_code="9">3ede854e-c753-40eb-84cb-b48008f14fd4</item>
                        <item name="OutputId" index="1" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                      </items>
                      <chunks count="8">
                        <chunk name="InputParam" index="0">
                          <items count="12">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">List of Breps</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">0a75ebd7-65a6-418b-a382-cbd573906ed9</item>
                            <item name="Locked" type_name="gh_bool" type_code="1">true</item>
                            <item name="Name" type_name="gh_string" type_code="10">_geometry</item>
                            <item name="NickName" type_name="gh_string" type_code="10">_geometry</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="Source" index="0" type_name="gh_guid" type_code="9">909270b8-3801-4aed-b3ca-b323a623afaf</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">c37956f4-d39c-49c7-af71-1e87f8031b26</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>345</X>
                                  <Y>1530</Y>
                                  <W>90</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>391.5</X>
                                  <Y>1540</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="1">
                          <items count="11">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Optional name for surface</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">c14feef2-c93b-4706-9309-984962e88478</item>
                            <item name="Locked" type_name="gh_bool" type_code="1">true</item>
                            <item name="Name" type_name="gh_string" type_code="10">srfName_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">srfName_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">37261734-eec7-4f50-b6a8-b8d1f3c4396b</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>345</X>
                                  <Y>1550</Y>
                                  <W>90</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>391.5</X>
                                  <Y>1560</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="2">
                          <items count="12">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Optional input for surface type &gt;
0- 'WALL'
0.5- 'UndergroundWall'
1- 'ROOF'
1.5- 'UndergroundCeiling'
2- 'FLOOR'
2.25- 'UndergroundSlab'
2.5- 'SlabOnGrade'
2.75- 'ExposedFloor'
3- 'CEILING'
4- 'AIRWALL'
5- 'WINDOW'
6- 'SHADING'</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">5e094799-7aed-4971-ba45-dcd4042b84d6</item>
                            <item name="Locked" type_name="gh_bool" type_code="1">true</item>
                            <item name="Name" type_name="gh_string" type_code="10">srfType_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">srfType_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="Source" index="0" type_name="gh_guid" type_code="9">324d0099-ad92-45fa-88db-f0e2838e3d53</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">37261734-eec7-4f50-b6a8-b8d1f3c4396b</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>345</X>
                                  <Y>1570</Y>
                                  <W>90</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>391.5</X>
                                  <Y>1580</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="3">
                          <items count="11">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">'Ground', 'Adiabatic', 'Outdoors'</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">cb8aa5cc-5819-4fde-bde4-177529d7cc87</item>
                            <item name="Locked" type_name="gh_bool" type_code="1">true</item>
                            <item name="Name" type_name="gh_string" type_code="10">EPBC_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">EPBC_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">37261734-eec7-4f50-b6a8-b8d1f3c4396b</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>345</X>
                                  <Y>1590</Y>
                                  <W>90</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>391.5</X>
                                  <Y>1600</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="4">
                          <items count="11">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Optional EnergyPlus construction</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">1011163a-4397-46d2-827e-fecbf7b35321</item>
                            <item name="Locked" type_name="gh_bool" type_code="1">true</item>
                            <item name="Name" type_name="gh_string" type_code="10">_EPConstruction_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">_EPConstruction_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">37261734-eec7-4f50-b6a8-b8d1f3c4396b</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>345</X>
                                  <Y>1610</Y>
                                  <W>90</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>391.5</X>
                                  <Y>1620</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="5">
                          <items count="11">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Optional Radiance Material</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">3f76ea37-da5c-46d4-8c69-f24bf9043f58</item>
                            <item name="Locked" type_name="gh_bool" type_code="1">true</item>
                            <item name="Name" type_name="gh_string" type_code="10">_RADMaterial_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">_RADMaterial_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">37261734-eec7-4f50-b6a8-b8d1f3c4396b</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>345</X>
                                  <Y>1630</Y>
                                  <W>90</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>391.5</X>
                                  <Y>1640</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="0">
                          <items count="7">
                            <item name="Description" type_name="gh_string" type_code="10">...</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">586c131a-cb9c-4df4-aba7-0cbc075c9631</item>
                            <item name="Locked" type_name="gh_bool" type_code="1">true</item>
                            <item name="Name" type_name="gh_string" type_code="10">out</item>
                            <item name="NickName" type_name="gh_string" type_code="10">readMe!</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>465</X>
                                  <Y>1530</Y>
                                  <W>76</W>
                                  <H>60</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>495</X>
                                  <Y>1560</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="1">
                          <items count="8">
                            <item name="Description" type_name="gh_string" type_code="10">Honeybee zone as the result</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">83391e91-4af1-4aa9-b298-7a13346407dc</item>
                            <item name="Locked" type_name="gh_bool" type_code="1">true</item>
                            <item name="Name" type_name="gh_string" type_code="10">HBSurface</item>
                            <item name="NickName" type_name="gh_string" type_code="10">HBSurface</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SimplifyData" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>465</X>
                                  <Y>1590</Y>
                                  <W>76</W>
                                  <H>60</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>495</X>
                                  <Y>1620</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                      </chunks>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="70">
              <items count="3">
                <item name="GUID" type_name="gh_guid" type_code="9">410755b1-224a-4c1e-a407-bf32fb45ea7e</item>
                <item name="Lib" type_name="gh_guid" type_code="9">16cf80bc-9018-cbdb-2238-976eb17fd30d</item>
                <item name="Name" type_name="gh_string" type_code="10">Honeybee_createHBSrfs</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="11">
                    <item name="CodeInput" type_name="gh_string" type_code="10">#
# Honeybee: A Plugin for Environmental Analysis (GPL) started by Mostapha Sadeghipour Roudsari
# 
# This file is part of Honeybee.
# 
# Copyright (c) 2013-2017, Mostapha Sadeghipour Roudsari &lt;mostapha@ladybug.tools&gt; 
# Honeybee is free software; you can redistribute it and/or modify 
# it under the terms of the GNU General Public License as published 
# by the Free Software Foundation; either version 3 of the License, 
# or (at your option) any later version. 
# 
# Honeybee is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of 
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Honeybee; If not, see &lt;http://www.gnu.org/licenses/&gt;.
# 
# @license GPL-3.0+ &lt;http://spdx.org/licenses/GPL-3.0+&gt;


"""
Create a Honeybee surface, which can be plugged into the "Run Daylight Sumilation" component or combined with other surfaces to make HBZones with the "createHBZones" component.
-
Provided by Honeybee 0.0.62

    Args:
        _geometry: List of Breps
        srfName_: Optional name for surface
        srfType_: Optional input for surface type &gt;
            0- 'WALL'
            0.5- 'UndergroundWall'
            1- 'ROOF'
            1.5- 'UndergroundCeiling'
            2- 'FLOOR'
            2.25- 'UndergroundSlab'
            2.5- 'SlabOnGrade'
            2.75- 'ExposedFloor'
            3- 'CEILING'
            4- 'AIRWALL'
            5- 'WINDOW'
            6- 'SHADING'
        EPBC_: 'Ground', 'Adiabatic', 'Outdoors'
        _EPConstruction_: Optional EnergyPlus construction
        _RADMaterial_: Optional Radiance Material
    Returns:
        readMe!:...
        HBZone: A Honeybee Surface, which can be plugged into the "Run Daylight Sumilation" component or combined with other surfaces to make HBZones with the "createHBZones" component.
"""

import rhinoscriptsyntax as rs
import Rhino as rc
import scriptcontext as sc
import os
import sys
import System
import Grasshopper.Kernel as gh
import uuid

ghenv.Component.Name = 'Honeybee_createHBSrfs'
ghenv.Component.NickName = 'createHBSrfs'
ghenv.Component.Message = 'VER 0.0.62\nJUL_28_2017'
ghenv.Component.IconDisplayMode = ghenv.Component.IconDisplayMode.application
ghenv.Component.Category = "Honeybee"
ghenv.Component.SubCategory = "00 | Honeybee"
#compatibleHBVersion = VER 0.0.57\nNOV_04_2016
#compatibleLBVersion = VER 0.0.59\nFEB_01_2015
try: ghenv.Component.AdditionalHelpFromDocStrings = "3"
except: pass


tolerance = sc.doc.ModelAbsoluteTolerance
import math


def main(geometry, srfName, srfType, EPBC, EPConstruction, RADMaterial):
    # import the classes
    if sc.sticky.has_key('honeybee_release'):

        try:
            if not sc.sticky['honeybee_release'].isCompatible(ghenv.Component): return -1
            if sc.sticky['honeybee_release'].isInputMissing(ghenv.Component): return -1
        except:
            warning = "You need a newer version of Honeybee to use this compoent." + \
            "Use updateHoneybee component to update userObjects.\n" + \
            "If you have already updated userObjects drag Honeybee_Honeybee component " + \
            "into canvas and try again."
            w = gh.GH_RuntimeMessageLevel.Warning
            ghenv.Component.AddRuntimeMessage(w, warning)
            return -1
            
        # don't customize this part
        hb_EPZone = sc.sticky["honeybee_EPZone"]
        hb_EPSrf = sc.sticky["honeybee_EPSurface"]
        hb_EPZoneSurface = sc.sticky["honeybee_EPZoneSurface"]
        hb_EPFenSurface = sc.sticky["honeybee_EPFenSurface"]
        hb_RADMaterialAUX = sc.sticky["honeybee_RADMaterialAUX"]
        hb_EPObjectsAux = sc.sticky["honeybee_EPObjectsAUX"]()
        
    else:
        print "You should first let Honeybee to fly..."
        w = gh.GH_RuntimeMessageLevel.Warning
        ghenv.Component.AddRuntimeMessage(w, "You should first let Honeybee to fly...")
        return
    
    # if the input is mesh, convert it to a surface
    try:
        # check if this is a mesh
        geometry.Faces[0].IsQuad
        # convert to brep
        geometry = rc.Geometry.Brep.CreateFromMesh(geometry, False)
    except:
        pass
    
    HBSurfaces = []
    originalSrfName = srfName
    
    for faceCount in range(geometry.Faces.Count):
        
        # 0. check if user input a name for this surface
        guid = str(uuid.uuid4())
        number = guid.split("-")[-1]
        
        if srfName != None:
            if originalSrfName == None: originalSrfName = srfName
            originalSrfName = originalSrfName.strip().replace(" ","_")
            if geometry.Faces.Count != 1:
                srfName = originalSrfName + "_" + `faceCount`
            else: srfName = originalSrfName
        else:
            # generate a random name
            # the name will be overwritten for energy simulation
            srfName = "".join(guid.split("-")[:-1])
        
        # 1. create initial surface
        HBSurface = hb_EPZoneSurface(geometry.Faces[faceCount].DuplicateFace(False), number, srfName)
        
        # If the user has set a construction as Air Wall, change the surface type to air wall.
        try:
            if EPConstruction.ToUpper() == "AIR WALL":
                if srfType == None or srfType == "4":
                    srfType = 4
                    infoMsg = "Setting the construction to Air Wall will also ensure that the surface has the air wall srfType_."
                    print infoMsg
                else:
                    infoMsg = "By manually setting the srfType_ to be something other than 4: Air Wall on this component and also setting the Air Wall construction, you are overriding the air mixing properties of the air wall and only using the air wall as a construction."
                    print infoMsg
        except: pass
        
        if srfType == 4 or srfType == 4.0 or srfType == "4" or srfType == "4.0":
            try:
                if EPConstruction.ToUpper() == "AIR WALL": pass
                else:
                    infoMsg = "Setting the srfType to 4 will also ensure that the surface has the air wall construction."
                    print infoMsg
            except:
                infoMsg = "Setting the srfType to 4 will also ensure that the surface has the air wall construction."
                print infoMsg
            EPConstruction = "AIR WALL"
        
        # 1.1 check for surface type
        if srfType!=None:
            try:
                # if user uses a number to input type
                try: surfaceType = int(srfType)
                except:
                    if float(srfType) == 0.5 or float(srfType) == 1.5 or float(srfType) == 2.25 or float(srfType) == 2.5 or float(srfType) == 2.75:
                        surfaceType = srfType
                    else: pass
                print "HBSurface Type has been set to " + HBSurface.srfType[float(srfType)]
                
                if surfaceType == 5.0:
                    warningMsg = "If you want to use this model for energy simulation, use addGlazing to add window to surfaces.\n" + \
                                 "It will be fine for Daylighting simulation though."
                    print warningMsg
                    ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Remark, warningMsg)
            except:
                # user uses text as an input (e.g.: wall)
                # convert it to a number if a valid input
                surfaceType = srfType.ToUpper()
                if surfaceType in HBSurface.srfType.keys():
                   surfaceType = HBSurface.srfType[surfaceType.ToUpper()]
                   print "HBSurface Type has been set to " + surfaceType.ToUpper()
            
            if surfaceType in HBSurface.srfType.keys():
                acceptableCombination = [[1,3], [3,1], [0,5], [5,0], [1,5], [5,1], [4,0], [4,1], [4,2], [4,3], [0,4], [1,4], [2,4], [3,4]]
                try:
                    if int(HBSurface.type) != surfaceType and [int(HBSurface.type), surfaceType] not in acceptableCombination:
                        warningMsg = "Normal direction of the surface is not expected for a " + HBSurface.srfType[surfaceType] + ". " + \
                                     "The surface is more likely a " + HBSurface.srfType[int(HBSurface.type)] + ".\n" + \
                                     "Honeybee won't overwrite the type so you may need to manually flip the surface."
                        print warningMsg
                    HBSurface.setType(surfaceType, isUserInput= True)
                except:
                    warningMsg = "You are using an old version of Honeybee_Honeybee! Update your files and try again."
                    print warningMsg
                    ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warningMsg)
                    return
            
        
        # 1.2 assign boundary condition
        if EPBC!= None:
            # only ground, adiabatic and outdoors is valid
            validBC = ['ground', 'adiabatic', 'outdoors']
            if EPBC.lower() in validBC:
                try:
                    HBSurface.setBC(EPBC, isUserInput= True)
                    
                    # change type of surface if BC is set to ground
                    if EPBC.lower()== "ground":
                        HBSurface.setType(int(HBSurface.type) + 0.5, isUserInput= True)
                    
                    
                    if EPBC.lower()== "ground" or EPBC.lower()== "adiabatic":
                        HBSurface.setSunExposure('NoSun')
                        HBSurface.setWindExposure('NoWind')
                    
                    print "HBSurface boundary condition has been set to " + EPBC.upper()
                except:
                    warningMsg = "You are using an old version of Honeybee_Honeybee! Update your files and try again."
                    print warningMsg
                    ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warningMsg)
                    return               
            else:
                print "HBSurface BOUNDARY CONDITION IS NOT VALID."
        
        # 1.3 assign construction for EnergyPlus
        if EPConstruction!=None:
            # if it is just the name of the material make sure it is already defined
            if len(EPConstruction.split("\n")) == 1:
                # if the material is not in the library add it to the library
                if not hb_EPObjectsAux.isEPConstruction(EPConstruction):
                    warningMsg = "Can't find " + EPConstruction + " in EP Construction Library.\n" + \
                                "Add the construction to the library and try again."
                    print warningMsg
                    ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warningMsg)
                    return
            else:
                # it is a full string
                if "CONSTRUCTION" in EPConstruction.upper():
                    added, EPConstruction = hb_EPObjectsAux.addEPObjectToLib(EPConstruction, overwrite = True)
                    
                    if not added:
                        msg = name + " is not added to the project library!"
                        ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, msg)
                        print msg
                        return
                elif "MATERIAL" in EPConstruction.upper():
                    msg = "Your connected EPConstruction_ is just a material and not a full construction. \n You have to pass it through an 'EnergyPlus Construction' component before connecting it here."
                    ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, msg)
                    print msg
                    return
                else:
                    msg = "Your connected EPConstruction_ is not a valid construction."
                    ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, msg)
                    print msg
                    return
            
            try:
                HBSurface.setEPConstruction(EPConstruction)
                print "HBSurface construction has been set to " + EPConstruction
            except:
                warningMsg = "You are using an old version of Honeybee_Honeybee! Update your files and try again."
                print warningMsg
                ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warningMsg)
                return                 
            
        # 1.4 assign RAD Material
        if RADMaterial!=None:
            # if it is just the name of the material make sure it is already defined
            if len(RADMaterial.split(" ")) == 1:
                # if the material is not in the library add it to the library
                if not hb_RADMaterialAUX.isMatrialExistInLibrary(RADMaterial):
                    warningMsg = "Can't find " + RADMaterial + " in RAD Material Library.\n" + \
                                "Add the material to the library and try again."
                    ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warningMsg)
                    return
                
                try:
                    HBSurface.setRADMaterial(RADMaterial)
                    print "HBSurface Radiance Material has been set to " + RADMaterial
                except Exception, e:
                    print e
                    warningMsg = "You are using an old version of Honeybee_Honeybee! Update your files and try again."
                    print warningMsg
                    ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warningMsg)
                    return
                
                addedToLib = True
            else:
                
                # try to add the material to the library
                addedToLib, HBSurface.RadMaterial = hb_RADMaterialAUX.analyseRadMaterials(RADMaterial, True)
                
            if addedToLib==False:
                warningMsg = "Failed to add " + RADMaterial + " to the Library."
                ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warningMsg)
                return
            
        HBSurfaces.append(HBSurface)
    
    # add to the hive
    hb_hive = sc.sticky["honeybee_Hive"]()
    HBSurface  = hb_hive.addToHoneybeeHive(HBSurfaces, ghenv.Component)
    
    return HBSurface
    
    
    

if _geometry != None:
    
    result= main(_geometry, srfName_, srfType_, EPBC_, _EPConstruction_, _RADMaterial_)
    
    if result!=-1:
        HBSurface = result
</item>
                    <item name="Description" type_name="gh_string" type_code="10">Create a Honeybee surface, which can be plugged into the "Run Daylight Sumilation" component or combined with other surfaces to make HBZones with the "createHBZones" component.
-
Provided by Honeybee 0.0.62</item>
                    <item name="EditorLocation" type_name="gh_drawing_point" type_code="30">
                      <X>1390</X>
                      <Y>67</Y>
                    </item>
                    <item name="EditorSize" type_name="gh_drawing_size" type_code="32">
                      <W>1169</W>
                      <H>812</H>
                    </item>
                    <item name="HideInput" type_name="gh_bool" type_code="1">true</item>
                    <item name="HideOutput" type_name="gh_bool" type_code="1">false</item>
                    <item name="IconOverride" type_name="gh_drawing_bitmap" type_code="37">
                      <bitmap length="794">iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOvwAADr8BOAVTJAAAArxJREFUSEvNVWtIk1EYnpuXb6arVJTN0oQgo1RwI4WS8I9ZWoZNN2+L7lKpP0ItCNQsoqILWGo/igok7UerZXSTDDOisjIvBSX0o9uPhKjmFLWe3nffBzn7stWMeuBhh3Pe93nP955znin+NxQrlQqzNJ5U6IgtlZZo2HYlgMa3iXN5wVP4EMvXpUb2dx1PBp7nA0/z8LoxFamGUC5U7Yz6Q5g0GsHRXJUA9BUA97MxcCENA9Y04G4W0J2Ltw0pMGinDVNsiZjiHgzaIN9b57brMdKWCfTmYtCWDjtx4JJIHg82pzuLosOEui0x0AjKHsqdKUrII5ZozUrS4SMJ4EUBRq5nwH6Rdi0JjyevDV9dAfTkAg9NqMifw21rJSay4HjUlhtnA+/X42u7EXZuh4yoHO22NHy5kQG8W4v9G+dxkZOi5BgE+nuXNlUsADrNLu1wl5yDjmzcPLQIEWHq3ZKsC2orC6KBrhxZAXeIRyacLouHv4/qqKTpgjruoUcFnuSgZmusfIsI+w5umu9skVyyO+Tc2uI4LnBClByDQMG79EyZ3nnt5JLdIe5lo7k6Ebpgvz2SrAs8bxF/QdFPvoDwd89ApfKqqi+JAx57cAZ0ixp26BEgqGok2e/w8VIcOLXTAPRvwNDl5RO+4PHk2CH65YfWUrMYM6b7HZFkXVA4RfB2NJbTQT8j16TdDFLiRI+O1xwUgwfkSb15uEYHHKLx5RZtEyXlUZS5MPRVdz3ZM7noaNsq2K3LfhSnudFWMsM+C96cXYI1KRH9lMsv2Mup8gsEEK1mMr4PV8jMXq4WjY/86TMbHM+RsKNlJQqXRvKO2eCmcuLvIj4qzP/8sc0xwB2j85bwJWCbbiI7j9KqWThZDPUMlvAQ4VP74SR0Uuu02gD+kykSlyYPwbNC1Xu1QUIdjcPFqX8OheIbukQwObBaeUMAAAAASUVORK5CYII=</bitmap>
                    </item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">8f4bce16-212a-496e-ae18-9ef93bbec04c</item>
                    <item name="Locked" type_name="gh_bool" type_code="1">true</item>
                    <item name="Name" type_name="gh_string" type_code="10">Honeybee_createHBSrfs</item>
                    <item name="NickName" type_name="gh_string" type_code="10">createHBSrfs</item>
                  </items>
                  <chunks count="2">
                    <chunk name="Attributes">
                      <items count="2">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>344</X>
                          <Y>1729</Y>
                          <W>200</W>
                          <H>124</H>
                        </item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>451</X>
                          <Y>1791</Y>
                        </item>
                      </items>
                    </chunk>
                    <chunk name="ParameterData">
                      <items count="10">
                        <item name="InputCount" type_name="gh_int32" type_code="3">6</item>
                        <item name="InputId" index="0" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="1" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="2" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="3" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="4" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="5" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="OutputCount" type_name="gh_int32" type_code="3">2</item>
                        <item name="OutputId" index="0" type_name="gh_guid" type_code="9">3ede854e-c753-40eb-84cb-b48008f14fd4</item>
                        <item name="OutputId" index="1" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                      </items>
                      <chunks count="8">
                        <chunk name="InputParam" index="0">
                          <items count="12">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">List of Breps</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">d4ba9468-8de9-491b-a0e4-ae944981188c</item>
                            <item name="Locked" type_name="gh_bool" type_code="1">true</item>
                            <item name="Name" type_name="gh_string" type_code="10">_geometry</item>
                            <item name="NickName" type_name="gh_string" type_code="10">_geometry</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="Source" index="0" type_name="gh_guid" type_code="9">8741d683-dfa5-47c1-a755-e1063bfc8fb4</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">c37956f4-d39c-49c7-af71-1e87f8031b26</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>346</X>
                                  <Y>1731</Y>
                                  <W>90</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>392.5</X>
                                  <Y>1741</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="1">
                          <items count="11">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Optional name for surface</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">e76aa2fd-52b4-4c62-845d-c3b3b439e9eb</item>
                            <item name="Locked" type_name="gh_bool" type_code="1">true</item>
                            <item name="Name" type_name="gh_string" type_code="10">srfName_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">srfName_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">37261734-eec7-4f50-b6a8-b8d1f3c4396b</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>346</X>
                                  <Y>1751</Y>
                                  <W>90</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>392.5</X>
                                  <Y>1761</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="2">
                          <items count="12">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Optional input for surface type &gt;
0- 'WALL'
0.5- 'UndergroundWall'
1- 'ROOF'
1.5- 'UndergroundCeiling'
2- 'FLOOR'
2.25- 'UndergroundSlab'
2.5- 'SlabOnGrade'
2.75- 'ExposedFloor'
3- 'CEILING'
4- 'AIRWALL'
5- 'WINDOW'
6- 'SHADING'</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">8367e587-f861-422a-a771-e6825c1a3c58</item>
                            <item name="Locked" type_name="gh_bool" type_code="1">true</item>
                            <item name="Name" type_name="gh_string" type_code="10">srfType_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">srfType_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="Source" index="0" type_name="gh_guid" type_code="9">5ff58fe2-800c-457f-8bdf-fae6d0d2bc28</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">37261734-eec7-4f50-b6a8-b8d1f3c4396b</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>346</X>
                                  <Y>1771</Y>
                                  <W>90</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>392.5</X>
                                  <Y>1781</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="3">
                          <items count="11">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">'Ground', 'Adiabatic', 'Outdoors'</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">79870467-1bc3-4a9c-ac30-fba6c9e5d5f6</item>
                            <item name="Locked" type_name="gh_bool" type_code="1">true</item>
                            <item name="Name" type_name="gh_string" type_code="10">EPBC_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">EPBC_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">37261734-eec7-4f50-b6a8-b8d1f3c4396b</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>346</X>
                                  <Y>1791</Y>
                                  <W>90</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>392.5</X>
                                  <Y>1801</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="4">
                          <items count="11">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Optional EnergyPlus construction</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">aeb94d04-1195-4efc-acca-5a197eb98cd0</item>
                            <item name="Locked" type_name="gh_bool" type_code="1">true</item>
                            <item name="Name" type_name="gh_string" type_code="10">_EPConstruction_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">_EPConstruction_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">37261734-eec7-4f50-b6a8-b8d1f3c4396b</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>346</X>
                                  <Y>1811</Y>
                                  <W>90</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>392.5</X>
                                  <Y>1821</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="5">
                          <items count="11">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Optional Radiance Material</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">80c1531d-9119-408a-a2be-cd8fa93b7161</item>
                            <item name="Locked" type_name="gh_bool" type_code="1">true</item>
                            <item name="Name" type_name="gh_string" type_code="10">_RADMaterial_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">_RADMaterial_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">37261734-eec7-4f50-b6a8-b8d1f3c4396b</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>346</X>
                                  <Y>1831</Y>
                                  <W>90</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>392.5</X>
                                  <Y>1841</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="0">
                          <items count="7">
                            <item name="Description" type_name="gh_string" type_code="10">...</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">39c496be-7798-4da5-b5e0-1e8752552bae</item>
                            <item name="Locked" type_name="gh_bool" type_code="1">true</item>
                            <item name="Name" type_name="gh_string" type_code="10">out</item>
                            <item name="NickName" type_name="gh_string" type_code="10">readMe!</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>466</X>
                                  <Y>1731</Y>
                                  <W>76</W>
                                  <H>60</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>496</X>
                                  <Y>1761</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="1">
                          <items count="8">
                            <item name="Description" type_name="gh_string" type_code="10">Honeybee zone as the result</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">1617c6be-8391-408d-ab4b-998a5ae500e0</item>
                            <item name="Locked" type_name="gh_bool" type_code="1">true</item>
                            <item name="Name" type_name="gh_string" type_code="10">HBSurface</item>
                            <item name="NickName" type_name="gh_string" type_code="10">HBSurface</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SimplifyData" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>466</X>
                                  <Y>1791</Y>
                                  <W>76</W>
                                  <H>60</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>496</X>
                                  <Y>1821</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                      </chunks>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="71">
              <items count="3">
                <item name="GUID" type_name="gh_guid" type_code="9">410755b1-224a-4c1e-a407-bf32fb45ea7e</item>
                <item name="Lib" type_name="gh_guid" type_code="9">16cf80bc-9018-cbdb-2238-976eb17fd30d</item>
                <item name="Name" type_name="gh_string" type_code="10">Honeybee_createHBSrfs</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="11">
                    <item name="CodeInput" type_name="gh_string" type_code="10">#
# Honeybee: A Plugin for Environmental Analysis (GPL) started by Mostapha Sadeghipour Roudsari
# 
# This file is part of Honeybee.
# 
# Copyright (c) 2013-2017, Mostapha Sadeghipour Roudsari &lt;mostapha@ladybug.tools&gt; 
# Honeybee is free software; you can redistribute it and/or modify 
# it under the terms of the GNU General Public License as published 
# by the Free Software Foundation; either version 3 of the License, 
# or (at your option) any later version. 
# 
# Honeybee is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of 
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Honeybee; If not, see &lt;http://www.gnu.org/licenses/&gt;.
# 
# @license GPL-3.0+ &lt;http://spdx.org/licenses/GPL-3.0+&gt;


"""
Create a Honeybee surface, which can be plugged into the "Run Daylight Sumilation" component or combined with other surfaces to make HBZones with the "createHBZones" component.
-
Provided by Honeybee 0.0.62

    Args:
        _geometry: List of Breps
        srfName_: Optional name for surface
        srfType_: Optional input for surface type &gt;
            0- 'WALL'
            0.5- 'UndergroundWall'
            1- 'ROOF'
            1.5- 'UndergroundCeiling'
            2- 'FLOOR'
            2.25- 'UndergroundSlab'
            2.5- 'SlabOnGrade'
            2.75- 'ExposedFloor'
            3- 'CEILING'
            4- 'AIRWALL'
            5- 'WINDOW'
            6- 'SHADING'
        EPBC_: 'Ground', 'Adiabatic', 'Outdoors'
        _EPConstruction_: Optional EnergyPlus construction
        _RADMaterial_: Optional Radiance Material
    Returns:
        readMe!:...
        HBZone: A Honeybee Surface, which can be plugged into the "Run Daylight Sumilation" component or combined with other surfaces to make HBZones with the "createHBZones" component.
"""

import rhinoscriptsyntax as rs
import Rhino as rc
import scriptcontext as sc
import os
import sys
import System
import Grasshopper.Kernel as gh
import uuid

ghenv.Component.Name = 'Honeybee_createHBSrfs'
ghenv.Component.NickName = 'createHBSrfs'
ghenv.Component.Message = 'VER 0.0.62\nJUL_28_2017'
ghenv.Component.IconDisplayMode = ghenv.Component.IconDisplayMode.application
ghenv.Component.Category = "Honeybee"
ghenv.Component.SubCategory = "00 | Honeybee"
#compatibleHBVersion = VER 0.0.57\nNOV_04_2016
#compatibleLBVersion = VER 0.0.59\nFEB_01_2015
try: ghenv.Component.AdditionalHelpFromDocStrings = "3"
except: pass


tolerance = sc.doc.ModelAbsoluteTolerance
import math


def main(geometry, srfName, srfType, EPBC, EPConstruction, RADMaterial):
    # import the classes
    if sc.sticky.has_key('honeybee_release'):

        try:
            if not sc.sticky['honeybee_release'].isCompatible(ghenv.Component): return -1
            if sc.sticky['honeybee_release'].isInputMissing(ghenv.Component): return -1
        except:
            warning = "You need a newer version of Honeybee to use this compoent." + \
            "Use updateHoneybee component to update userObjects.\n" + \
            "If you have already updated userObjects drag Honeybee_Honeybee component " + \
            "into canvas and try again."
            w = gh.GH_RuntimeMessageLevel.Warning
            ghenv.Component.AddRuntimeMessage(w, warning)
            return -1
            
        # don't customize this part
        hb_EPZone = sc.sticky["honeybee_EPZone"]
        hb_EPSrf = sc.sticky["honeybee_EPSurface"]
        hb_EPZoneSurface = sc.sticky["honeybee_EPZoneSurface"]
        hb_EPFenSurface = sc.sticky["honeybee_EPFenSurface"]
        hb_RADMaterialAUX = sc.sticky["honeybee_RADMaterialAUX"]
        hb_EPObjectsAux = sc.sticky["honeybee_EPObjectsAUX"]()
        
    else:
        print "You should first let Honeybee to fly..."
        w = gh.GH_RuntimeMessageLevel.Warning
        ghenv.Component.AddRuntimeMessage(w, "You should first let Honeybee to fly...")
        return
    
    # if the input is mesh, convert it to a surface
    try:
        # check if this is a mesh
        geometry.Faces[0].IsQuad
        # convert to brep
        geometry = rc.Geometry.Brep.CreateFromMesh(geometry, False)
    except:
        pass
    
    HBSurfaces = []
    originalSrfName = srfName
    
    for faceCount in range(geometry.Faces.Count):
        
        # 0. check if user input a name for this surface
        guid = str(uuid.uuid4())
        number = guid.split("-")[-1]
        
        if srfName != None:
            if originalSrfName == None: originalSrfName = srfName
            originalSrfName = originalSrfName.strip().replace(" ","_")
            if geometry.Faces.Count != 1:
                srfName = originalSrfName + "_" + `faceCount`
            else: srfName = originalSrfName
        else:
            # generate a random name
            # the name will be overwritten for energy simulation
            srfName = "".join(guid.split("-")[:-1])
        
        # 1. create initial surface
        HBSurface = hb_EPZoneSurface(geometry.Faces[faceCount].DuplicateFace(False), number, srfName)
        
        # If the user has set a construction as Air Wall, change the surface type to air wall.
        try:
            if EPConstruction.ToUpper() == "AIR WALL":
                if srfType == None or srfType == "4":
                    srfType = 4
                    infoMsg = "Setting the construction to Air Wall will also ensure that the surface has the air wall srfType_."
                    print infoMsg
                else:
                    infoMsg = "By manually setting the srfType_ to be something other than 4: Air Wall on this component and also setting the Air Wall construction, you are overriding the air mixing properties of the air wall and only using the air wall as a construction."
                    print infoMsg
        except: pass
        
        if srfType == 4 or srfType == 4.0 or srfType == "4" or srfType == "4.0":
            try:
                if EPConstruction.ToUpper() == "AIR WALL": pass
                else:
                    infoMsg = "Setting the srfType to 4 will also ensure that the surface has the air wall construction."
                    print infoMsg
            except:
                infoMsg = "Setting the srfType to 4 will also ensure that the surface has the air wall construction."
                print infoMsg
            EPConstruction = "AIR WALL"
        
        # 1.1 check for surface type
        if srfType!=None:
            try:
                # if user uses a number to input type
                try: surfaceType = int(srfType)
                except:
                    if float(srfType) == 0.5 or float(srfType) == 1.5 or float(srfType) == 2.25 or float(srfType) == 2.5 or float(srfType) == 2.75:
                        surfaceType = srfType
                    else: pass
                print "HBSurface Type has been set to " + HBSurface.srfType[float(srfType)]
                
                if surfaceType == 5.0:
                    warningMsg = "If you want to use this model for energy simulation, use addGlazing to add window to surfaces.\n" + \
                                 "It will be fine for Daylighting simulation though."
                    print warningMsg
                    ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Remark, warningMsg)
            except:
                # user uses text as an input (e.g.: wall)
                # convert it to a number if a valid input
                surfaceType = srfType.ToUpper()
                if surfaceType in HBSurface.srfType.keys():
                   surfaceType = HBSurface.srfType[surfaceType.ToUpper()]
                   print "HBSurface Type has been set to " + surfaceType.ToUpper()
            
            if surfaceType in HBSurface.srfType.keys():
                acceptableCombination = [[1,3], [3,1], [0,5], [5,0], [1,5], [5,1], [4,0], [4,1], [4,2], [4,3], [0,4], [1,4], [2,4], [3,4]]
                try:
                    if int(HBSurface.type) != surfaceType and [int(HBSurface.type), surfaceType] not in acceptableCombination:
                        warningMsg = "Normal direction of the surface is not expected for a " + HBSurface.srfType[surfaceType] + ". " + \
                                     "The surface is more likely a " + HBSurface.srfType[int(HBSurface.type)] + ".\n" + \
                                     "Honeybee won't overwrite the type so you may need to manually flip the surface."
                        print warningMsg
                    HBSurface.setType(surfaceType, isUserInput= True)
                except:
                    warningMsg = "You are using an old version of Honeybee_Honeybee! Update your files and try again."
                    print warningMsg
                    ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warningMsg)
                    return
            
        
        # 1.2 assign boundary condition
        if EPBC!= None:
            # only ground, adiabatic and outdoors is valid
            validBC = ['ground', 'adiabatic', 'outdoors']
            if EPBC.lower() in validBC:
                try:
                    HBSurface.setBC(EPBC, isUserInput= True)
                    
                    # change type of surface if BC is set to ground
                    if EPBC.lower()== "ground":
                        HBSurface.setType(int(HBSurface.type) + 0.5, isUserInput= True)
                    
                    
                    if EPBC.lower()== "ground" or EPBC.lower()== "adiabatic":
                        HBSurface.setSunExposure('NoSun')
                        HBSurface.setWindExposure('NoWind')
                    
                    print "HBSurface boundary condition has been set to " + EPBC.upper()
                except:
                    warningMsg = "You are using an old version of Honeybee_Honeybee! Update your files and try again."
                    print warningMsg
                    ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warningMsg)
                    return               
            else:
                print "HBSurface BOUNDARY CONDITION IS NOT VALID."
        
        # 1.3 assign construction for EnergyPlus
        if EPConstruction!=None:
            # if it is just the name of the material make sure it is already defined
            if len(EPConstruction.split("\n")) == 1:
                # if the material is not in the library add it to the library
                if not hb_EPObjectsAux.isEPConstruction(EPConstruction):
                    warningMsg = "Can't find " + EPConstruction + " in EP Construction Library.\n" + \
                                "Add the construction to the library and try again."
                    print warningMsg
                    ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warningMsg)
                    return
            else:
                # it is a full string
                if "CONSTRUCTION" in EPConstruction.upper():
                    added, EPConstruction = hb_EPObjectsAux.addEPObjectToLib(EPConstruction, overwrite = True)
                    
                    if not added:
                        msg = name + " is not added to the project library!"
                        ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, msg)
                        print msg
                        return
                elif "MATERIAL" in EPConstruction.upper():
                    msg = "Your connected EPConstruction_ is just a material and not a full construction. \n You have to pass it through an 'EnergyPlus Construction' component before connecting it here."
                    ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, msg)
                    print msg
                    return
                else:
                    msg = "Your connected EPConstruction_ is not a valid construction."
                    ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, msg)
                    print msg
                    return
            
            try:
                HBSurface.setEPConstruction(EPConstruction)
                print "HBSurface construction has been set to " + EPConstruction
            except:
                warningMsg = "You are using an old version of Honeybee_Honeybee! Update your files and try again."
                print warningMsg
                ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warningMsg)
                return                 
            
        # 1.4 assign RAD Material
        if RADMaterial!=None:
            # if it is just the name of the material make sure it is already defined
            if len(RADMaterial.split(" ")) == 1:
                # if the material is not in the library add it to the library
                if not hb_RADMaterialAUX.isMatrialExistInLibrary(RADMaterial):
                    warningMsg = "Can't find " + RADMaterial + " in RAD Material Library.\n" + \
                                "Add the material to the library and try again."
                    ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warningMsg)
                    return
                
                try:
                    HBSurface.setRADMaterial(RADMaterial)
                    print "HBSurface Radiance Material has been set to " + RADMaterial
                except Exception, e:
                    print e
                    warningMsg = "You are using an old version of Honeybee_Honeybee! Update your files and try again."
                    print warningMsg
                    ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warningMsg)
                    return
                
                addedToLib = True
            else:
                
                # try to add the material to the library
                addedToLib, HBSurface.RadMaterial = hb_RADMaterialAUX.analyseRadMaterials(RADMaterial, True)
                
            if addedToLib==False:
                warningMsg = "Failed to add " + RADMaterial + " to the Library."
                ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warningMsg)
                return
            
        HBSurfaces.append(HBSurface)
    
    # add to the hive
    hb_hive = sc.sticky["honeybee_Hive"]()
    HBSurface  = hb_hive.addToHoneybeeHive(HBSurfaces, ghenv.Component)
    
    return HBSurface
    
    
    

if _geometry != None:
    
    result= main(_geometry, srfName_, srfType_, EPBC_, _EPConstruction_, _RADMaterial_)
    
    if result!=-1:
        HBSurface = result
</item>
                    <item name="Description" type_name="gh_string" type_code="10">Create a Honeybee surface, which can be plugged into the "Run Daylight Sumilation" component or combined with other surfaces to make HBZones with the "createHBZones" component.
-
Provided by Honeybee 0.0.62</item>
                    <item name="EditorLocation" type_name="gh_drawing_point" type_code="30">
                      <X>1390</X>
                      <Y>67</Y>
                    </item>
                    <item name="EditorSize" type_name="gh_drawing_size" type_code="32">
                      <W>1169</W>
                      <H>812</H>
                    </item>
                    <item name="HideInput" type_name="gh_bool" type_code="1">true</item>
                    <item name="HideOutput" type_name="gh_bool" type_code="1">false</item>
                    <item name="IconOverride" type_name="gh_drawing_bitmap" type_code="37">
                      <bitmap length="794">iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOvwAADr8BOAVTJAAAArxJREFUSEvNVWtIk1EYnpuXb6arVJTN0oQgo1RwI4WS8I9ZWoZNN2+L7lKpP0ItCNQsoqILWGo/igok7UerZXSTDDOisjIvBSX0o9uPhKjmFLWe3nffBzn7stWMeuBhh3Pe93nP955znin+NxQrlQqzNJ5U6IgtlZZo2HYlgMa3iXN5wVP4EMvXpUb2dx1PBp7nA0/z8LoxFamGUC5U7Yz6Q5g0GsHRXJUA9BUA97MxcCENA9Y04G4W0J2Ltw0pMGinDVNsiZjiHgzaIN9b57brMdKWCfTmYtCWDjtx4JJIHg82pzuLosOEui0x0AjKHsqdKUrII5ZozUrS4SMJ4EUBRq5nwH6Rdi0JjyevDV9dAfTkAg9NqMifw21rJSay4HjUlhtnA+/X42u7EXZuh4yoHO22NHy5kQG8W4v9G+dxkZOi5BgE+nuXNlUsADrNLu1wl5yDjmzcPLQIEWHq3ZKsC2orC6KBrhxZAXeIRyacLouHv4/qqKTpgjruoUcFnuSgZmusfIsI+w5umu9skVyyO+Tc2uI4LnBClByDQMG79EyZ3nnt5JLdIe5lo7k6Ebpgvz2SrAs8bxF/QdFPvoDwd89ApfKqqi+JAx57cAZ0ixp26BEgqGok2e/w8VIcOLXTAPRvwNDl5RO+4PHk2CH65YfWUrMYM6b7HZFkXVA4RfB2NJbTQT8j16TdDFLiRI+O1xwUgwfkSb15uEYHHKLx5RZtEyXlUZS5MPRVdz3ZM7noaNsq2K3LfhSnudFWMsM+C96cXYI1KRH9lMsv2Mup8gsEEK1mMr4PV8jMXq4WjY/86TMbHM+RsKNlJQqXRvKO2eCmcuLvIj4qzP/8sc0xwB2j85bwJWCbbiI7j9KqWThZDPUMlvAQ4VP74SR0Uuu02gD+kykSlyYPwbNC1Xu1QUIdjcPFqX8OheIbukQwObBaeUMAAAAASUVORK5CYII=</bitmap>
                    </item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">e403aff4-5af9-4fb0-a917-e5b68493b110</item>
                    <item name="Locked" type_name="gh_bool" type_code="1">true</item>
                    <item name="Name" type_name="gh_string" type_code="10">Honeybee_createHBSrfs</item>
                    <item name="NickName" type_name="gh_string" type_code="10">createHBSrfs</item>
                  </items>
                  <chunks count="2">
                    <chunk name="Attributes">
                      <items count="2">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>337</X>
                          <Y>1891</Y>
                          <W>200</W>
                          <H>124</H>
                        </item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>444</X>
                          <Y>1953</Y>
                        </item>
                      </items>
                    </chunk>
                    <chunk name="ParameterData">
                      <items count="10">
                        <item name="InputCount" type_name="gh_int32" type_code="3">6</item>
                        <item name="InputId" index="0" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="1" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="2" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="3" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="4" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="5" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="OutputCount" type_name="gh_int32" type_code="3">2</item>
                        <item name="OutputId" index="0" type_name="gh_guid" type_code="9">3ede854e-c753-40eb-84cb-b48008f14fd4</item>
                        <item name="OutputId" index="1" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                      </items>
                      <chunks count="8">
                        <chunk name="InputParam" index="0">
                          <items count="12">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">List of Breps</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">aa0d4033-995d-42e2-8a0a-6a2910e44da8</item>
                            <item name="Locked" type_name="gh_bool" type_code="1">true</item>
                            <item name="Name" type_name="gh_string" type_code="10">_geometry</item>
                            <item name="NickName" type_name="gh_string" type_code="10">_geometry</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="Source" index="0" type_name="gh_guid" type_code="9">ed13e53a-5fa2-4cff-bdd0-881d36ee4a07</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">c37956f4-d39c-49c7-af71-1e87f8031b26</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>339</X>
                                  <Y>1893</Y>
                                  <W>90</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>385.5</X>
                                  <Y>1903</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="1">
                          <items count="11">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Optional name for surface</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">385b1c6f-68a6-42a7-afa2-ce96759e7f4e</item>
                            <item name="Locked" type_name="gh_bool" type_code="1">true</item>
                            <item name="Name" type_name="gh_string" type_code="10">srfName_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">srfName_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">37261734-eec7-4f50-b6a8-b8d1f3c4396b</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>339</X>
                                  <Y>1913</Y>
                                  <W>90</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>385.5</X>
                                  <Y>1923</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="2">
                          <items count="12">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Optional input for surface type &gt;
0- 'WALL'
0.5- 'UndergroundWall'
1- 'ROOF'
1.5- 'UndergroundCeiling'
2- 'FLOOR'
2.25- 'UndergroundSlab'
2.5- 'SlabOnGrade'
2.75- 'ExposedFloor'
3- 'CEILING'
4- 'AIRWALL'
5- 'WINDOW'
6- 'SHADING'</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">f74b16eb-a7e4-49a3-afcd-048aa5a2ce7c</item>
                            <item name="Locked" type_name="gh_bool" type_code="1">true</item>
                            <item name="Name" type_name="gh_string" type_code="10">srfType_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">srfType_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="Source" index="0" type_name="gh_guid" type_code="9">dbc80b80-e7f0-4671-8c3e-f9f0387035b6</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">37261734-eec7-4f50-b6a8-b8d1f3c4396b</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>339</X>
                                  <Y>1933</Y>
                                  <W>90</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>385.5</X>
                                  <Y>1943</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="3">
                          <items count="11">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">'Ground', 'Adiabatic', 'Outdoors'</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">5ed39272-4027-46fa-92d9-50a0dfda98e1</item>
                            <item name="Locked" type_name="gh_bool" type_code="1">true</item>
                            <item name="Name" type_name="gh_string" type_code="10">EPBC_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">EPBC_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">37261734-eec7-4f50-b6a8-b8d1f3c4396b</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>339</X>
                                  <Y>1953</Y>
                                  <W>90</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>385.5</X>
                                  <Y>1963</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="4">
                          <items count="11">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Optional EnergyPlus construction</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">244bf6a0-55a5-4567-b201-dcc12e53e02d</item>
                            <item name="Locked" type_name="gh_bool" type_code="1">true</item>
                            <item name="Name" type_name="gh_string" type_code="10">_EPConstruction_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">_EPConstruction_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">37261734-eec7-4f50-b6a8-b8d1f3c4396b</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>339</X>
                                  <Y>1973</Y>
                                  <W>90</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>385.5</X>
                                  <Y>1983</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="5">
                          <items count="11">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Optional Radiance Material</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">def2029d-02b6-4ac4-9a63-155631b0799a</item>
                            <item name="Locked" type_name="gh_bool" type_code="1">true</item>
                            <item name="Name" type_name="gh_string" type_code="10">_RADMaterial_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">_RADMaterial_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">37261734-eec7-4f50-b6a8-b8d1f3c4396b</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>339</X>
                                  <Y>1993</Y>
                                  <W>90</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>385.5</X>
                                  <Y>2003</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="0">
                          <items count="7">
                            <item name="Description" type_name="gh_string" type_code="10">...</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">9c722a16-ed5d-4b7c-8806-3223933c80dd</item>
                            <item name="Locked" type_name="gh_bool" type_code="1">true</item>
                            <item name="Name" type_name="gh_string" type_code="10">out</item>
                            <item name="NickName" type_name="gh_string" type_code="10">readMe!</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>459</X>
                                  <Y>1893</Y>
                                  <W>76</W>
                                  <H>60</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>489</X>
                                  <Y>1923</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="1">
                          <items count="8">
                            <item name="Description" type_name="gh_string" type_code="10">Honeybee zone as the result</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">eb79e439-b683-4e31-84b1-53dcf8e6e30b</item>
                            <item name="Locked" type_name="gh_bool" type_code="1">true</item>
                            <item name="Name" type_name="gh_string" type_code="10">HBSurface</item>
                            <item name="NickName" type_name="gh_string" type_code="10">HBSurface</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SimplifyData" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>459</X>
                                  <Y>1953</Y>
                                  <W>76</W>
                                  <H>60</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>489</X>
                                  <Y>1983</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                      </chunks>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="72">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">59e0b89a-e487-49f8-bab8-b5bab16be14c</item>
                <item name="Name" type_name="gh_string" type_code="10">Panel</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="9">
                    <item name="Description" type_name="gh_string" type_code="10">A panel for custom notes and text values</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">1fa7a603-1c61-40bd-aebf-127783406741</item>
                    <item name="Locked" type_name="gh_bool" type_code="1">true</item>
                    <item name="Name" type_name="gh_string" type_code="10">Panel</item>
                    <item name="NickName" type_name="gh_string" type_code="10"></item>
                    <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                    <item name="ScrollRatio" type_name="gh_double" type_code="6">0</item>
                    <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                    <item name="UserText" type_name="gh_string" type_code="10">0</item>
                  </items>
                  <chunks count="2">
                    <chunk name="Attributes">
                      <items count="5">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>251</X>
                          <Y>1376</Y>
                          <W>50</W>
                          <H>20</H>
                        </item>
                        <item name="MarginLeft" type_name="gh_int32" type_code="3">0</item>
                        <item name="MarginRight" type_name="gh_int32" type_code="3">0</item>
                        <item name="MarginTop" type_name="gh_int32" type_code="3">0</item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>251.531</X>
                          <Y>1376.221</Y>
                        </item>
                      </items>
                    </chunk>
                    <chunk name="PanelProperties">
                      <items count="6">
                        <item name="Colour" type_name="gh_drawing_color" type_code="36">
                          <ARGB>255;255;250;90</ARGB>
                        </item>
                        <item name="DrawIndices" type_name="gh_bool" type_code="1">true</item>
                        <item name="DrawPaths" type_name="gh_bool" type_code="1">true</item>
                        <item name="Multiline" type_name="gh_bool" type_code="1">true</item>
                        <item name="Stream" type_name="gh_bool" type_code="1">false</item>
                        <item name="Wrap" type_name="gh_bool" type_code="1">true</item>
                      </items>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="73">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">59e0b89a-e487-49f8-bab8-b5bab16be14c</item>
                <item name="Name" type_name="gh_string" type_code="10">Panel</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="9">
                    <item name="Description" type_name="gh_string" type_code="10">A panel for custom notes and text values</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">324d0099-ad92-45fa-88db-f0e2838e3d53</item>
                    <item name="Locked" type_name="gh_bool" type_code="1">true</item>
                    <item name="Name" type_name="gh_string" type_code="10">Panel</item>
                    <item name="NickName" type_name="gh_string" type_code="10"></item>
                    <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                    <item name="ScrollRatio" type_name="gh_double" type_code="6">0</item>
                    <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                    <item name="UserText" type_name="gh_string" type_code="10">0</item>
                  </items>
                  <chunks count="2">
                    <chunk name="Attributes">
                      <items count="5">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>258</X>
                          <Y>1572</Y>
                          <W>50</W>
                          <H>20</H>
                        </item>
                        <item name="MarginLeft" type_name="gh_int32" type_code="3">0</item>
                        <item name="MarginRight" type_name="gh_int32" type_code="3">0</item>
                        <item name="MarginTop" type_name="gh_int32" type_code="3">0</item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>258.7065</X>
                          <Y>1572.752</Y>
                        </item>
                      </items>
                    </chunk>
                    <chunk name="PanelProperties">
                      <items count="6">
                        <item name="Colour" type_name="gh_drawing_color" type_code="36">
                          <ARGB>255;255;250;90</ARGB>
                        </item>
                        <item name="DrawIndices" type_name="gh_bool" type_code="1">true</item>
                        <item name="DrawPaths" type_name="gh_bool" type_code="1">true</item>
                        <item name="Multiline" type_name="gh_bool" type_code="1">true</item>
                        <item name="Stream" type_name="gh_bool" type_code="1">false</item>
                        <item name="Wrap" type_name="gh_bool" type_code="1">true</item>
                      </items>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="74">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">59e0b89a-e487-49f8-bab8-b5bab16be14c</item>
                <item name="Name" type_name="gh_string" type_code="10">Panel</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="9">
                    <item name="Description" type_name="gh_string" type_code="10">A panel for custom notes and text values</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">5ff58fe2-800c-457f-8bdf-fae6d0d2bc28</item>
                    <item name="Locked" type_name="gh_bool" type_code="1">true</item>
                    <item name="Name" type_name="gh_string" type_code="10">Panel</item>
                    <item name="NickName" type_name="gh_string" type_code="10"></item>
                    <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                    <item name="ScrollRatio" type_name="gh_double" type_code="6">0</item>
                    <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                    <item name="UserText" type_name="gh_string" type_code="10">3</item>
                  </items>
                  <chunks count="2">
                    <chunk name="Attributes">
                      <items count="5">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>245</X>
                          <Y>1773</Y>
                          <W>50</W>
                          <H>20</H>
                        </item>
                        <item name="MarginLeft" type_name="gh_int32" type_code="3">0</item>
                        <item name="MarginRight" type_name="gh_int32" type_code="3">0</item>
                        <item name="MarginTop" type_name="gh_int32" type_code="3">0</item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>245.5365</X>
                          <Y>1773.457</Y>
                        </item>
                      </items>
                    </chunk>
                    <chunk name="PanelProperties">
                      <items count="6">
                        <item name="Colour" type_name="gh_drawing_color" type_code="36">
                          <ARGB>255;255;250;90</ARGB>
                        </item>
                        <item name="DrawIndices" type_name="gh_bool" type_code="1">true</item>
                        <item name="DrawPaths" type_name="gh_bool" type_code="1">true</item>
                        <item name="Multiline" type_name="gh_bool" type_code="1">true</item>
                        <item name="Stream" type_name="gh_bool" type_code="1">false</item>
                        <item name="Wrap" type_name="gh_bool" type_code="1">true</item>
                      </items>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="75">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">59e0b89a-e487-49f8-bab8-b5bab16be14c</item>
                <item name="Name" type_name="gh_string" type_code="10">Panel</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="9">
                    <item name="Description" type_name="gh_string" type_code="10">A panel for custom notes and text values</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">dbc80b80-e7f0-4671-8c3e-f9f0387035b6</item>
                    <item name="Locked" type_name="gh_bool" type_code="1">true</item>
                    <item name="Name" type_name="gh_string" type_code="10">Panel</item>
                    <item name="NickName" type_name="gh_string" type_code="10"></item>
                    <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                    <item name="ScrollRatio" type_name="gh_double" type_code="6">0</item>
                    <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                    <item name="UserText" type_name="gh_string" type_code="10">2</item>
                  </items>
                  <chunks count="2">
                    <chunk name="Attributes">
                      <items count="5">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>255</X>
                          <Y>1935</Y>
                          <W>50</W>
                          <H>20</H>
                        </item>
                        <item name="MarginLeft" type_name="gh_int32" type_code="3">0</item>
                        <item name="MarginRight" type_name="gh_int32" type_code="3">0</item>
                        <item name="MarginTop" type_name="gh_int32" type_code="3">0</item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>255.1709</X>
                          <Y>1935.764</Y>
                        </item>
                      </items>
                    </chunk>
                    <chunk name="PanelProperties">
                      <items count="6">
                        <item name="Colour" type_name="gh_drawing_color" type_code="36">
                          <ARGB>255;255;250;90</ARGB>
                        </item>
                        <item name="DrawIndices" type_name="gh_bool" type_code="1">true</item>
                        <item name="DrawPaths" type_name="gh_bool" type_code="1">true</item>
                        <item name="Multiline" type_name="gh_bool" type_code="1">true</item>
                        <item name="Stream" type_name="gh_bool" type_code="1">false</item>
                        <item name="Wrap" type_name="gh_bool" type_code="1">true</item>
                      </items>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="76">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">919e146f-30ae-4aae-be34-4d72f555e7da</item>
                <item name="Name" type_name="gh_string" type_code="10">Brep</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="7">
                    <item name="Description" type_name="gh_string" type_code="10">Contains a collection of Breps (Boundary REPresentations)</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">96594b45-29ba-4733-af01-3dea24fcc6b0</item>
                    <item name="Locked" type_name="gh_bool" type_code="1">true</item>
                    <item name="Name" type_name="gh_string" type_code="10">Brep</item>
                    <item name="NickName" type_name="gh_string" type_code="10">Brep</item>
                    <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                    <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                  </items>
                  <chunks count="2">
                    <chunk name="Attributes">
                      <items count="2">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>564</X>
                          <Y>1433</Y>
                          <W>50</W>
                          <H>24</H>
                        </item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>589.1315</X>
                          <Y>1445.682</Y>
                        </item>
                      </items>
                    </chunk>
                    <chunk name="PersistentData">
                      <items count="1">
                        <item name="Count" type_name="gh_int32" type_code="3">1</item>
                      </items>
                      <chunks count="1">
                        <chunk name="Branch" index="0">
                          <items count="2">
                            <item name="Count" type_name="gh_int32" type_code="3">2</item>
                            <item name="Path" type_name="gh_string" type_code="10">{0}</item>
                          </items>
                          <chunks count="2">
                            <chunk name="Item" index="0">
                              <items count="1">
                                <item name="RefID" type_name="gh_guid" type_code="9">2bee0138-3f37-4db5-95e2-15a9955da823</item>
                              </items>
                            </chunk>
                            <chunk name="Item" index="1">
                              <items count="1">
                                <item name="RefID" type_name="gh_guid" type_code="9">22a92b87-e1d3-46d5-81f8-da40ebeedfa7</item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                      </chunks>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="77">
              <items count="3">
                <item name="GUID" type_name="gh_guid" type_code="9">410755b1-224a-4c1e-a407-bf32fb45ea7e</item>
                <item name="Lib" type_name="gh_guid" type_code="9">16cf80bc-9018-cbdb-2238-976eb17fd30d</item>
                <item name="Name" type_name="gh_string" type_code="10">Honeybee_addHBGlz</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="11">
                    <item name="CodeInput" type_name="gh_string" type_code="10">#
# Honeybee: A Plugin for Environmental Analysis (GPL) started by Mostapha Sadeghipour Roudsari
# 
# This file is part of Honeybee.
# 
# Copyright (c) 2013-2017, Mostapha Sadeghipour Roudsari &lt;mostapha@ladybug.tools&gt; 
# Honeybee is free software; you can redistribute it and/or modify 
# it under the terms of the GNU General Public License as published 
# by the Free Software Foundation; either version 3 of the License, 
# or (at your option) any later version. 
# 
# Honeybee is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of 
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Honeybee; If not, see &lt;http://www.gnu.org/licenses/&gt;.
# 
# @license GPL-3.0+ &lt;http://spdx.org/licenses/GPL-3.0+&gt;


"""
Use this component to add a custom glazing surface to a HBSurface or HBZone.

-
Provided by Honeybee 0.0.62

    Args:
        _HBObj: A HBZone or HBSurface to which you would like to add a customized glazing surface.
        _childSurfaces: A surface or list of surfaces that represent the custom window(s) that you would like to add.  Note that these surfaces should be co-planar to the connected HBSurface or one of the surfaces of the connected HBZones.
        childSurfacesName_: An optional list of names for child surfaces. If names are provided the length of names should be the same as _childSurfaces.
        EPConstructions_: An optional list of EnergyPlus constructions to set the material construction of the window added to the HBSurface or HBZone.  This can be either the name of a window construction from the OpenStudio library (coming out of the 'Honeybee_Call from EP Construction Library' component) or a custom window construction you created from the 'Honeybee_EnergyPlus Construction' component. The list should match with childSurfaces list. In case the list doesn't match the first construction will be used for all surfaces.
        RADMaterials_: An optional Radiance material to set the material of the window added to the HBSurface or HBZone.  This can be either the name of a window material from the default Radaince library (coming out of the 'Honeybee_Call from Radiance Library' component) or a custom window material you created from any of the Radiance material components (like the 'Honeybee_Radiance Glass Material' component). The list should match with childSurfaces list. In case the list doesn't match the first material will be used for all surfaces.
    Returns:
        readMe!:...
        HBObjWGLZ: The Honeybee surface or zone with assigned glazing (in case of success).
"""

import rhinoscriptsyntax as rs
import Rhino as rc
import scriptcontext as sc
import os
import sys
import System
import Grasshopper.Kernel as gh
import uuid

ghenv.Component.Name = 'Honeybee_addHBGlz'
ghenv.Component.NickName = 'addHBGlz'
ghenv.Component.Message = 'VER 0.0.62\nJUL_28_2017'
ghenv.Component.IconDisplayMode = ghenv.Component.IconDisplayMode.application
ghenv.Component.Category = "Honeybee"
ghenv.Component.SubCategory = "00 | Honeybee"
#compatibleHBVersion = VER 0.0.57\nNOV_04_2016
#compatibleLBVersion = VER 0.0.59\nFEB_01_2015
try: ghenv.Component.AdditionalHelpFromDocStrings = "3"
except: pass

def main(HBObject, childSurfaces, childSurfacesName, EPConstructions, RADMaterials, tolerance):

    def addPotentialChildSurface(HBSurface):
        
        glzCount = 0
        for srfCount, srf in enumerate(childSurfaces):
            # check if the surface is located on the base surface
            if HBSurface.isPossibleChild(srf, tolerance):
                # if yes then create the child surface
                guid = str(uuid.uuid4())
                try:
                    name = childSurfacesName[srfCount]
                except:
                   name = HBSurface.name + "_glz_" + str(glzCount) + "_" + "".join(guid.split("-")[:-1])

                number = guid.split("-")[-1]
                glzCount += 1
                HBFenSrf = hb_EPFenSurface(srf, number, name, HBSurface, 5)
                
                # check normal direction
                if not rc.Geometry.Vector3d.VectorAngle(HBFenSrf.normalVector, HBFenSrf.parent.normalVector)&lt;sc.doc.ModelAngleToleranceRadians:
                    HBFenSrf.geometry.Flip()
                    HBFenSrf.normalVector.Reverse()
                
                if len(EPConstructions)!=0:
                    
                    try:
                        EPConstruction = EPConstructions[srfCount]
                    except:
                        EPConstruction = EPConstructions[0]
                    
                    if EPConstruction == None: continue
                        
                    # if it is just the name of the material make sure it is already defined
                    if len(EPConstruction.split("\n")) == 1:
                        # if the material is not in the library add it to the library
                        if not hb_EPObjectsAux.isEPConstruction(EPConstruction):
                            warningMsg = "Can't find " + EPConstruction + " in EP Construction Library.\n" + \
                                        "Add the construction to the library and try again."
                            ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warningMsg)
                            return 
                    else:
                        # it is a full string.
                        if EPConstruction.startswith('WindowMaterial:'):
                            warningMsg = "Your window construction, " + EPConstruction.split('\n')[1].split(',')[0] + ", is a window material and not a full window construction.\n" + \
                                        "Pass this window material through a 'Honeybee_EnergyPlus Construction' component cand connect the construction to this one."
                            ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warningMsg)
                            return 
                        added, EPConstruction = hb_EPObjectsAux.addEPObjectToLib(EPConstruction, overwrite = True)
                        
                        if not added:
                            msg = EPConstruction + " is not added to the project library!"
                            ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, msg)
                            print msg
                            return 
                    
                    try:
                        HBFenSrf.setEPConstruction(EPConstruction)
                    except:
                        warningMsg = "You are using an old version of Honeybee_Honeybee! Update your files and try again."
                        print warningMsg
                        ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warningMsg)
                        return -1
                    
                
                
                if len(RADMaterials)!= 0:
                    
                    try:
                        RADMaterial = RADMaterials[srfCount]
                    except:
                        RADMaterial = RADMaterials[0]
                    
                    if RADMaterial == None: continue
                    
                    if len(RADMaterial.strip().split(" ")) == 1:
                        if not hb_RADMaterialAUX.isMatrialExistInLibrary(RADMaterial):
                            warningMsg = "Can't find " + RADMaterial + " in RAD Material Library.\n" + \
                                "Add the material to the library and try again."
                            ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warningMsg)
                            return
                    
                    addedToLib, HBFenSrf.RadMaterial = hb_RADMaterialAUX.analyseRadMaterials(RADMaterial, True)
                    materialType = hb_RADMaterialAUX.getRADMaterialType(HBFenSrf.RadMaterial)
                    if materialType == 'plastic':
                        warningMsg = HBFenSrf.RadMaterial + " is not a typical glass material. Are you sure you selected the right material?"
                        ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, warningMsg)
                        return
    
                # add it to the base surface
                HBSurface.addChildSrf(HBFenSrf)
                HBSurface.calculatePunchedSurface()


    # import the classes
    if sc.sticky.has_key('honeybee_release'):
        try:
            if not sc.sticky['honeybee_release'].isCompatible(ghenv.Component): return -1
            if sc.sticky['honeybee_release'].isInputMissing(ghenv.Component): return -1
        except:
            warning = "You need a newer version of Honeybee to use this compoent." + \
            "Use updateHoneybee component to update userObjects.\n" + \
            "If you have already updated userObjects drag Honeybee_Honeybee component " + \
            "into canvas and try again."
            w = gh.GH_RuntimeMessageLevel.Warning
            ghenv.Component.AddRuntimeMessage(w, warning)
            return -1
            
        # don't customize this part
        hb_EPZone = sc.sticky["honeybee_EPZone"]
        hb_EPSrf = sc.sticky["honeybee_EPSurface"]
        hb_EPZoneSurface = sc.sticky["honeybee_EPZoneSurface"]
        hb_EPFenSurface = sc.sticky["honeybee_EPFenSurface"]
        hb_EPObjectsAux = sc.sticky["honeybee_EPObjectsAUX"]()
        hb_RADMaterialAUX = sc.sticky["honeybee_RADMaterialAUX"]
        
        # if any of child surfaces is mesh, convert them to a surface
        cleanChildSurfaces = []
        for srf in childSurfaces:
            try:
                # check if this is a mesh
                srf.Faces[0].IsQuad
                # convert to brep
                srf = rc.Geometry.Brep.CreateFromMesh(srf, False)
            except:
                pass
            
            # collect surfaces
            cleanChildSurfaces.append(srf)
        
        # check number of faces and names
        if len(childSurfacesName)!= 0:
            if len(childSurfacesName)!=len(childSurfaces):
                nameCount = len(childSurfacesName)
                srfCount = len(childSurfaces)
                raise Exception("Length of _childSurfaces [%s] should match length of childSurfacesName [%s]"%(srfCount, nameCount))
        
        # call the surface from the hive
        hb_hive = sc.sticky["honeybee_Hive"]()
        try:
            HBObject = hb_hive.callFromHoneybeeHive([HBObject])[0]
        except:
            raise TypeError("Wrong input type for _HBObj. Connect a Honeybee Surface or a HoneybeeZone to HBObject input")

        # check if the object is a zone or a surface
        if HBObject.objectType == "HBZone":
            # add window for each surface
            for HBSurface in HBObject.surfaces:
                addPotentialChildSurface(HBSurface)
        else:
            # add window to the HBSurface
            addPotentialChildSurface(HBObject)
        
        # add to the hive
        HBObject  = hb_hive.addToHoneybeeHive([HBObject], ghenv.Component)
        
        return HBObject
        
    else:
        print "You should first let Honeybee fly..."
        w = gh.GH_RuntimeMessageLevel.Warning
        ghenv.Component.AddRuntimeMessage(w, "You should first let Honeybee fly...")
        return -1

if _HBObj!=None and len(_childSurfaces) and _childSurfaces[0]!=None:
    
    # if tolerance_==None:
    tolerance_ = sc.doc.ModelAbsoluteTolerance
        
    results = main(_HBObj, _childSurfaces, childSurfacesName_, EPConstructions_, RADMaterials_, tolerance_)
    
    if results != -1:
        HBObjWGLZ = results</item>
                    <item name="Description" type_name="gh_string" type_code="10">Use this component to add a custom glazing surface to a HBSurface or HBZone.
-
Provided by Honeybee 0.0.62</item>
                    <item name="EditorLocation" type_name="gh_drawing_point" type_code="30">
                      <X>61</X>
                      <Y>92</Y>
                    </item>
                    <item name="EditorSize" type_name="gh_drawing_size" type_code="32">
                      <W>1528</W>
                      <H>926</H>
                    </item>
                    <item name="HideInput" type_name="gh_bool" type_code="1">true</item>
                    <item name="HideOutput" type_name="gh_bool" type_code="1">true</item>
                    <item name="IconOverride" type_name="gh_drawing_bitmap" type_code="37">
                      <bitmap length="1313">iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOvwAADr8BOAVTJAAABMNJREFUSEu9VWtQlGUUfteFhXVxKS4Zl7gOoVgMgqaDCwqSJHEN47awu8hNGO1CyKWUFYEyMCKDuCXQlOmMDSag1hhIzjBkgor6o/rRjGWFpGISKqPwdN7v+0CYmCZr6sw8855n3/d7zrfnnO+87P+yWEKdylS+00qtKCK/nkNtYVJkKpft5Hsc1paKrbS+JfFae2vzPFrfk3iFer7Jq7TyZzlPIkxbi7ebGjkbbcfzUzx/SwpyBIcx4bGbOattx6e5weN65rMugq8NdsTrye7XpvayI1xRTOdTIl1BgUGaraI0maXKtLS3OgC4mg6cSQDOJ4o4R/6g5HOcnbE3xS9IPj/H+WgWqnO8bjhYK/k/F+0hC5PXPt2xYgJ9G4AvYoC+aKArCOgJBb5cL+LE2vt+zzriwbRKvJv2+sIw2RVLLxgPfajTXUrtu5K8YM0V6V7AJQPO1AYi0McO+vRQhAYvRsByJwT5uyNZH4zAp5wEHhXuC50hRPA54hIDEPW0H7rLfIHLqYhf48BT1ChKi9b6ZhoFGMnE/iTKn7serBtgDUNgdZfB6n8Ga74p+hxNV2fzz+msZhcOJCmA6+kweDndk8tlNZI2Y9ZqRWGH0esevtVi0OgERU4T2Ff0UOcdsCPjBFrbxySf0Hl7Nj9LZ5+vQkeGGvglFUbd40OONubbJHnGVGbyso9j/SbwfQq+LnKAqW43WO8kWNvI30PPBOZtPYRTOzyAH3XYEGjPU/S+qC5aY1XWEuBKGjrSFoAFbgEboLeaS2wunKazEeVoM8wXOjFutVCDJlFatL2VGRTg13QcTlWBrcr5RwEOGVTAcBo2R7mNWSjluyVtxmwtFflHeQ2+ScL5EhcoNtWBnXyAFFE6ZYYGHH9xIXWRHiW6RVfsbcyLJXnGqGerjLk+k/hBj5O5j2DecyVikecSmwu8BrmfoM/oTgF0iPK3m/0lk9W/k/0EMJSGo5mWYMEvg/U/QACezlAjDmp5m2YgRiMEaBalyWQyVlO7xZtabCOOZVKR1xWAXaSHOqgVZ7Zj++/0263ZnLfsBTobU4k2nVKoQUG8x4i1pWmZJC/UIO8Yr8F3WvQXO4PF7wE7SMIt9DG1jNKH9pOIVhLcS288xT+gYE3DYIfpbGgl2rOsKAupKEx0v2ZraVYqyQvWUM1TdEmPgZoAaGhUaFa4IjY+EHHaYGiWOwtI0IUgMnqlxF2QnLYeIUFLoFnmAo2/B8410EwijehVQopaRGnRGt7eRAEG4jF5nIZdbyQNMBp0XTTQ+NA78YwI7vPBNs3XEOeDjw/FMNz9LIomcOKfi6w0k79hLPCd5AHGOsJxuzNCwK3OcAF/xad8Dv4sH9nFWs/hR61mtKm1hSL/CK/BqTjh0L8BBhPwQpjzqFopr5DkBWttyVsK3MgELiaJoLnO/9E07yefXygzOb9ouM/X03F0+ZB/Jxv81iPN+21Ktj95rSMOlK/Edq2ngMaXfND8ylJsk/iHBX7Yk/Pk9P5HhX4oT10s+KWGRdhXtAzbkz1Rttkb/PolzX2itGj6BSp5o8tCJe9dHrnZzsqswtHGbNcUd7NTlj1sYVo9xV3tVKU08xu4L5PJGt3tVPyKFPYIfNBpCf+1MfYHvContdB/4OwAAAAASUVORK5CYII=</bitmap>
                    </item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">78e2b317-b006-437b-bff8-7ebc895b2c42</item>
                    <item name="Locked" type_name="gh_bool" type_code="1">true</item>
                    <item name="Name" type_name="gh_string" type_code="10">Honeybee_addHBGlz</item>
                    <item name="NickName" type_name="gh_string" type_code="10">addHBGlz</item>
                  </items>
                  <chunks count="2">
                    <chunk name="Attributes">
                      <items count="2">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>660</X>
                          <Y>1407</Y>
                          <W>225</W>
                          <H>104</H>
                        </item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>797</X>
                          <Y>1459</Y>
                        </item>
                      </items>
                    </chunk>
                    <chunk name="ParameterData">
                      <items count="8">
                        <item name="InputCount" type_name="gh_int32" type_code="3">5</item>
                        <item name="InputId" index="0" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="1" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="2" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="3" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="4" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="OutputCount" type_name="gh_int32" type_code="3">1</item>
                        <item name="OutputId" index="0" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                      </items>
                      <chunks count="6">
                        <chunk name="InputParam" index="0">
                          <items count="12">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">A HBZone or HBSurface to which you would like to add a customized glazing surface.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">3ffaa0cf-b61f-423e-a90a-eb913f01baff</item>
                            <item name="Locked" type_name="gh_bool" type_code="1">true</item>
                            <item name="Name" type_name="gh_string" type_code="10">_HBObj</item>
                            <item name="NickName" type_name="gh_string" type_code="10">_HBObj</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="Source" index="0" type_name="gh_guid" type_code="9">38be87c6-9f0b-4109-995d-bbe72db1ecc1</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">c37956f4-d39c-49c7-af71-1e87f8031b26</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>662</X>
                                  <Y>1409</Y>
                                  <W>120</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>731.5</X>
                                  <Y>1419</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="1">
                          <items count="14">
                            <item name="Access" type_name="gh_int32" type_code="3">1</item>
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">A surface or list of surfaces that represent the custom window(s) that you would like to add.  Note that these surfaces should be co-planar to the connected HBSurface or one of the surfaces of the connected HBZones.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">8bdfe1d1-2cf7-4983-8dc4-6c7894b5984f</item>
                            <item name="Locked" type_name="gh_bool" type_code="1">true</item>
                            <item name="Mapping" type_name="gh_int32" type_code="3">1</item>
                            <item name="Name" type_name="gh_string" type_code="10">_childSurfaces</item>
                            <item name="NickName" type_name="gh_string" type_code="10">_childSurfaces</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">1</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="Source" index="0" type_name="gh_guid" type_code="9">96594b45-29ba-4733-af01-3dea24fcc6b0</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">c37956f4-d39c-49c7-af71-1e87f8031b26</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>662</X>
                                  <Y>1429</Y>
                                  <W>120</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>731.5</X>
                                  <Y>1439</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="2">
                          <items count="13">
                            <item name="Access" type_name="gh_int32" type_code="3">1</item>
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">An optional list of names for child surfaces. If names are provided the length of names should be the same as _childSurfaces.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">038a3d5d-da86-4f53-be24-a89b61db2725</item>
                            <item name="Locked" type_name="gh_bool" type_code="1">true</item>
                            <item name="Mapping" type_name="gh_int32" type_code="3">1</item>
                            <item name="Name" type_name="gh_string" type_code="10">childSurfacesName_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">childSurfacesName_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">1</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">37261734-eec7-4f50-b6a8-b8d1f3c4396b</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>662</X>
                                  <Y>1449</Y>
                                  <W>120</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>731.5</X>
                                  <Y>1459</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="3">
                          <items count="12">
                            <item name="Access" type_name="gh_int32" type_code="3">1</item>
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">An optional list of EnergyPlus constructions to set the material construction of the window added to the HBSurface or HBZone.  This can be either the name of a window construction from the OpenStudio library (coming out of the 'Honeybee_Call from EP Construction Library' component) or a custom window construction you created from the 'Honeybee_EnergyPlus Construction' component. The list should match with childSurfaces list. In case the list doesn't match the first construction will be used for all surfaces.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">ff1d98ed-82d8-4ffd-9102-234936eed6e4</item>
                            <item name="Locked" type_name="gh_bool" type_code="1">true</item>
                            <item name="Name" type_name="gh_string" type_code="10">EPConstructions_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">EPConstructions_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">1</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">37261734-eec7-4f50-b6a8-b8d1f3c4396b</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>662</X>
                                  <Y>1469</Y>
                                  <W>120</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>731.5</X>
                                  <Y>1479</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="4">
                          <items count="12">
                            <item name="Access" type_name="gh_int32" type_code="3">1</item>
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">An optional Radiance material to set the material of the window added to the HBSurface or HBZone.  This can be either the name of a window material from the default Radaince library (coming out of the 'Honeybee_Call from Radiance Library' component) or a custom window material you created from any of the Radiance material components (like the 'Honeybee_Radiance Glass Material' component). The list should match with childSurfaces list. In case the list doesn't match the first material will be used for all surfaces.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">79c9ef90-4e05-4de3-9920-4b76861849f0</item>
                            <item name="Locked" type_name="gh_bool" type_code="1">true</item>
                            <item name="Name" type_name="gh_string" type_code="10">RADMaterials_</item>
                            <item name="NickName" type_name="gh_string" type_code="10">RADMaterials_</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">1</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">37261734-eec7-4f50-b6a8-b8d1f3c4396b</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>662</X>
                                  <Y>1489</Y>
                                  <W>120</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>731.5</X>
                                  <Y>1499</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="0">
                          <items count="7">
                            <item name="Description" type_name="gh_string" type_code="10">The Honeybee surface or zone with assigned glazing (in case of success).</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">3d329af2-f346-4256-ae1c-03f160986d2b</item>
                            <item name="Locked" type_name="gh_bool" type_code="1">true</item>
                            <item name="Name" type_name="gh_string" type_code="10">HBObjWGLZ</item>
                            <item name="NickName" type_name="gh_string" type_code="10">HBObjWGLZ</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>812</X>
                                  <Y>1409</Y>
                                  <W>71</W>
                                  <H>100</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>847.5</X>
                                  <Y>1459</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                      </chunks>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
          </chunks>
        </chunk>
      </chunks>
    </chunk>
    <chunk name="Thumbnail">
      <items count="1">
        <item name="Thumbnail" type_name="gh_drawing_bitmap" type_code="37">
          <bitmap length="1980">iVBORw0KGgoAAAANSUhEUgAAAJYAAABkCAIAAADrOV6nAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAdRSURBVHhe7ZnbU1NXFIf9H/vkk+/tgy8ibXUEws0OAoJySZTEFpoESCAQQq6QBFBJQFAghEu4Gu5RZJzpQ1/aj5zUjtYy1XHaszrrG+bM4ZydE2Z/57fW3sMl5f/Ab4pY/lT4UhGIKhSPKhSPKhSPKhSPKhSPKhSPKhSPKhSPKhSPKhSPKhSPKhSPKhSPKhSPKhSPKhSPKhSPKhSPKhSPKhSPKhSPKhSPKhSP6RQeHBwcFsnn86VLyoWYSyHmFhYWUqnpVCq1ubmpFv8JZlG4t5c/ffPa5+u1WTtDoZDb7X7y5EmhUNgvUhqkfAxTKMRfbn3D74vGIvFEIj46OorFxcXF1dVVjsvLy4ZIDeVHMYXCg8P9hfmV2+X+J/Fs4fXR4eHB0yJOpxOd3d3dyWQSkZRWFflXTKEQLyvL24neX16k8/uHhHJvbm7uxYsXwWBwbGwMi5yjcHZ2dn5+nvFf1iJfd3JyzA9IfD/MojCb2Qp3v5p7unVwdD6JrEsJHEfm1zg3WFlZQeTu7u6Xmmuen8vlEolkPJ6cnJza2dkRZ9FECqe8v/Z3R+LJMGnAliHvqAgr1T9G7m9sbDx79ozzLzLXx8dHVOyyMktlZfONG3XLyxm+tHRPCOZQeJBfy768Wxkc6Iu4XD3Uz5GREWrm0tLSxMTE48ePmWWSh1QUonN9fZ1Ky6+lz38uvATUT77CYmluanLU1bWqws+k2At3XPeWnyazwyO+wcHBgYEBr9fb09PDWsbv93d1dU1OTlJCyV8mk0He2toaDRKjpUd8OjyEssk21O8fqapqbmzsqq1tUYWfiVFIY86zpdn93OYqmZuenmZy2RqSRWNpY1RUBiMPkRzJaDabZcYJ0wdQii/IKHcJHx12aWmxUDiZmZn97rv6+vrOW7caMpmldwqLTyoeKenFxnz+u/kwkUKWM/PTO6/fnJydnZGPoaEh9oUoNAppPJ4IBCix4Wg0trCwOD4+nkqliCYDUFIoFI6Ozqeejcf29nYkEqHYUnKJ6Qdggk/x8ZaWdpvtkcPxczAYcji6f/zR9dNPLr6XMUbFLh73dre3N3O5DPHMZHiyCS2aSGG052z28WZ69ikbiVgsRtlEDHMdCATY6Y+MBFyuXn7c7t5oNGqz2TDBfuPBgweNjU1lZVevXPnK4XiE+P7+frfbbSS1yOrKSnZ1dYXIsqDFBI3Wbn9082bD7dvW8vL6UChyfHxI2p8/f07cySV/EjvRxsYWq70n2d0a7Kj9uc/jcDioB+8WVubBFArZOywtrNd/77JbXQ8etg0O+tCGBkol20HmnSNTz4ETooke/BE1bPX29vp8PrvdUVlZRfuMF2FAe3t7OByim1ZV3bZY7jQ03J2amuKFQP/ERLKl5V51dUtTk52FaDI5GQpFr1+v5sq331ra2tp4rMfjraiouXO3M959P9pW4R3mBXKRe1X4t1DB1tbWT04KFCtmGWiEJAh/OGPrtrW1xRhO6JHEhWZpDGBOCevp6enbt2+pqNRJWiY1kIpH7FgH/fBDa0NDh9XqyOXW8Ep8eT86Oqw1Na3NzY6qqrsTE7wNYxYLRh3V1U3RaIS67fF4rFbboM8/MxmfmxpPz8xykT/mghb7X2EWhfm9/JBvdHhoyOfzjo4GSRLF8/x6Po9UGtvi4iKllVKGGGO/YXQs4+N/hQ8abG1t4ntgYCgYjPh8fp6TzS4nEhPsBS2W1rKyGgLX1+eprm69c+dhfX3rxkaOd4IXgu57//698XjC6e6l9iKeuv1usWMezKKQOU+nnhVXKEkSQAqdTic5Q5thjkLK1pAgck4uL5D3DuJIdGpra222rhs3GhB2/XpNLDaGfvIUicTGxsYjkWgutz48HOBuY6MdhTROFNILb92quHr1KoWajY2xSA6Hw//ke/9lzKPwJYIopEDOyArJM2LErFEhKZhYnJmZoaJ+0jyyf/B4Blm21NS0lZfXuVxuqnGx/J5wi+ObN6der+/aNUtFRfPNm3UoZEnc0dF5+fLlb775mlUMXZCqkEiwJA6owo+Dp53t3Ud214B3IBgM8LKzIiUHxtqBfQK5SafTeGXkp3ajo6PDdHrG6exDpMvVTx/lSuleEazw5DC7legYpox9Ba8Ryx/CR/RZplJIqaJcUYUXQWtjjRII+Pv6+miELCbJHOYopEwxHfHzpg8HNLBXr4j3CUcewpXSvSLGgPPb55z/s4IrDCP6xsqIcwYYx9JnzISJFAKzxvSiDXj3CYQxm8DMlgYp72MuhYAq6ieY85U3IaZTqHwqqlA8qlA8qlA8qlA8qlA8qlA8qlA8qlA8qlA8qlA8qlA8qlA8qlA8qlA8qlA8qlA8qlA8qlA8qlA8qlA8qlA8qlA8qlA8qlA8qlA8qlA8qlA8qlA8qlA8qlA8qlA8qlA8qlA8qlA8qlA8qlA8qlA8qlA8qlA8qlA8qlA8qlA8qlA8qlA8qlA8qlA8qlA8qlA8qlA87ylUhFJSqAjm0qXfARg8iniwHrriAAAAAElFTkSuQmCC</bitmap>
        </item>
      </items>
    </chunk>
  </chunks>
</Archive>